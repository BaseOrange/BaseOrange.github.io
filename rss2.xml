<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>大橙子</title>
    <link>https://log.660066.xyz/</link>
    
    <atom:link href="https://log.660066.xyz/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>新的斗争开始了&lt;br/&gt;A new struggle has begun</description>
    <pubDate>Mon, 06 Jan 2025 07:30:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2024年终总结</title>
      <link>https://log.660066.xyz/2025/01/06/2024-summary/</link>
      <guid>https://log.660066.xyz/2025/01/06/2024-summary/</guid>
      <pubDate>Mon, 06 Jan 2025 06:42:16 GMT</pubDate>
      
      <description>2024年终总结</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="2024年总结"><a href="#2024年总结" class="headerlink" title="2024年总结"></a>2024年总结</h1><h2 id="工作："><a href="#工作：" class="headerlink" title="工作："></a>工作：</h2><ol><li>公司项目顺利的稳步开发中</li><li>沟通上，有了进步，不像一年前刚入职时候语无伦次的样子了。管理上老样子，插不进手，毕竟刚毕业，也没资格插手哈哈哈哈哈。</li><li>年内换了两次工位，从公共办公区进了会议室集中开发， 又从会议室搬到了经理室门口，”经理警卫排”。</li><li>木涨薪、木涨薪、木涨薪。就这就业环境及其恶劣的情况下，还好没辞退我，谢天谢地了也是。</li></ol><h2 id="生活："><a href="#生活：" class="headerlink" title="生活："></a>生活：</h2><ol><li>24年总共去了三个地方。苏州-&gt;上海-&gt;南京</li><li>找到了女朋友</li><li>搬了新住处，在此提醒，济南的各位朋友，济南租房找中介、二房东的，95%你是拿不回押金的。（泊寓、冠寓等大概能拿回来，但是每年都涨租）</li></ol><h2 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h2><ol><li>了解了一下React相关的知识，但是完全去开发还是比较困难</li><li>LLM了解的比较多，相关的专业概念、术语也有所了解。</li><li>软考划水的一年，很显然，过不了哈哈哈哈哈</li></ol><h2 id="资产："><a href="#资产：" class="headerlink" title="资产："></a>资产：</h2><ol><li>资产上比较走运。买了债基，小赚一笔。</li><li>在低点买了沪指基金，也小赚了一点。</li><li>黄金也多少赚了一点点，很少，也就买杯奶茶的钱。</li><li>真是凑巧。24年，债牛、股牛都让我赶上了，虽然没赚到大钱，但是多少赚了点饭钱。</li><li>开了证券账户，买了一手股票，开始积累股票交易经验。（妥妥投机分子我）</li><li>年底置办了Mac mini m4的丐版。构建出了手机、手表、电脑的苹果生态。</li></ol><h1 id="2025年展望"><a href="#2025年展望" class="headerlink" title="2025年展望"></a>2025年展望</h1><h2 id="工作：-1"><a href="#工作：-1" class="headerlink" title="工作："></a>工作：</h2><ol><li>一步一个脚印，稳扎稳打，保证别出现重大生产事故。</li><li>进一步提升沟通、管理能力。加强自己对系统架构的设计能力。</li><li>尽量避免摸鱼被经理抓包。</li></ol><h2 id="生活：-1"><a href="#生活：-1" class="headerlink" title="生活："></a>生活：</h2><ol><li>初步打算是五一去香港旅游，目前港澳通行证已经在审批了。</li><li>多出去转转、玩玩。</li><li>拔牙，公司给买的商业医疗补充险，把两个智齿拔了。</li></ol><h2 id="学习：-1"><a href="#学习：-1" class="headerlink" title="学习："></a>学习：</h2><ol><li>React还是要看啊，完成“全干”工程师的基本技能</li><li>拿到软考中级证书，多看题多刷题。</li><li>继续深耕LLM相关领域，重点是OCR识别、应用开发、微调相关方面。</li><li>打算拿一下A类业余无线电执照</li></ol><h2 id="资产：-1"><a href="#资产：-1" class="headerlink" title="资产："></a>资产：</h2><ol><li>也是稳扎稳打吧，以稳健投资为主体。</li><li>多元化布局投资，布局少量的激进投资产品。</li><li>学习一下金融投资相关的知识，少踩坑，多赚钱。</li></ol><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>其实本来有个2023年总结来着，2024年写着写着就写到年中了，实在是太忙，索性不总结了。</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      <comments>https://log.660066.xyz/2025/01/06/2024-summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MacOS的系统环境变量</title>
      <link>https://log.660066.xyz/2024/11/22/mac-env-var/</link>
      <guid>https://log.660066.xyz/2024/11/22/mac-env-var/</guid>
      <pubDate>Fri, 22 Nov 2024 03:36:27 GMT</pubDate>
      
      <description>MacOS的系统环境变量</description>
      
      
      
      <content:encoded><![CDATA[<p>在macOS中，配置环境变量可以通过多个文件来完成，这些文件根据不同的场景和需求有所不同。以下是一些常用的文件及其用途：</p><h1 id="etc-paths"><a href="#etc-paths" class="headerlink" title="&#x2F;etc&#x2F;paths"></a><strong>&#x2F;etc&#x2F;paths</strong></h1><ul><li>作用：定义系统的路径列表，即命令搜索路径。</li><li>适用范围：全局，影响所有用户。</li><li>使用方法：直接编辑此文件，添加或修改路径条目。</li></ul><h1 id="etc-paths-d"><a href="#etc-paths-d" class="headerlink" title="&#x2F;etc&#x2F;paths.d&#x2F;"></a><strong>&#x2F;etc&#x2F;paths.d&#x2F;</strong></h1><ul><li>作用：这是一个目录，可以在这个目录下创建多个文件，每个文件可以包含一个或多个路径条目，这些路径将被添加到PATH环境变量中。</li><li>适用范围：全局，影响所有用户。</li><li>使用方法：在<code>/etc/paths.d/</code>目录下创建文件，每行一个路径条目。</li></ul><h1 id="etc-profile"><a href="#etc-profile" class="headerlink" title="&#x2F;etc&#x2F;profile"></a><strong>&#x2F;etc&#x2F;profile</strong></h1><ul><li>作用：系统级的配置文件，当用户登录时，它会被读取以设置环境变量。</li><li>适用范围：全局，影响所有用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。</li></ul><h1 id="bash-profile"><a href="#bash-profile" class="headerlink" title="~&#x2F;.bash_profile"></a><strong>~&#x2F;.bash_profile</strong></h1><ul><li>作用：用户级的配置文件，当用户登录时，它会被读取以设置环境变量和启动命令。</li><li>适用范围：仅影响当前用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。</li></ul><h1 id="bashrc"><a href="#bashrc" class="headerlink" title="~&#x2F;.bashrc"></a><strong>~&#x2F;.bashrc</strong></h1><ul><li>作用：用户级的配置文件，当用户打开一个新的终端窗口（非登录shell）时，它会被读取。</li><li>适用范围：仅影响当前用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。</li></ul><h1 id="zshrc"><a href="#zshrc" class="headerlink" title="~&#x2F;.zshrc"></a><strong>~&#x2F;.zshrc</strong></h1><ul><li>作用：如果你使用的是Zsh作为默认shell，这个文件会在每次打开新的终端窗口时被读取。</li><li>适用范围：仅影响当前用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。</li></ul><h1 id="profile"><a href="#profile" class="headerlink" title="~&#x2F;.profile"></a><strong>~&#x2F;.profile</strong></h1><ul><li>作用：用户级的配置文件，如果<code>~/.bash_profile</code>不存在，Bash会尝试读取这个文件。</li><li>适用范围：仅影响当前用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。</li></ul><h1 id="etc-launchd-conf"><a href="#etc-launchd-conf" class="headerlink" title="&#x2F;etc&#x2F;launchd.conf"></a><strong>&#x2F;etc&#x2F;launchd.conf</strong></h1><ul><li>作用：系统级的配置文件，用于设置环境变量，这些变量在系统启动时生效。</li><li>适用范围：全局，影响所有用户。</li><li>使用方法：编辑此文件，添加或修改环境变量设置。注意：在macOS Catalina及更高版本中，<code>/etc/launchd.conf</code>可能不再被支持，建议使用<code>launchctl</code>命令来设置环境变量。</li></ul><h1 id="launchctl"><a href="#launchctl" class="headerlink" title="launchctl"></a><strong>launchctl</strong></h1><ul><li><p>作用：命令行工具，用于设置系统级或用户级的环境变量。</p></li><li><p>适用范围：全局或用户级。</p></li><li><p>使用方法：</p><ul><li><p>设置系统级环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl setenv VARIABLE_NAME value</span><br></pre></td></tr></table></figure></li><li><p>设置用户级环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl setenv VARIABLE_NAME value</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>假设你想为当前用户设置一个环境变量<code>MY_VARIABLE</code>，可以编辑<code>~/.bash_profile</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bash_profile</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export MY_VARIABLE=value</span><br></pre></td></tr></table></figure><p>保存并退出编辑器，然后使更改生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这样，每次你登录或打开一个新的终端窗口时，<code>MY_VARIABLE</code>就会被设置。</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/MacOS/">MacOS</category>
      
      
      <comments>https://log.660066.xyz/2024/11/22/mac-env-var/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google提示词指南101【翻译】</title>
      <link>https://log.660066.xyz/2024/11/14/google-prompting-guide-101/</link>
      <guid>https://log.660066.xyz/2024/11/14/google-prompting-guide-101/</guid>
      <pubDate>Thu, 14 Nov 2024 01:30:00 GMT</pubDate>
      
      <description>Google官方的prompt提示教程是一本四十多页的书，对入门小白来说比较友好，简单使用翻译软件阅读。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、编写有效的提示"><a href="#一、编写有效的提示" class="headerlink" title="一、编写有效的提示"></a>一、编写有效的提示</h1><p>​Google Workspace 最早就是为让您能够与其他人实时协作而创立的。现在，您还可以使用 Gemini for Google Workspace 与 AI 协作，帮助提高您的工作效率和创造力，而无需牺牲隐私或安全性。嵌入式生成式 AI 功能可以帮助您编写、组织、可视化、加速工作流程、召开更精彩的会议等等，同时使用您最喜爱的应用程序，例如 Gmail、Google Docs、Google Sheets、Google Meet 和 Google Slides。<br>​这本书将为您提供基础技能，让您学会如何在使用Gemini for Workspace时编写有效且具有指导性的提示语，从而提高日常工作的效率和生产力。您可以将提示语视为与AI助手对话的开场白。随着对话的深入，您可能会撰写多个提示语。虽然可能性几乎是无限的，但仍然有一些一贯的最佳实践可供您今天就开始应用。</p><p>​<strong>在撰写有效的提示语时，有四个主要方面是需要考虑的。您并不一定非要全部使用，但采用其中的几个将会很有帮助！</strong></p><ul><li><font style="background: #D2E2FB">人物角色</font></li><li><font style="background: #F9D2CF">任务</font></li><li><font style="background: #FDEEC3">语境</font></li><li><font style="background: #CEEAD5">格式</font></li></ul><p>​以下是使用所有四个区域的提示示例，这些提示在 Gmail 和 Google Docs 中可以很好地发挥作用：</p><p>​<font style="background: #D2E2FB">你是 Google Cloud 项目经理。</font><font style="background: #F9D2CF">起草执行摘要电子邮件发给</font><font style="background: #FDEEC3">[角色] 基于[相关程序文档的详细信息]。</font><font style="background: #CEEAD5">限制为要点。</font></p><p>以下是一些帮助您开始使用 Gemini for Workspace 的快速提示：</p><ol><li>使用自然语言。写作时就像在和另一个人说话一样。用完整的句子表达完整的想法。</li><li>具体并反复。告诉 Gemini for Workspace 您需要它做什么（总结、写作、改变语气、创造）。提供尽可能多的背景信息。</li><li>简明扼要，避免复杂化。用简短但具体的语言陈述您的请求。避免使用行话。</li><li>进行对话。如果结果不符合您的期望或您认为还有改进空间，请细微的调整您的提示。使用后续提示和反复审查和改进的过程来获得更好的结果。</li></ol><blockquote><p>提示词是一门艺术。如果第一次没有得到想要的结果，你可能需要尝试几种不同的提示方法。根据我们在 Workspace Labs 计划中学到的知识，最成功的提示平均大约有 21 个字，但人们经常在不知情的情况下尝试的提示很短——通常少于 9 个字。</p><p>生成式人工智能及其各种可能性确实令人兴奋，但它仍然是一个新兴的技术领域。即便我们的模型每天都在改进，变得更加智能和可靠，但是有时候对于给定的提示，它们的响应仍然可能是不可预测的。这是因为模型的学习基于过去的数据，并且在处理新颖或特定的问题时可能会遇到困难，尤其是在理解上下文或执行复杂的推理任务时。此外，模型也可能会产生与人类价值观或社会规范不一致的内容。因此，在使用生成式AI时，重要的是要持续监督和评估其生成的内容，以确保它们符合预期并适当地应用于实际场景中。</p><p>在将Gemini for Workspace的输出付诸实施之前，请先审查以确保其清晰、相关和准确。当然，最重要的是要记住：生成式AI是为了帮助人类，但最终的输出是由您决定的。</p><p>本指南中的示例提示仅用于说明目的。</p></blockquote><h1 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h1><h2 id="2-1-Gemini-for-Google-Workspace：提示-101"><a href="#2-1-Gemini-for-Google-Workspace：提示-101" class="headerlink" title="2.1 Gemini for Google Workspace：提示 101"></a>2.1 Gemini for Google Workspace：提示 101</h2><p>​有多种方式可以访问Gemini for Google Workspace的生成式AI功能。它是一个强大的生成式AI体验，无缝集成到了您每天使用的应用程序中——Gmail、Google Docs、Google Sheets、Google Meet 和 Google Slides。同时，您还可以访问gemini.google.com与Gemini进行交谈（享有Google Workspace企业级的安全和隐私保护）。</p><p>​理解如何构建一个有效的提示语并学习即时创建提示语能够极大地提升您的生产力和创造力。您可以将Gemini for Workspace视为一个由AI驱动的助手，它可以帮助您：</p><ul><li>提高写作水平</li><li>组织数据</li><li>创建原始图像</li><li>总结信息并提出见解</li><li>与同事建立有意义的联系</li><li>研究不熟悉的话题</li><li>发现趋势、综合信息并识别商机</li></ul><p>​Gemini for Workspace 可帮助您更聪明地工作，而不是更辛苦地工作，从而提高工作效率并节省时间，以便您可以专注于更有效的工作。本指南探讨了快速入门和掌握基础知识的不同方法，以帮助您完成日常任务。</p><p>​随着您对这种新的工作方式越来越有信心并逐渐熟悉，您将准备好探索更为复杂的提示语，这将使您能够优化整个工作流程。届时，Gemini for Workspace 可以成为您的思维伙伴、写作教练等角色。</p><p>​使用Gemini for Workspace 提升生产力和创造力的机会几乎是无穷无尽的。</p><h2 id="2-2-如何使用这份提示语指南"><a href="#2-2-如何使用这份提示语指南" class="headerlink" title="2.2 如何使用这份提示语指南"></a>2.2 如何使用这份提示语指南</h2><p>​这本手册是一份快速入门指南，旨在向您介绍如何使用Gemini for Workspace进行提示语操作。它包含了针对不同角色的情景、用例示例以及适用于高管、创始人及销售、营销、客户服务、项目管理和人力资源专业人士日常任务的潜在提示语。</p><p>​您会注意到各种不同的提示语风格。有些提示语中包含括号内的项目，这表示您需要填写的具体细节所在的位置。其他提示语则不标记变量，以展示完整的提示语可能是什么样子。本指南中的所有提示语都是为了启发您，但最终它们需要根据您的具体工作进行调整。</p><p>​首先，请跳至最适合您角色的部分。使用特定于角色的建议提示作为灵感，帮助您解锁一种全新而强大的工作方式。</p><p>​接下来，只需查找这些功能，并访问 g.co&#x2F;gemini&#x2F;features 了解如何开始使用每个功能</p><ul><li>帮我写 (Google 文档)</li><li>帮我写 (Gmail)</li><li>帮我整理 (Google 表格)</li><li>使用 Gemini 创建图像 (Google 幻灯片)</li><li>创建背景图像 (Google Meet)</li><li>gemini.google.com（具有 Google Workspace 企业级安全和隐私）</li></ul><h1 id="三、客户服务"><a href="#三、客户服务" class="headerlink" title="三、客户服务"></a>三、客户服务</h1><p>​作为客户服务专业人士，您致力于提供高效、始终令人愉悦的服务，并由积极主动、乐于助人的团队提供支持。本部分为您提供了将提示集成到日常任务中的简单方法。快速构建标准化沟通框架、个性化沟通、新培训材料等 - 所有这些都使用 Gemini for Google Workspace。</p><h2 id="3-1-入门"><a href="#3-1-入门" class="headerlink" title="3.1 入门"></a>3.1 入门</h2><p>​首先，查看一般提示写作技巧和本指南开头的提示 101 部分</p><p>​下面的每个提示都附带一个场景，以启发您如何使用 Gemini for Workspace 进行协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。我们还提供了不同客户服务角色如何使用 Gemini for Workspace 的示例。您可以调整每个提示以完成常见任务并优化生成的输出。</p><h2 id="3-2-提示迭代示例"><a href="#3-2-提示迭代示例" class="headerlink" title="3.2 提示迭代示例"></a>3.2 提示迭代示例</h2><p>​您是一名客户服务代表，负责直接回复客户的咨询和疑虑。您刚刚收到一封客户发来的电子邮件，称客户收到了损坏的商品。您打开一份新的 Google 文档，点击“帮我写”，以提示 Docs 中的 Gemini。输入以下内容：</p><p><font style="background: #F9D2CF">帮我写一封富有同理心的电子邮件回复。</font><font style="background: #D2E2FB">我是一名客户服务代表，</font><font style="background: #F9D2CF">我需要回复一个客户投诉。</font><font style="background: #FDEEC3">客户订购了一副耳机，但收到后发现已经损坏。他们已经通过电子邮件联系我们，并提供了损坏的图片。我提供了替换品，但他们要求使用通常不包含在订单中的加急送货服务。</font><font style="background: #CEEAD5">请附上一段文字，承认他们的沮丧情绪，并列出三个可能的解决方案。</font></p><p><font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20240829163350572.png" alt="image-20240829163350572"></p><p>​您喜欢 Docs 中的 Gemini 创建的电子邮件，因此选择“插入”。但您想集思广益，想出解决问题的方法，但不提供加急送货服务。您选择“帮我写”来提示。您输入：</p><p>​ <font style="background: #F9D2CF">帮我写10个替代加急运输的方案，</font><font style="background: #FDEEC3">以解决客户收到损坏包裹时的沮丧情绪。</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20240829163603135.png" alt="image-20240829163603135"></p><p>​这 10 条建议很有帮助。单击“插入”将文本添加到草稿中。</p><h2 id="3-3-提示指南"><a href="#3-3-提示指南" class="headerlink" title="3.3 提示指南"></a>3.3 提示指南</h2><h3 id="3-3-1-客户服务经理或代表"><a href="#3-3-1-客户服务经理或代表" class="headerlink" title="3.3.1 客户服务经理或代表"></a>3.3.1 客户服务经理或代表</h3><h4 id="用例：标准化沟通框架"><a href="#用例：标准化沟通框架" class="headerlink" title="用例：标准化沟通框架"></a>用例：标准化沟通框架</h4><p>​您是客户服务团队经理。您的团队已经扩大，您需要创建可扩展的资源来标准化整个团队的沟通。您打开一个新的 Google 文档。您想集思广益，因此您向 Docs 中的 Gemini 寻求帮助。您选择“帮我写”并输入：</p><blockquote><p>为三种不同类型的客户沟通草拟模板。为道歉电子邮件、订单确认信息和忠诚客户的感谢信创建模板。将每个模板限制为一段文字，并使用友好的语气。</p></blockquote><p>​建议的模板为您提供了一个很好的起点，您可以开始编辑和添加一些与公司品牌和政策一致的元素。您选择“插入”。现在，您要创建一个文档，概述团队用于入职的最佳沟通实践。您打开一个新的 Google 文档并提示 Gemini in Docs。您输入：</p><blockquote><p>制定一份客户沟通最佳实践清单，可用于培训新团队成员。概述三个部分，包括如何处理满意的客户咨询、中立的客户咨询和不满意的客户咨询。</p></blockquote><p>​您还希望为团队提供标准化语言，以便他们在电话中与客户互动时使用。 您想集思广益，因此打开 gemini.google.com 并输入：</p><blockquote><p>我是一名 [客户服务经理]。我正在尝试创建标准化语言，以便团队在与客户进行电话交流时使用。为零售店的客户服务代表生成常见的通话开始、问候和结束语模板。这些模板应允许使用客户详细信息进行个性化设置。目标是确保一致性和专业性，同时允许使用特定客户信息进行区分。</p></blockquote><h4 id="用例：改善客户服务"><a href="#用例：改善客户服务" class="headerlink" title="用例：改善客户服务"></a>用例：改善客户服务</h4><p>​您注意到客户投诉有所增加。您需要跨部门协作，以了解如何解决反复出现的问题。您首先向其他团队负责人发送电子邮件。您在 Gmail 中选择“帮我写”，提示 Gemini。您输入：</p><blockquote><p>草拟一封电子邮件给我的同事们，提议召开一次会议讨论客户体验改进计划。请求市场、销售和产品相关人员在下周会面，以明确各自的职责和角色。</p></blockquote><p>​您简单地复制编辑了电子邮件并将其发送给您的同事。现在您已经发送了初始电子邮件，您想创建一个电子表格，以便跟踪此跨部门计划的进展情况。您打开 Google 表格，并通过选择“帮助我整理”来提示 Gemini。您输入：</p><blockquote><p>创建一个表格来跟踪不同客户体验改进策略的进展和影响，使用相关指标包括支持工单数量和优先级（高、中、低）。</p></blockquote><p>​您看到一个已经按照您要求的类别格式化好的电子表格模板。现在您只需填入具体的细节即可。</p><h3 id="3-3-2-客户支持专家"><a href="#3-3-2-客户支持专家" class="headerlink" title="3.3.2 客户支持专家"></a>3.3.2 客户支持专家</h3><h4 id="用例：实现客户自助服务"><a href="#用例：实现客户自助服务" class="headerlink" title="用例：实现客户自助服务"></a>用例：实现客户自助服务</h4><p>​作为客户支持专家，您的团队收到了很多关于退货政策的问题电子邮件。客户反馈一致认为您的指导方针不明确。您打开一份 Google 文档，其中说明了退货、退款和商店信用政策。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>总结此内容，制定一个清晰简洁的产品退货政策，并概述客户需依次采取的5个步骤</p></blockquote><p>​您喜欢这些步骤的简洁性。接着，您重复这一过程来简化退款政策和商店积分政策。现在，您希望使用这些新简化的内容来创建一篇博客文章，以便告知客户有关退货、退款和商店积分的政策。使用包含新撰写的指导内容的Google Doc，您在Google Docs中向Gemini发出提示。您输入：</p><blockquote><p>把这些内容变成一个简短的文章，标题为“无需客服协助即可解决常见问题”。为我们的退货政策、退款政策和商店信用政策设置单独的部分。</p></blockquote><p>​现在，您想要创建一个电子邮件模板，团队可以在收到有关这三个领域的客户问题时使用该模板。您打开一个新的 Google 文档，并在 Docs 中提示 Gemini。您输入：</p><blockquote><p>起草一份发给客户的电子邮件模板，重点介绍 [支持问题] 的自助服务资源 [博客链接]。并感谢客户的惠顾，向他们保证我们致力于满足他们的需求。</p></blockquote><h4 id="用例：客户之声研究"><a href="#用例：客户之声研究" class="headerlink" title="用例：客户之声研究"></a>用例：客户之声研究</h4><p>​公司的新政策是，您将向每一位不满意的客户发送电子邮件，以尝试解决问题。您打开一封包含客户投诉的电子邮件。您选择“帮我写”，在 Gmail 中提示 Gemini。您输入：</p><blockquote><p>请求在 [日期] 的 [时间] 与提供负面反馈的客户进行跟进对话，以了解他们的关切并提供解决方案。包括示例解决方案。</p></blockquote><p>​起草的回复是一个不错的开始，但对于投诉的回应语言有点太直接了。您可以通过在 Gmail 中使用“优化”&gt;“详细阐述”提示 Gemini 来进行迭代。接下来，您想要创建一个简短的调查问卷，您可以在每次与客户进行后续通话后发送该问卷，以评估通话对满足他们的需求有多大帮助。您打开一个新的 Google 文档并在 Docs 中提示 Gemini。您输入</p><blockquote><p>创建五个不同的问题，针对刚刚与客服代表通过电话的客户。这些问题应衡量通话的有效性，客户的关切是否得到解决，以及他们是否会向其他人推荐我们的业务。</p></blockquote><h3 id="3-3-3-客户服务协调员"><a href="#3-3-3-客户服务协调员" class="headerlink" title="3.3.3 客户服务协调员"></a>3.3.3 客户服务协调员</h3><h4 id="用例：与客户互动"><a href="#用例：与客户互动" class="headerlink" title="用例：与客户互动"></a>用例：与客户互动</h4><p>​您在更新政策方面取得了很大进展，并希望从最忠实的客户那里获得有关这些变化的反馈。您计划举办一次倾听之旅，与他们互动。您打开 Gmail 并在 Gmail 中提示 Gemini。您选择“帮我写”并输入</p><blockquote><p>写一封电子邮件，邀请我最忠实的客户参加下周在 [地点] [日期] [时间] 举行的有关我们更新的 [政策] 的反馈会议。</p></blockquote><p>​聆听之旅已结束，您已收到与会者的后续电子邮件。您需要帮助回复每封邮件，因此您在 Gmail 中提示 Gemini。您输入：</p><blockquote><p>给客户 [姓名] 写一封个性化的感谢信，感谢他们参加反馈会议，并解释我们将如何使用反馈来改进我们的政策。</p></blockquote><h4 id="用例：准备客户会议"><a href="#用例：准备客户会议" class="headerlink" title="用例：准备客户会议"></a>用例：准备客户会议</h4><p>​您需要准备与一位重要客户会面。他们的帐户对您来说是新客户，他们的行业和业务线也是新客户。您需要帮助进行研究，因此您打开 gemini.google.com 并输入：</p><blockquote><p>撰写五个问题，用于调研[行业]行业的公司，以了解他们面临的最大挑战并为首次会议做准备。</p></blockquote><p>​使用这些问题，您继续在gemini.google.com与Gemini的对话中进行后续提问。您将笔记和发现整理到一个Google文档中。你有几页笔记，所以你想为自己创建一个易于理解的摘要。你在 Docs 中提示 Gemini。你输入：</p><blockquote><p>从该内容中总结有关[行业]的发现并创建与客户讨论的谈话要点。</p></blockquote><p>​现在，您已经准备好与客户第一次见面了。您正准备发送第一封介绍电子邮件。您打开 Gmail，并在 Gmail 中提示 Gemini。您选择“帮我写”，然后输入：</p><blockquote><p>写一封电子邮件介绍我是 [帐户] 的客户服务协调员。邀请我的客户就 [主题] 举行会议，并要求在未来两周内确定日期和时间。</p></blockquote><h1 id="四、高管和企业家"><a href="#四、高管和企业家" class="headerlink" title="四、高管和企业家"></a>四、高管和企业家</h1><p>​作为一名高管，您在规划组织发展方向时时间非常紧张。您做出的每一个决定都会影响业务的增长、创新和整体发展轨迹。了解您的市场、保持领先趋势并做出明智的战略决策至关重要，在忙碌时完成紧急任务也同样重要。</p><p>​本节向您介绍由AI生成的提示语的强大功能，这些提示语旨在简化您的决策过程，帮助改善业务成果，并协助您快速完成任务——即使您不在办公桌前也是如此。了解Gemini for Google Workspace如何帮助您解锁深刻的洞察力，促进协作，并推动您的组织达到新的高度。</p><h2 id="4-1-入门"><a href="#4-1-入门" class="headerlink" title="4.1 入门"></a>4.1 入门</h2><p>​首先，查看一般提示写作技巧和本指南开头的提示 101 部分</p><p>​下面的每个提示都附带一个场景，以启发您如何使用 Gemini for Workspace 进行协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。我们还提供了不同客户服务角色如何使用 Gemini for Workspace 的示例。您可以调整每个提示以完成常见任务并优化生成的输出。</p><h2 id="4-2-提示迭代示例"><a href="#4-2-提示迭代示例" class="headerlink" title="4.2 提示迭代示例"></a>4.2 提示迭代示例</h2><p>​您是一位即将登上长途航班的高管，刚刚收到下次会议的邀请，并附有议程。您有一些意见，并想提议在议程中添加一些主题。您打开 Gmail，并在 Gmail 中提示 Gemini。您输入：</p><p><font style="background: #F9D2CF">起草一封电子邮件，</font><font style="background: #FDEEC3">确认我将参加董事会会议。询问我们是否可以调整议程，为[紧急主题]留出 15 分钟时间。</font></p><p><font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20240829172742154.png" alt="image-20240829172742154"></p><p>电子邮件看起来不错，但您想确保语气尽可能正式。您选择“优化-&gt;正式化”。</p><p><img src="/2024/11/14/google-prompting-guide-101/image-20240829172821285.png" alt="image-20240829172821285"></p><p>您阅读电子邮件，然后选择“插入”。在发送之前，您进行了简单的编辑，以感谢团队在旅途中为您提供帮助。</p><h2 id="4-3-提示指南"><a href="#4-3-提示指南" class="headerlink" title="4.3 提示指南"></a>4.3 提示指南</h2><h3 id="4-3-1-首席运营官"><a href="#4-3-1-首席运营官" class="headerlink" title="4.3.1 首席运营官"></a>4.3.1 首席运营官</h3><h4 id="用例：准备员工沟通信息"><a href="#用例：准备员工沟通信息" class="headerlink" title="用例：准备员工沟通信息"></a>用例：准备员工沟通信息</h4><p>​您正在主持全公司季度全体会议。本季度取得了许多积极进展和发展势头，但您担心多个团队在遭遇意外挫折后士气低落。您想集思广益并练习如何回答可能很棘手的问题。您打开 gemini.google.com，然后输入</p><blockquote><p>我是一家中型公司的首席运营官。我将主持全公司季度员工大会。本季度取得了许多积极进展和发展势头，但我担心多个团队由于一些不可预见的挫折而士气低落。我想集思广益并练习如何回答可能棘手的问题。帮我写一些有挑战性的问题，员工可能会在即将到来的员工大会上询问我们的收入、领导层变动和公司愿景。为每个问题生成可能的答案，并使用自信而坚定的语气。</p></blockquote><p>​这些问题和建议的答案对您的准备阶段很有帮助。现在，您想收集有关如何以同理心回答问题的想法，尤其是在不确定的时期。您再次提示。您输入：</p><blockquote><p>这些问题和建议的答案对我的准备阶段很有帮助。现在，我想收集一些想法，关于如何以同理心的方式回答问题，特别是在不确定的时期。使用自信和令人安心的语气来做出回应，承认员工的担忧，并让员工知道我们正在努力为整个公司尽最大努力。</p></blockquote><p>​您想从这些问题开始，找出如何撰写振奋人心的评论来开启市政厅。您决定使用 Docs 中的 Gemini 进行头脑风暴。您打开一个新的 Google Doc 并选择“帮助我写作”。您输入</p><blockquote><p>帮我为刚刚结束一个充满挑战的季度的员工写两段振奋人心的文字。承认[困难]并强调即将到来的季度的[积极因素]。使用一种激励人心、乐观并培养团结和协作意识的语气。</p></blockquote><h4 id="用例：简化随时随地的响应"><a href="#用例：简化随时随地的响应" class="headerlink" title="用例：简化随时随地的响应"></a>用例：简化随时随地的响应</h4><p>由于您正在处理一项紧急任务，您的计划突然发生了变化。您无法参加会议，只需要确保团队对几个关键项目有答案。您打开 Gmail 并使用语音命令提示 Gmail 中的 Gemini。你说：</p><blockquote><p>给 [项目负责人] 写一封电子邮件，告知他们我因紧急事项无法参加会议。请他们做详细记录，确保团队就 [关键主题] 做出决定，并将事后分析报告的查看权分配给 [同事]。</p></blockquote><h3 id="4-3-2-首席营销官"><a href="#4-3-2-首席营销官" class="headerlink" title="4.3.2 首席营销官"></a>4.3.2 首席营销官</h3><h4 id="用例：集思广益内容和思想领导力"><a href="#用例：集思广益内容和思想领导力" class="headerlink" title="用例：集思广益内容和思想领导力"></a>用例：集思广益内容和思想领导力</h4><p>​您刚与社交媒体团队负责人进行了会议。在一份Google文档中，您记录了许多关于受众共鸣的内容、热门话题、目标受众数据以及能够有效提升品牌互动的关键词。您希望利用这些见解来头脑风暴一些潜在的思想领导文章。您通过在现有的Google文档中选择“帮助我写作”来向Docs中的Gemini发出提示。您输入：</p><blockquote><p>根据热门话题、目标受众分析和品牌关键词，为 [公司] 列出四个相关且引人入胜的思想领导力博客文章创意。</p></blockquote><p>​在相同的会议中，团队讨论了启动一个新的品牌活动。您知道客户非常重视您们可靠且独特的产品服务，并且您的公司一直以来都有兑现对客户承诺的历史。您需要帮助来开始构思新的活动方案。您打开一个新的Google文档并选择“帮助我写作”。您输入：</p><blockquote><p>为 [公司] 提出三个新口号选项，强调可靠性、创新性和悠久的受欢迎程度。</p></blockquote><p>​这些口号对启动您的创意过程很有帮助。您有一些即将举行的活动，这些活动可能是测试新活动元素的完美场所。您希望为活动团队设计展位图形的草案。您在Google Slides中打开一个新的演示文稿并选择使用Gemini创建图像。您输入：</p><blockquote><p>创建一张使用橙色和蓝色的贸易展会展位图像。该展位应该是现代风格，并展示互动电脑站。</p></blockquote><h4 id="用例：进行竞争分析"><a href="#用例：进行竞争分析" class="headerlink" title="用例：进行竞争分析"></a>用例：进行竞争分析</h4><p>​您的团队正在考虑拓展一条新的业务线。这对您来说是一个全新的领域，您希望能够迅速了解这对业务意味着什么。您决定进行调研。您前往gemini.google.com，并输入：</p><blockquote><p>我是一名 CMO，正在进行竞争分析。我的公司正在考虑拓展 [新的业务线]。列出 [行业] 中排名前五的竞争对手，并列出他们的定价、优势、劣势和目标受众。</p></blockquote><p>经过深入研究后，您决定制定一个虚构的五年战略，看看这对公司来说会是什么样子。您输入：</p><blockquote><p>好的，我打算说服我的CEO我们应该拓展进入 [业务领域]。请为北美的[行业]行业起草一个为期五年的精炼的竞争战略，包括目标、策略和战术。</p></blockquote><h3 id="4-3-3-首席技术官"><a href="#4-3-3-首席技术官" class="headerlink" title="4.3.3 首席技术官"></a>4.3.3 首席技术官</h3><h4 id="用例：总结新兴技术趋势"><a href="#用例：总结新兴技术趋势" class="headerlink" title="用例：总结新兴技术趋势"></a>用例：总结新兴技术趋势</h4><p>​您需要了解新兴技术趋势，因为形势瞬息万变。您打开gemini.google.com，然后输入：</p><blockquote><p>我是 [行业] 的 [公司] 的首席技术官。我想了解新兴技术趋势。总结对 [行业] 最具潜在影响的五大新兴技术。对于每项技术，列出其潜在的优势和挑战，并提出其在未来两到三年内可能对 [公司] 产生的影响。</p></blockquote><p>​提供的摘要是您进行初步研究的有用起点。您想更深入地研究特定主题，因此您通过键入以下内容继续对话</p><blockquote><p>推荐三个领域让[我的组织]可以采取积极措施，以保持在[特定领域]的领先优势。</p></blockquote><h3 id="4-3-4-首席信息官"><a href="#4-3-4-首席信息官" class="headerlink" title="4.3.4 首席信息官"></a>4.3.4 首席信息官</h3><h4 id="用例：建立技术沟通"><a href="#用例：建立技术沟通" class="headerlink" title="用例：建立技术沟通"></a>用例：建立技术沟通</h4><p>​您的团队刚刚提供了一份关于您的安全状况和关键漏洞的冗长技术报告。您需要立即与 CEO 讨论这个问题，但您知道目前一份多页的报告太多了，难以消化。您打开包含完整报告的 Google Doc，然后选择“帮助我撰写”以提示 Docs 中的 Gemini。您输入：</p><blockquote><p>总结本报告对[受众]的主要发现和影响。重点介绍已发现的主要[弱点]以及解决这些弱点的建议措施。使用正式语气。</p></blockquote><p>​摘要很有用，为您的 CEO 提供了适当的详细程度。您做了一些小修改，并将其作为执行摘要放在报告的顶部。现在，您需要向 CEO 发送电子邮件以安排会议进行讨论。<br>您打开 Gmail 并通过选择“帮助我撰写”提示 Gmail 中的 Gemini。您输入：</p><blockquote><p>帮我写一封电子邮件给我的首席执行官，要求下周举行 30 分钟的会议，讨论我们即将进行的 [IT 变革]。包括对可扩展性、安全性和数据管理的考虑。</p></blockquote><p><strong>用例：跟踪 IT 资产</strong><br>    您的公司需要一种快速的方法来跟踪新员工的软件访问情况。您需要一个电子表格，因此您打开 Google 表格并选择“帮我整理”。然后输入：</p><blockquote><p>为员工创建软件许可证跟踪器，并包括许可证类型、使用权和续订日期等列。</p></blockquote><h3 id="4-3-5-首席人力资源官"><a href="#4-3-5-首席人力资源官" class="headerlink" title="4.3.5 首席人力资源官"></a>4.3.5 首席人力资源官</h3><h4 id="用例：表达对员工的赞赏"><a href="#用例：表达对员工的赞赏" class="headerlink" title="用例：表达对员工的赞赏"></a><strong>用例：表达对员工的赞赏</strong></h4><p>​您想建立一个新计划，帮助组织中的每个人都感到被包容、被欣赏和被认可。但是对于这么大的公司，您需要深思熟虑。您想集思广益，因此您打开了一个新的 Google 文档并提示 Docs 中的 Gemini。您输入</p><blockquote><p>根据 [类型] 的公司文化和员工的多样化兴趣（如烹饪、园艺、运动、阅读和旅行），集思广益，提出 10 个员工赞赏想法。</p></blockquote><p>​Docs 中的 Gemini 激发了您的创造力，现在您有了员工兴趣俱乐部和活动的想法。您还希望确保您的领导团队定期鼓励管理人员认可团队中的人才，因此您创建了他们可以用作灵感的电子邮件模板。您通过选择“帮助我写作”来提示 Docs 中的 Gemini，然后输入：</p><blockquote><p>起草一份电子邮件模板，感谢 [员工] 的辛勤工作和 [近期成就]。为他们的奉献精神提供额外奖励，例如咖啡礼品卡。使用乐观而专业的语气。</p></blockquote><h4 id="用例：评估员工满意度"><a href="#用例：评估员工满意度" class="headerlink" title="用例：评估员工满意度"></a><strong>用例：评估员工满意度</strong></h4><p>​您担心您的团队最近不堪重负。在与直接下属通话之前，您想起草一份匿名调查问卷，让人们能够公开、诚实地评估自己的感受。要起草问题，请打开一份新的 Google 文档，然后选择“帮助我写作”以提示 Docs 中的 Gemini。您输入：</p><blockquote><p>起草一份匿名员工满意度调查问卷，问卷中的问题和答案应涉及工作量、工作与生活平衡、薪酬和职业发展机会等关键领域。确保问题清晰、简洁，避免引导性答案。</p></blockquote><p>​您收到了 15 位高层领导的反馈，并将所有匿名结果收集到 Google 文档中。您想要创建一份可以在下次通话中使用的摘要。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>总结员工反馈的结果以确定关键主题。</p></blockquote><h3 id="4-3-6-创始人或企业家"><a href="#4-3-6-创始人或企业家" class="headerlink" title="4.3.6 创始人或企业家"></a>4.3.6 创始人或企业家</h3><h4 id="用例：进行竞争分析-1"><a href="#用例：进行竞争分析-1" class="headerlink" title="用例：进行竞争分析"></a><strong>用例：进行竞争分析</strong></h4><p>​您是一家初创公司的创始人，您的在线业务正在获得发展。您一直梦想着开设一家<br>实体店，现在可能是最佳时机。您需要一位思想伙伴来帮助您更好地了解当前形势。您打开 gemini.google.com，然后输入：</p><blockquote><p>我是一家初创公司的创始人。我正在考虑开设一家实体店。对[重点领域]的竞争格局进行分析。提供[主要竞争对手]在此领域的优势和劣势，包括他们的具体战略、策略和结果。确定[我的公司]如何改进其方法并获得竞争优势的18条可操作的见解和建议。</p></blockquote><p>​您从与 gemini.google.com 上的 Gemini 的讨论中收集到了有用的信息。您想更深入地围绕两个竞争对手进行头脑风暴。您输入：</p><blockquote><p>在当前市场格局下对 [公司] 与 [竞争对手] 进行竞争分析。</p></blockquote><h4 id="用例：进行筹款和投资者关系"><a href="#用例：进行筹款和投资者关系" class="headerlink" title="用例：进行筹款和投资者关系"></a><strong>用例：进行筹款和投资者关系</strong></h4><p>​您已准备好联系潜在投资者，让您的实体店成为现实。您需要帮助开始给投资者写电子邮件，因此在包含所有笔记和研究的同一个 Google 文档中，您通过选择“帮助我写作”来提示 Docs 中的 Gemini。您输入：</p><blockquote><p>为潜在投资者起草一份个性化的电子邮件模板，重点介绍[公司]独特的价值主张和[计划]的最新进展。请求安排会面时间，讨论下个月的合作机会。</p></blockquote><p>​电子邮件模板为您提供了一个起点。在将电子邮件发送给潜在投资者之前，您可以修改草稿并继续添加一些个人风格。一个月后与他们成功会面后，您想要起草一封感谢信。您打开 Google Doc，其中包含会议记录和笔记。您提示 Docs 中的 Gemini 帮助您撰写电子邮件草稿。您输入：</p><blockquote><p>起草一封电子邮件，感谢潜在投资者的来电，并要求安排时间安排后续会议以解决 [问题和疑虑]。</p></blockquote><p><strong>用例：管理休假政策和跟踪</strong><br>    您有一本冗长的手册，详细说明了公司的所有政策和程序。您想让新员工轻松理解休假申请政策。您打开包含手册的 Google 文档。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>生成一份分步检查表，总结公司的休假申请政策。确保以通俗易懂的语言编写，便于员工理解。</p></blockquote><p>​由于许多员工都是轮班制，因此您需要一种快速的方法来跟踪每周的人员配备情况。您打开 Google 表格并点击“帮我整理”。您输入：</p><blockquote><p>创建一个跟踪每周人员配备情况的表格。创建日期、姓名、班次（上午或下午）和备注的列。</p></blockquote><h1 id="五、人力资源"><a href="#五、人力资源" class="headerlink" title="五、人力资源"></a>五、人力资源</h1><p>​作为人力资源专业人士，您是组织的骨干，需要处理大量机密和敏感信息。您塑造公司文化、寻找和培养人才，并确保员工获得积极的体验。这绝非易事。本部分为您提供了将提示整合到日常任务中的简单方法。<br>​学习编写有效的提示将有助于提高您的工作效率并简化您的日常任务，让您有更多时间专注于最紧迫的任务。使用 Gemini for Google Workspace 启动招聘、入职、培养归属感文化等。有关 CHRO 用例，请访问本指南的高管和企业家部分。</p><h2 id="5-1-入门"><a href="#5-1-入门" class="headerlink" title="5.1 入门"></a>5.1 入门</h2><p>​首先，请阅读第 2 页上的一般提示写作技巧和本指南开头的提示 101 部分。<br>​下面的每个提示都附带一个场景，以启发您如何与 Gemini for Workspace 进行协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。我们还提供了不同人力资源角色如何使用 Gemini for Workspace 的示例。您可以调整每个提示以完成常见任务并优化生成的输出。</p><h2 id="5-2-提示迭代示例"><a href="#5-2-提示迭代示例" class="headerlink" title="5.2 提示迭代示例"></a>5.2 提示迭代示例</h2><p>​您是一名人力资源经理，正在为员工会议编写演示文稿。您有一个 Google 文档，里面全是笔记、要点和您想要讨论的主题。您首先打开带有笔记的 Google 文档，然后使用以下提示在 Docs 中使用 Gemini。</p><p><font style="background: #D2E2FB">我是一名人力资源经理，</font><font style="background: #FDEEC3">我正在为新员工准备一份演讲稿。</font><font style="background: #F9D2CF">我需要为入职演讲稿撰写一份演讲稿，介绍我们公司对员工发展和福利的承诺。</font><font style="background: #CEEAD5">请帮我起草一些谈话要点，展示为什么员工指导和发展是我们公司的核心价值。</font></p><p><font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113152832119.png" alt="image-20241113152832119"></p><p>​您喜欢 Gemini in Docs 创建的内容，因此选择“插入”。现在，您想添加更多有针对性的谈话要点。在 Google Doc 中，您突出显示与培训和认证计划以及指导机会相关的注释。您输入：<br>​<font style="background: #FDEEC3">在演示文稿的新部分</font><font style="background: #F9D2CF">添加四个谈话要点，</font><font style="background: #FDEEC3">解释我们如何支持员工的发展。</font><font style="background: #F9D2CF">提及我们的培训和认证计划以及指导机会。</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113153046227.png" alt="image-20241113153046227"></p><p>​您选择“插入”。现在，您需要一些关于如何构思脚本结尾的想法。您在 Google Doc 中突出显示了关于预期团队行为的注释，并在 Docs 中提示 Gemini 以下内容：<br>​<font style="background: #F9D2CF">写一份有力的结束语，</font><font style="background: #FDEEC3">说明我们的期望，即每个人都要为营造一个尊重和热情的工作场所做出贡献。</font><font style="background: #CEEAD5">使用专业的语气。</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113153543458.png" alt="image-20241113153543458"></p><p>​生成的内容让您在编写脚本方面有了先机。您只需添加一些详细信息，然后就可以创建与您的谈话要点一起提供的 Google 幻灯片草稿。</p><h2 id="5-3-提示指南"><a href="#5-3-提示指南" class="headerlink" title="5.3 提示指南"></a>5.3 提示指南</h2><h3 id="5-3-1-招聘人员"><a href="#5-3-1-招聘人员" class="headerlink" title="5.3.1 招聘人员"></a>5.3.1 招聘人员</h3><h4 id="用例：管理招聘流程"><a href="#用例：管理招聘流程" class="headerlink" title="用例：管理招聘流程"></a><strong>用例：管理招聘流程</strong></h4><p>​业务正在增长，您正在进行大规模的招聘工作。首先，您想使用 Gemini 进行头脑风暴，看看公司如何更好地管理招聘流程。您打开团队的“招聘策略”Google Doc，其中包含有关招聘策略和渠道的注释，以及用于从 LinkedIn 和其他来源向候选人进行冷门推广的电子邮件和消息模板。您首先使用 Docs 中的 Gemini 选择“帮助我写作”，输入以下提示。您输入：</p><blockquote><p>创建一份我们的招聘人员可以使用的策略列表，以改进我们现有的招聘流程并确定<br>潜在的求职者。</p></blockquote><p>​在成功为领导层创建了一份关于团队如何改进现有招聘流程的简短建议后，团队收到了有关紧急职位空缺的指导，职位空缺为一名内容营销经理，该经理具有 B2B 和 B2C 内容创作经验，至少有五年经验，并有一系列写作范例。您打开一份新的 Google 文档，并在 Docs 中向 Gemini 提示以下内容：</p><blockquote><p>我正在为营销团队开设一个新职位。为内容营销经理写一份引人注目的职位描述。突出显示关键职责 [插入] 和要求，包括 B2B 和 B2C 内容创作、至少五年经验以及一系列写作范例。</p></blockquote><p>​Docs 中的 Gemini 会生成一份职位描述。在查看并稍作调整后，您可以突出显示文本<br>并提示：</p><blockquote><p>建议更新 [职位描述] 的方法，并提供建议以使其对[受众] 更具吸引力。</p></blockquote><h4 id="用例：管理面试流程"><a href="#用例：管理面试流程" class="headerlink" title="用例：管理面试流程"></a><strong>用例：管理面试流程</strong></h4><p>​现在，您想要准备电话面试的问题。职位描述已获批准并在线发布。您决定通过访问 gemini.google.com 进行准备。您输入：</p><blockquote><p>我是一名招聘人员，正在为候选人面试做准备。为 [open role URL] 写一份 20 个开放式面试问题清单，我可以使用它们来筛选候选人。</p></blockquote><p>​面试结束后，您会得到一份 Google 文档，其中包含与每位候选人的对话记录。使用此 Google 文档，您会在 Docs 中提示 Gemini。您输入：</p><blockquote><p>总结面试记录并生成 [职位] 的最佳候选人名单。</p></blockquote><p>​在同一个 Google 文档中，您现在想为招聘经理总结您对每位候选人的发现。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>生成一封电子邮件发送给招聘经理，其中包含 [候选人] 的摘要。</p></blockquote><h4 id="用例：候选人沟通"><a href="#用例：候选人沟通" class="headerlink" title="用例：候选人沟通"></a><strong>用例：候选人沟通</strong></h4><p>​团队已做出招聘决定。您打开 Google 文档，其中包含每个候选人的注释。您通过选择“帮助我写作”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>我正在给刚完成面试流程的求职者写一封电子邮件。为 [选定的候选人] 创建一个模板，用于 [职位] 的录用通知，并请求安排电话讨论福利、薪酬和开始日期。</p></blockquote><p>​现在，您想生成个性化、富有同理心的电子邮件副本，发送给不会收到录用通知的求职者。您通过选择“帮我写”来提示 Docs 中的 Gemini。您输入：</p><blockquote><p>我正在给完成面试流程但未被选中的求职者写一封电子邮件。帮我为 [候选人] 写一封拒绝信，拒绝 [职位]。使用富有同理心的语气。</p></blockquote><h3 id="5-3-2-人力资源经理"><a href="#5-3-2-人力资源经理" class="headerlink" title="5.3.2 人力资源经理"></a>5.3.2 人力资源经理</h3><h4 id="用例：入职员工"><a href="#用例：入职员工" class="headerlink" title="用例：入职员工"></a><strong>用例：入职员工</strong></h4><p>​您是人力资源经理。招聘人员刚刚填补了公司两个空缺职位。现在，您负责确保候选人拥有顺畅的入职体验。您需要帮助为新员工构建信息，因此您打开 Google 表格，并通过选择“帮助我组织”提示 Gemini。您输入：</p><blockquote><p>创建一个表格，概述新员工第一周的日程安排，包括关键会议、培训课程和介绍。为每项活动提供一列关键联系人和优先级（低、中、高）。</p></blockquote><p>​Gemini in Sheets 返回一个格式化的 Google Sheet，您现在可以在其中填写关键联系人、会议和活动。条件格式使您可以轻松地使用颜色编码的视觉提示按优先级对任务进行排序。接下来，您需要为团队创造凝聚力的方法。您打开一个新的 Google 文档，并通过选择“帮助我写作”来提示 Gemini in Docs。您输入：</p><blockquote><p>设计一个团队凝聚力活动，例如办公室寻宝游戏，让团队成员在团队会议期间一起工作。</p></blockquote><p>​Docs 中的 Gemini 提供一些建议，让您集思广益，了解寻宝游戏。您调整输出并得到团队负责人的批准。现在，您需要与新员工沟通，向他们提供有关他们第一天与团队见面的信息。您打开 Gmail，选择“帮我写”，提示 Gmail 中的 Gemini。您输入：</p><blockquote><p>起草一封电子邮件给 [团队] 中的新员工，让他们与团队的其他成员见面，并解释会议的团队建设目的。</p></blockquote><h4 id="用例：传达关键发现并起草后续调查"><a href="#用例：传达关键发现并起草后续调查" class="headerlink" title="用例：传达关键发现并起草后续调查"></a><strong>用例：传达关键发现并起草后续调查</strong></h4><p>​现在您已经完成了新员工入职培训，您需要专注于确保领导层能够轻松理解最新的公司研究数据。您致力于为所有员工创造一个温馨的环境，让他们能够发展自己的技能。您打开包含最终报告的 Google 文档。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>起草一封电子邮件给高层领导，总结我们[报告]的主要发现。包括一个简短的介绍段落，其中列出最重要的发现的要点。</p></blockquote><p>​Docs 中的 Gemini 返回带有要点的摘要。您对其进行编辑，然后使用它向领导团队发送电子邮件。作为后续行动，您想了解公司政策的变更如何影响员工体验。您打开 Docs 中的 Gemini 开始起草调查。您选择“帮助我撰写”并输入：</p><blockquote><p>起草一份带有问题和答案选项的匿名员工调查，以监控公司在 [主题] 上的进展。</p></blockquote><h1 id="六、市场营销"><a href="#六、市场营销" class="headerlink" title="六、市场营销"></a>六、市场营销</h1><p>​作为营销专业人士，您是引人入胜的广告活动、品牌体验、潜在客户生成等背后的创造力。您了解数据驱动的洞察、引人注目的消息传递以及与受众建立更深层次联系的力量。<br>​本部分为您提供了将提示整合到日常任务中的简单方法。学习编写有效的提示将有助于提高您的工作效率并简化您的日常任务，让您有时间专注于更具战略性的工作。了解如何以一种有助于释放新水平的创造力、自动化洞察和制作引起共鸣的广告活动的方式编写提示——所有这些都使用 Gemini for Google Workspace。有关 CMO 使用案例，请访问指南的高管和企业家部分。</p><h2 id="6-1-入门"><a href="#6-1-入门" class="headerlink" title="6.1  入门"></a>6.1  入门</h2><p>​首先，请阅读第 2 页的一般提示写作技巧和本指南开头的提示 101 部分。</p><p>​下面的每个提示都附带一个场景，以启发您如何与 Gemini for Workspace 协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。我们还提供了不同营销角色如何使用 Gemini for Workspace 的示例。您可以调整每个提示以完成常见任务并优化生成的输出。</p><h2 id="6-2-提示迭代示例"><a href="#6-2-提示迭代示例" class="headerlink" title="6.2 提示迭代示例"></a>6.2 提示迭代示例</h2><p>​您拥有自己的咨询公司，经常被聘为客户的品牌经理。您为各行各业的企业提供帮助。您的客户正准备开办一家咖啡店和电子游戏咖啡馆，您需要通过开发视觉形象来启动创意过程。您想构思并向团队其他成员提供早期想法。您决定在 gemini.google.com 上与 Gemini 聊天。您输入：</p><p>​<font style="background: #F9D2CF">为我的新业务</font><font style="background: #FDEEC3">（一家兼具咖啡店和视频游戏咖啡馆的咖啡店）</font><font style="background: #F9D2CF">构思一个有创意且引人注目的徽标。</font><font style="background: #FDEEC3">考虑以下因素来设计徽标：</font><br>​<font style="background: #FDEEC3">双重概念：徽标需要清晰地表明咖啡和游戏业务的两方面，但不能太过杂乱。</font><br>​<font style="background: #FDEEC3">目标受众：吸引广泛的游戏玩家（休闲玩家和发烧友）以及寻求独特聚会场所的咖啡爱好者。</font><br>​<font style="background: #CEEAD5">风格选择：我愿意接受这些方法 — 让我们从这三种风格中各取几个例子来比较：现代和俏皮：大胆的色彩、有趣的图形，也许是像素艺术美学。复古酷炫：想想经典的街机风格 — 粗体字体、霓虹色灵感。时尚简约：干净的线条、几何形状，更微妙地向这两个主题致敬。</font></p><p><font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113155307919.png" alt="image-20241113155307919"></p><p>​您喜欢复古酷炫的选项。您继续对话并输入：</p><p>​<font style="background: #FDEEC3">我喜欢复古酷炫的款式。</font><font style="background: #F9D2CF">您能再提供三款</font><font style="background: #CEEAD5">相同风格的款式吗？</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113155431174.png" alt="image-20241113155431174"></p><p>​现在你已经知道了徽标的外观，接下来你需要集思广益想出名字。你输入：</p><p>​<font style="background: #FDEEC3">为企业</font><font style="background: #F9D2CF">写一个标语和 10 个可能的名称</font><font style="background: #FDEEC3">以与这些标识相匹配。</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113155553223.png" alt="image-20241113155553223"></p><h2 id="6-3-提示指南"><a href="#6-3-提示指南" class="headerlink" title="6.3 提示指南"></a>6.3 提示指南</h2><h3 id="6-3-1-品牌经理"><a href="#6-3-1-品牌经理" class="headerlink" title="6.3.1 品牌经理"></a>6.3.1 品牌经理</h3><h4 id="用例：进行市场调研并确定趋势"><a href="#用例：进行市场调研并确定趋势" class="headerlink" title="用例：进行市场调研并确定趋势"></a><strong>用例：进行市场调研并确定趋势</strong></h4><p>​您所在行业的格局正在迅速变化，您需要进行市场调研以更好地确定和了解新兴趋势。您访问 gemini.google.com，然后输入：</p><blockquote><p>我需要对 [行业] 行业进行市场调研以确定新趋势。使用 [URL] 发现新兴趋势和不断变化的消费者偏好。（gemini.google.com）</p></blockquote><p>​完成研究后，您和您的团队已更新您的品牌活动，以包含您想要进行 A&#x2F;B 测试的新消息。您决定生成广告文案的多个变体。您前往 gemini.google.com 并输入：</p><blockquote><p>我需要对新消息进行 A&#x2F;B 测试。这是我们的消息：[messaging]。生成三种不同的广告文案变体。</p></blockquote><h4 id="用例：创建和管理内容和分发"><a href="#用例：创建和管理内容和分发" class="headerlink" title="用例：创建和管理内容和分发"></a><strong>用例：创建和管理内容和分发</strong></h4><p>​另一位客户正在进行一些激动人心的领导层变动。您需要创建内容来塑造公司进入下一个时代的品牌叙事。您打开 Google 文档开始撰写博客草稿。您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>创建博客草稿，宣布 [姓名] 将以 [职位] 身份加入 [公司]。[分享他们简历中的两三个细节，例如他们之前的职位和公司、他们在专业组织中的参与情况等。]</p></blockquote><p>​您还想找到一种有效跟踪内容放大方式和位置的方法，因此您打开了 Google 表格。您在表格中选择“帮助我整理”来提示 Gemini。您输入：</p><blockquote><p>为内容放大创建项目跟踪器，并包括渠道、所有者、URL 和优先级（低、中、高）的列。</p></blockquote><h3 id="6-3-2-数字营销经理"><a href="#6-3-2-数字营销经理" class="headerlink" title="6.3.2 数字营销经理"></a>6.3.2 数字营销经理</h3><h4 id="用例：起草客户获取通讯"><a href="#用例：起草客户获取通讯" class="headerlink" title="用例：起草客户获取通讯"></a><strong>用例：起草客户获取通讯</strong></h4><p>​电子邮件是贵公司与潜在客户和客户直接沟通的主要渠道之一。您需要帮助开始撰写新的电子邮件活动文案。您打开一个新的 Google 文档，然后通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>撰写三个不同的电子邮件主题行，其中引用 [受众群体] 和我们的 [产品]。让它们引人注目但又专业。</p></blockquote><p>​现在，您想与文案团队分享建议的电子邮件主题行。您打开 Gmail，然后选择“帮我写”。您输入：</p><blockquote><p>帮我写一封电子邮件，向文案团队提出 [建议的电子邮件主题行]。保持电子邮件简短明了，并在周末之前请求反馈。感谢他们的帮助。</p></blockquote><h4 id="用例：生成入站营销活动"><a href="#用例：生成入站营销活动" class="headerlink" title="用例：生成入站营销活动"></a><strong>用例：生成入站营销活动</strong></h4><p>​团队刚刚使用我们的新解决方案创建了一本有关高管最佳实践的新电子书。您正在创建一个登陆页面来容纳门控资产，并且需要引人入胜的副本。您打开一个新的 Google 文档并选择帮我写。您输入：</p><blockquote><p>为宣传新[电子书&#x2F;网络研讨会&#x2F;免费试用和详细信息]的登陆页面创建引人注目的副本，该页面专为高管目标受众设计。突出主要优势并通过有说服力的行动号召来鼓励转化。</p></blockquote><p>​网页已启动，您现在正在开展入站营销活动。您需要培养下载了最新电子书的潜在客户。您打开一个新的 Google 文档，然后通过选择帮助我写作来提示 Docs 中的 Gemini。您输入：</p><blockquote><p>生成一系列五封自动电子邮件的副本，以在潜在客户下载有关 [主题] 的电子书后培养他们。使用 [名称] 个性化电子邮件并鼓励进一步参与 [与其他有价值的资源或优惠]。</p></blockquote><h3 id="6-3-3-内容营销经理"><a href="#6-3-3-内容营销经理" class="headerlink" title="6.3.3 内容营销经理"></a>6.3.3 内容营销经理</h3><h4 id="用例：为您的博客产生灵感"><a href="#用例：为您的博客产生灵感" class="headerlink" title="用例：为您的博客产生灵感"></a><strong>用例：为您的博客产生灵感</strong></h4><p>​您在一家旅游公司工作，担任该公司博客频道的内容营销经理。您需要启动新博客文章的头脑风暴过程。您决定通过与 gemini.google.com 上的 Gemini 合作来收集想法。您输入：</p><blockquote><p>我需要博文主题，这些主题对热爱旅行和旅游业的人来说很有趣。以下是我希望您关注的重点：让主题独一无二。现在有很多旅游博客——让我们想出一些引人注目的新角度。保持主题的相关性。在集思广益时，利用旅游业的当前趋势或最近的挑战&#x2F;创新。我希望每个主题都包括：</p><p>目标受众：这个主题特别吸引谁？</p><p>内容大纲：博客文章将讨论的主要思想的几个要点。</p><p>号召行动：建议一种在文章结尾吸引读者的方法。</p></blockquote><p>​您喜欢您能够创造的最初想法。您还需要专注于生成创意图像以配合博客中的副本。您打开一个新的 Google Slide，并通过选择使用 Gemini 创建图像来提示 Gemini。您输入：</p><blockquote><p>创建一张飞机在日出时飞过山脉和河流的云层之上的图像，我可以将其用于营销活动来推广我的旅游公司</p></blockquote><h4 id="用例：创建社交媒体帖子"><a href="#用例：创建社交媒体帖子" class="headerlink" title="用例：创建社交媒体帖子"></a><strong>用例：创建社交媒体帖子</strong></h4><p>​您专注于创建针对社交媒体渠道优化的内容。您需要收集针对不同受众的不同内容的想法。您打开一个新的 Google 文档，并通过选择“帮助我撰写”来提示 Docs 中的 Gemini。您输入：</p><blockquote><p>撰写三篇关于 [产品&#x2F;服务&#x2F;主题] 的引人入胜的社交媒体帖子，以吸引 [目标受众]。将每篇社交媒体帖子控制在两句话以内，并包含访问 [我们的网站] 的号召性用语。</p></blockquote><p>​您还需要制作社交媒体帖子，以推动针对应届毕业生的即将举行的活动的注册。您打开一个新的 Google 文档，并通过选择“帮助我撰写”来提示 Docs 中的 Gemini。您输入：</p><blockquote><p>创建社交媒体帖子，宣传我们即将举行的 [活动名称]。包括吸引注意力的语言和与 [受众] 相关的主题标签。</p></blockquote><h4 id="用例：制定战略营销计划"><a href="#用例：制定战略营销计划" class="headerlink" title="用例：制定战略营销计划"></a><strong>用例：制定战略营销计划</strong></h4><p>​您的公司正在推出一款新应用。您需要一个强大的营销计划，但您需要一些想法来开始。您通过访问 gemini.google.com 与 Gemini 聊天。您输入：</p><blockquote><p>我正在为提供 [功能] 的新应用制定营销计划。我的目标受众是[受众]。请帮我制定一个以 [营销渠道] 为重点的计划。以下是我希望您涵盖的内容：竞争对手分析、理想的营销渠道组合及其理由、预算建议、关键信息传递想法以及带有 KPI 的拟议活动时间表。</p></blockquote><p>​聊天中的回复有助于制定营销计划。在确定所有细节的同时，您需要将高级细节提供给您的 CMO。您打开 Gmail，选择“帮我写”，在 Gmail 中提示 Gemini。您输入：</p><blockquote><p>给 CMO 写一封电子邮件，告诉他们我将在 [日期] 之前提供一份一页纸的战略营销计划，用于新应用发布项目，其中包括执行摘要、竞争格局概述、顶级营销渠道和所有南美市场的目标人群。</p></blockquote><h1 id="七、项目管理"><a href="#七、项目管理" class="headerlink" title="七、项目管理"></a>七、项目管理</h1><h2 id="7-1-入门"><a href="#7-1-入门" class="headerlink" title="7.1  入门"></a>7.1  入门</h2><p>​作为复杂且不断发展的项目的指挥者，您的任务是把握时间表、协调团队并确保您的项目产生预期的影响。</p><p>​本部分将向您介绍 Gemini for Google Workspace 的强大功能，帮助您学习提示的基础知识并优化项目管理工作流程。准备好实现效率、洞察力和主动解决问题的能力，这将有助于使用 Gemini for Workspace 提升您的项目成果。</p><h2 id="7-2-提示迭代示例"><a href="#7-2-提示迭代示例" class="headerlink" title="7.2 提示迭代示例"></a>7.2 提示迭代示例</h2><p>​首先，请阅读第 2 页的一般提示写作技巧和本指南开头的提示 101 部分。</p><p>​下面的每个提示都附带一个场景，以启发您如何与 Gemini for Workspace 协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。您可以继续编写提示以在最初生成的响应的基础上进行构建，并且可以调整每个提示以完成常见任务并优化生成的输出。</p><p>​您的团队刚刚完成了新网站的注册表单，现在您需要生成一些用户验收测试 (UAT)。要开始草稿，请访问 gemini.google.com 并输入：<br>​ <font style="background: #FDEEC3">为最新网站注册表单</font><font style="background: #F9D2CF">创建一个包含 10 个用户验收测试 (UAT) 的表格。</font></p><p>​<font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113162759322.png" alt="image-20241113162759322"></p><p>​您认为这些结果是一个有用的起点，因此您将结果导出到 Google Sheet，然后起草一封电子邮件给负责运行 UAT 的同事。您想解释他们需要做什么。您继续在 gemini.google.com 上与 Gemini 进行对话。您输入：</p><p>​<font style="background: #F9D2CF">起草一封电子邮件</font><font style="background: #FDEEC3">给负责运行此 UAT 的 [我的同事]，并解释他们下一步需要做什么。</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113162901255.png" alt="image-20241113162901255"></p><p>​起草的电子邮件提供了一个有用的起点，因此您可以将结果导出到 Gmail，并在将邮件发送给同事之前直接进行编辑。</p><h2 id="7-3-提示指南"><a href="#7-3-提示指南" class="headerlink" title="7.3 提示指南"></a>7.3 提示指南</h2><h3 id="7-3-1-项目经理"><a href="#7-3-1-项目经理" class="headerlink" title="7.3.1 项目经理"></a>7.3.1 项目经理</h3><h4 id="用例：报告项目状态"><a href="#用例：报告项目状态" class="headerlink" title="用例：报告项目状态"></a><strong>用例：报告项目状态</strong></h4><p>​您刚刚与所有项目利益相关者进行了长时间的通话，现在您想总结讨论的内容并跟进分配的行动项目。在包含会议记录的 Google 文档中，您通过选择“帮助我撰写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>用一个简短的段落总结此通话记录。在项目符号中，根据 [通话记录] 突出显示行动项目、做出的决定和每个项目的所有者。</p></blockquote><p>​您需要根据上次通话中的活动向经理汇报情况。您希望模板化项目状态更新的交付方式。您打开一个新的 Google 文档，然后通过选择“帮我写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>草拟要发送给我经理的项目状态更新电子邮件模板。包括本周主要成就、面临的任何挑战以及下周的三大优先事项的摘要部分。</p></blockquote><p>​团队提前整整一周完成了关键里程碑。这是一个具有挑战性的项目，所以你想召集所有人一起庆祝。你打开 Gmail，选择“帮我写”，在 Gmail 中提示 Gemini。你输入：</p><blockquote><p>写一份团队午餐邀请函，庆祝项目进展，并注明 [日期、时间和地点]。感谢他们的辛勤工作，并承认这是一个具有挑战性的项目。</p></blockquote><h4 id="用例：创建项目回顾"><a href="#用例：创建项目回顾" class="headerlink" title="用例：创建项目回顾"></a><strong>用例：创建项目回顾</strong></h4><p>​您刚刚完成项目，您的高级领导团队需要进行项目回顾。要启动从整个团队收集反馈的过程，请打开 Google 文档，然后选择“帮助我撰写”，提示 Docs 中的 Gemini。您输入：</p><blockquote><p>我需要撰写一份报告，详细说明 [项目] 的成功、失败和经验教训。起草一份包含 20 个问题的清单，以指导跨团队流程调查。包括一些问题，以发现哪些方法有效、哪些方法无效、特定流程故障、技术问题、沟通差距或任何其他可能导致项目问题或成功的因素。</p></blockquote><p>​Gemini in Docs 提供的问题为您提供了一个很好的起点。您可以在与团队共享 Google Doc 以征求他们的意见之前对其进行编辑。在 Google Doc 中收集每个人的反馈后，您需要帮助构建报告。您可以通过选择“帮助我撰写”来提示 Gemini in Docs。您输入：</p><blockquote><p>用两段话总结此文档。包括有关项目目标、主要贡献者、项目成果以及任何关键成功或失败的高级信息。</p></blockquote><h4 id="用例：开发问题跟踪器和相关通信"><a href="#用例：开发问题跟踪器和相关通信" class="headerlink" title="用例：开发问题跟踪器和相关通信"></a><strong>用例：开发问题跟踪器和相关通信</strong></h4><p>​您需要创建一个项目问题跟踪器来跟踪风险并及时解决。您想快速创建一个模板，因此您打开一个新的 Google Sheet 并通过选择“帮助我整理”来提示 Sheets 中的 Gemini。您输入：</p><blockquote><p>创建一个电子表格来跟踪项目问题，包括描述、状态、分配的所有者和解决问题的行动项目。</p></blockquote><p>​在项目全面启动之前，您需要拥有标准化的沟通模板。例如，您需要一封可以在出现问题时使用的电子邮件。您打开一个新的 Google 文档，并通过选择“帮我写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>草拟一份电子邮件模板，用于在出现问题时进行通知，并包括原因、解决方案和解决问题的时间表。</p></blockquote><p>​您喜欢 Gemini in Docs 创建的模板，并且想要创建一个额外的、略有不同的电子邮件模板。在同一个 Google 文档中，您通过选择“帮助我撰写”来提示 Gemini in Docs。您输入：</p><blockquote><p>起草一份电子邮件模板给利益相关者，以升级关键项目问题，概述影响和建议的解决方案。 </p></blockquote><h1 id="八、销售"><a href="#八、销售" class="headerlink" title="八、销售"></a>八、销售</h1><p>​彻底了解客户是您走向成功的钥匙。您负责维护关键关系、解读购买信号、制定定制解决方案、进行数据驱动的呼叫等。</p><p>​Gemini for Google Workspace 可以帮助您重新定义生产力并培养有意义的客户关系。本节提供专为您和您的团队设计的实用提示和真实用例。学习编写有效的提示将有助于提高您的生产力并简化您的日常任务，让您有更多时间专注于您的客户，通过使用 Gemini for Workspace。</p><h2 id="8-1-入门"><a href="#8-1-入门" class="headerlink" title="8.1  入门"></a>8.1  入门</h2><p>​首先，请阅读第 2 页上的一般提示编写技巧和本指南开头的提示 101 部分。</p><p>​下面的每个提示都附带一个场景，以启发您如何与 Gemini for Workspace 协作。提示迭代示例说明了如何继续编写提示以在最初生成的响应的基础上进行构建。我们还提供了不同销售角色如何使用 Gemini for Workspace 的示例。您可以调整每个提示以完成常见任务并优化生成的输出。</p><h2 id="8-2-提示迭代示例"><a href="#8-2-提示迭代示例" class="headerlink" title="8.2 提示迭代示例"></a>8.2 提示迭代示例</h2><p>​您是一名客户主管，刚刚被指派给一位新客户。您需要一名研究助理。您需要了解客户的关键联系人，以便开始在团队之间建立信任，但首先，您想发送一封介绍性电子邮件，因此您打开 Gmail 并选择“帮我写”，在 Gmail 中提示 Gemini。您输入：</p><p>​<font style="background: #F9D2CF">给 [公司] 的新 [职位] [姓名] 写一封电子邮件。</font><font style="background: #FDEEC3">祝贺他们获得新职位。介绍我是他们在 [公司名称] 的联系人。邀请他们下周共进午餐，看看他们更喜欢周一还是周二。</font></p><p>​<font style="background: #D2E2FB">人物角色</font> <font style="background: #F9D2CF">任务</font> <font style="background: #FDEEC3">语境</font> <font style="background: #CEEAD5">格式</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113163518779.png" alt="image-20241113163518779"></p><p>​这提供了一个有用的起点，但你想尝试获得更好的响应。你点击 <strong>完善&gt;形式化</strong>。</p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113163616893.png" alt="image-20241113163616893"></p><p>​您对电子邮件很满意，因此点击了“插入”。您最后一次阅读了邮件，直接进行了最后的简单编辑，然后发送了邮件。现在，您想了解有关客户的更多信息以及客户如何营销自己。要进行研究，请访问 gemini.google.com 并输入：</p><p>​<font style="background: #D2E2FB">我是一名负责新客户（[客户名称]）的客户经理。</font><font style="background: #FDEEC3">我需要做初步调查。</font><font style="background: #F9D2CF">[客户] 的市场策略是什么？</font></p><p><img src="/2024/11/14/google-prompting-guide-101/image-20241113163731312.png" alt="image-20241113163731312"></p><p>​Gemini 为您提供了有用的信息，帮助您开始研究。您决定先关注新闻公告，进一步研究。您收集了 URL 列表，并将其粘贴到您在 gemini.google.com 上与 Gemini 的对话中。您输入：</p><p>​<font style="background: #FDEEC3">[URL] </font><font style="background: #F9D2CF">总结这些文章。</font><font style="background: #CEEAD5">提供关键见解并说明这些公告为何如此重要。</font></p><p>​现在，您已经清楚地了解了宣布的内容、新闻的重要性以及其他见解。接下来，您想更好地了解将成为主要联系人的高管。您找到了一段有关该高管的录音采访。您将 YouTube 网址粘贴到您与 gemini.google.com 上的 Gemini 的对话中，然后输入：</p><p>​<font style="background: #FDEEC3">[URL] </font><font style="background: #F9D2CF">总结这次采访并告诉我更多关于 [高管姓名] 的信息。</font><font style="background: #CEEAD5">[高管] 关心什么？</font></p><p>​现在您有了一份简洁的面试总结。您可以继续对话，提出更多问题以熟悉您的关键联系人和帐户。您提示：</p><p>​<font style="background: #F9D2CF">告诉我 [公司] 如何帮助 [客户公司] 实现他们的目标。</font></p><p>​结束对话后，您可以将结果导出到 Google 文档中。打开 Google 文档并在 Docs 中提示 Gemini。输入：</p><p>​<font style="background: #FDEEC3">为 [客户] </font><font style="background: #F9D2CF">创建一封电子邮件草稿，</font><font style="background: #FDEEC3">解释为什么 [贵公司] 是他们实现市场目标的完美合作伙伴。</font></p><h2 id="8-3-提示指南"><a href="#8-3-提示指南" class="headerlink" title="8.3 提示指南"></a>8.3 提示指南</h2><h3 id="8-3-1-销售经理"><a href="#8-3-1-销售经理" class="headerlink" title="8.3.1 销售经理"></a>8.3.1 销售经理</h3><h4 id="用例：发展客户关系"><a href="#用例：发展客户关系" class="headerlink" title="用例：发展客户关系"></a><strong>用例：发展客户关系</strong></h4><p>​您的年度会议即将召开，许多最重要的客户都会出席。您想亲自邀请他们参加您举办的欢乐时光活动。您还想邀请一些潜在客户，以便他们与现有客户建立联系。您打开 Gmail，选择“帮我写”以在 Gmail 中提示 Gemini。<br>您输入：</p><blockquote><p>写一封电子邮件，邀请对 [重点领域] 感兴趣的人参加我们于 [日期、时间] 在 [贸易展览活动] 举行的欢乐时光活动。包括我们专注于 [重点领域]。</p></blockquote><p>​现在活动已经结束，您想要跟进参加欢乐时光的客户。您打开 Gmail并选择“帮我写”来提示 Gmail 中的 Gemini。您输入：</p><blockquote><p>起草一封电子邮件，感谢客户在 [日期、时间、地点] 参加欢乐时光。最后邀请他们在接下来的几周内继续对话。使用友好的语气。</p></blockquote><p>​在活动总结活动中，您还想与参加动手演示研讨会的客户进行交流。他们测试了公司的一些新产品，他们的早期反馈对团队来说很重要。您打开一个新的 Google 文档，并通过选择“帮我写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p> 草拟 10 个问题，我可以使用这些问题来调查客户最近使用我们的 [产品&#x2F;服务] 的体验。包括一些问题来衡量 [产品] 有多有用、他们喜欢什么以及他们认为哪些方面可以改进。</p></blockquote><h4 id="用例：支持销售团队"><a href="#用例：支持销售团队" class="headerlink" title="用例：支持销售团队"></a><strong>用例：支持销售团队</strong></h4><p>​不幸的是，公司的服务出现了区域性问题。您需要联系东南地区的所有团队负责人，以立即指导如何主动联系客户。您打开 Gmail，选择“帮我写”以提示 Gmail 中的 Gemini。您输入：</p><blockquote><p>起草一封电子邮件给所有东南地区的销售主管。告知他们 [问题]。建议他们与团队沟通，联系客户，并在未来的订单中提供 20% 的折扣作为道歉。 </p></blockquote><p>​现在，您需要向所有区域团队成员发送电子邮件，因为他们最接近客户反馈。您打开 Gmail，选择“帮我写”，在 Gmail 中提示 Gemini。您输入：</p><blockquote><p>起草一封电子邮件给区域销售代表，内容是下周需要就 [问题] 举行的紧急会议。请他们周一或周二安排时间</p></blockquote><h4 id="用例：指导和培训销售团队"><a href="#用例：指导和培训销售团队" class="headerlink" title="用例：指导和培训销售团队"></a><strong>用例：指导和培训销售团队</strong></h4><p>​您从许多团队成员那里听说他们想要更多的学习机会。您正在组织一个半天的学习计划来支持这一请求。您需要创建一个时间表，因此您打开一个新的 Google 文档，然后通过选择“帮助我写作”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>为销售团队创建一个半天的教育课程议程，介绍我们的最新技术 [产品]。包括产品开发团队的演示时间以及午餐时间。</p></blockquote><p>​作为团队会议的后续活动，您希望重点介绍团队可用的所有不同学习机会。您需要一种方法来组织这些内容，因此您打开 Google 表格，并通过选择“帮助我组织”提示 Gemini。您输入：</p><blockquote><p>创建一个电子表格，跟踪卖家的在线课程。包括课程的主要主题、价格、持续时间和优先级别的列。</p></blockquote><h3 id="8-3-2-客户经理和客户主管"><a href="#8-3-2-客户经理和客户主管" class="headerlink" title="8.3.2 客户经理和客户主管"></a>8.3.2 客户经理和客户主管</h3><h4 id="用例：建立客户关系"><a href="#用例：建立客户关系" class="headerlink" title="用例：建立客户关系"></a><strong>用例：建立客户关系</strong></h4><p>​您刚刚与客户进行了一次愉快的通话，现在您想使用在 Google Docs 中记录的会议笔记来起草一封发送给客户的电子邮件。在包含笔记的 Google Doc 中，选择“帮助我撰写”，提示 Docs 中的 Gemini。您输入：</p><blockquote><p>在初次交谈后，为 [客户] 撰写个性化的后续电子邮件。总结我们讨论的关键点并解决任何未解决的问题。</p></blockquote><p>​该帐户刚刚采用了该公司的一项服务，您需要确保他们在入职过程中感受到支持。您想确保每周检查一次事情的进展情况，但您想探索电子邮件的外观。您打开一个新的 Google 文档，并通过选择“帮助我写作”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>草拟四个电子邮件模板，以便每周检查我的客户，因为他们已经购买了我们的新[服务]。使用一个价值主张（成本、易用性、安全性、可用性和定制）作为每封电子邮件的主要主题，并在每封邮件中包含[号召性用语]。</p></blockquote><h4 id="用例：为新客户来电做准备"><a href="#用例：为新客户来电做准备" class="headerlink" title="用例：为新客户来电做准备"></a><strong>用例：为新客户来电做准备</strong></h4><p>​您即将与潜在客户通话。这对您来说是一个全新的用例，您需要帮助准备通话。您需要初步研究方面的帮助，因此您访问 gemini.google.com，然后输入：</p><blockquote><p>为我起草一份定制脚本，供我在与潜在客户进行销售通话时遵循。通话将通过视频通话进行，并将持续 30 分钟。请确保在脚本中添加以下内容：[插入公司产品&#x2F;解决方案] 如何帮助解决潜在客户的痛点，[公司] 的交付系统如何保证无缝和及时交付，有竞争力的定价和批量折扣表，以及[客户行业] 行业中客户参考的空间。</p></blockquote><p>​现在您已经完成了初步研究，您可以将研究结果导出到新的 Google 文档中。您打开 Google 文档，以便继续工作。现在，您想要创建一个定制的推介。使用包含所有研究笔记的 Google 文档，您可以选择“帮助我撰写”来提示 Gemini in Docs。您输入：</p><blockquote><p>为 [产品名称] 生成电梯推介，并包括主要优势、竞争差异化点以及 [产品名称] 解决的痛点。</p></blockquote><p>​您的电梯推介和简短的谈话要点有一个很好的开端。您想利用这一点进一步预测客户电话的进展情况。您返回 gemini.google.com 继续会议准备。您输入：</p><blockquote><p>我即将与潜在客户通话。[用例] 对我来说是一个新的用例，我需要帮助准备通话。列出 [客户] 在销售电话中可能对我提出的最有可能的反对意见，并提出如何回应这些反对意见的建议。我在 [插入行业] 工作，我正在尝试销售 [产品]。还请提供如何处理异议的想法并建议回应方式。</p></blockquote><h3 id="8-3-3-业务发展经理"><a href="#8-3-3-业务发展经理" class="headerlink" title="8.3.3 业务发展经理"></a>8.3.3 业务发展经理</h3><h4 id="用例：培养关系、个性化推广和思想领导力"><a href="#用例：培养关系、个性化推广和思想领导力" class="headerlink" title="用例：培养关系、个性化推广和思想领导力"></a><strong>用例：培养关系、个性化推广和思想领导力</strong></h4><p>​您希望与在商业影响者社交活动中遇到的潜在客户建立更深层次的关系。您想要起草一个可以为多个联系人自定义的模板。您打开一个新的Google 文档，并通过选择“帮我写”提示 Docs 中的 Gemini。您输入：</p><blockquote><p>起草一份面向行业影响者的推广电子邮件模板。表达我们在 [活动] 上建立联系的感激之情，并提出合作机会，例如 [机会]。</p></blockquote><p>​在成功与潜在客户通话后，您希望跟进创始人可能感兴趣的思想领导力内容。您打开包含博客文章的 Google Doc，然后选择“帮助我撰写”，提示 Docs 中的 Gemini。您输入：</p><blockquote><p>以要点形式总结此博客内容，并提出三个后续问题的想法，以便我可以询问客户他们的想法。</p></blockquote><h4 id="用例：生成个性化的客户入职材料"><a href="#用例：生成个性化的客户入职材料" class="headerlink" title="用例：生成个性化的客户入职材料"></a><strong>用例：生成个性化的客户入职材料</strong></h4><p>​您已经入职了几个新的大客户，现在您想亲自感谢您的客户并查看是否还有其他可以提供的。您打开 Gmail 并选择“帮我写”以提示 Gmail 中的 Gemini。您输入：</p><blockquote><p>在 [客户] 与 [公司] 合作一周年之际，为其生成个性化电子邮件。感谢他们成为客户。询问他们是否有任何问题。包括有关 [其他产品] 的信息。</p></blockquote><p>​您还想向这些客户发送礼物，以祝贺他们建立新的合作伙伴关系。您打开 Google 表格，并通过选择“帮助我整理”提示 Gemini。您输入：</p><blockquote><p>给我一份要送给新客户的礼物清单，这些礼物价格低于 200 美元，可以邮寄到办公室。</p></blockquote><h1 id="结束-提高你的提示写作水平"><a href="#结束-提高你的提示写作水平" class="headerlink" title="结束. 提高你的提示写作水平"></a>结束. 提高你的提示写作水平</h1><p>本指南旨在提供灵感，但 Gemini for Google Workspace 的可能性几乎是无穷无尽的。尝试这些额外的技巧来提高您的即兴写作技能。</p><ul><li><strong>分解。</strong>如果您希望 Gemini for Workspace 执行多个相关任务，请将它们分解为单独的提示。</li><li><strong>给出约束。</strong>要生成特定结果，请在提示中包含详细信息，例如字符数限制或您想要生成的选项数量。</li><li><strong>分配角色。</strong>要鼓励创造力，请分配角色。您可以通过使用以下语言开始提示来做到这一点：“您是一家领先广告公司的创意部门负责人……”</li><li><strong>征求反馈。</strong>在您与 gemini.google.com 上的 Gemini 对话时，告诉它您正在给它一个项目，包括您拥有的所有细节和您所知道的一切，然后描述您想要的输出。通过提出以下问题继续对话：“您有什么问题可以问我，以帮助您提供最佳输出？”</li><li><strong>考虑语气。</strong>定制您的提示以适合您的目标受众和所需的内容语气。要求在输出中使用特定的语气，例如正式、非正式、技术、创意或随意。</li><li><strong>换一种说法。</strong>如果结果不符合您的预期或您认为还有改进空间，请微调您的提示。反复的审查和改进过程通常会产生更好的结果。</li></ul><blockquote><p>生成式人工智能及其所有可能性都令人兴奋，但它仍然是一个新事物。尽管我们的模型每天都在改进，但我们的提示有时会产生不可预测的响应。</p><p>在将 Gemini for Workspace 的输出付诸实践之前，请先对其进行检查，以确保其清晰度、相关性和准确性。当然，最重要的是要记住：生成式人工智能旨在帮助人类，但最终的输出属于您。</p><p>本指南中的示例提示仅用于说明目的。</p></blockquote><p>关注 workspace.google.com 和 workspace.google.com&#x2F;blog 了解最新动态</p><h1 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h1><p>官方原文：<a href="https://inthecloud.withgoogle.com/gemini-for-google-workspace-prompt-guide/dl-cd.html">https://inthecloud.withgoogle.com/gemini-for-google-workspace-prompt-guide/dl-cd.html</a></p><p>国内链接：<a href="https://www.lanzouj.com/iWtBQ28fqtbc">https://www.lanzouj.com/iWtBQ28fqtbc</a></p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      
      <comments>https://log.660066.xyz/2024/11/14/google-prompting-guide-101/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>.git目录的解释【翻译】</title>
      <link>https://log.660066.xyz/2024/09/01/inside-git/</link>
      <guid>https://log.660066.xyz/2024/09/01/inside-git/</guid>
      <pubDate>Sat, 31 Aug 2024 16:22:52 GMT</pubDate>
      
      <description>.git目录的解释【翻译|非原创|文末已备注原文链接】</description>
      
      
      
      <content:encoded><![CDATA[<p>你好！本周我在 Mastodon 上发布了一个关于 <code>.git</code> 目录中内容的漫画，有人要求提供文本版本，所以就在这里。我还添加了一些额外的注释。首先，这是图片。它是对 <code>.git</code> 目录每个部分的约 15 个字的解释。</p><p><img src="/2024/09/01/inside-git/inside-git.png" alt="inside.git"></p><p>如果您想自己运行所有这些示例，可以“git clone <a href="https://github.com/jvns/inside-git%E2%80%9D%E3%80%82">https://github.com/jvns/inside-git”。</a></p><p>以下是目录：</p><ol><li>HEAD：.git&#x2F;head</li><li>分支：.git&#x2F;refs&#x2F;heads&#x2F;main</li><li>提交：.git&#x2F;objects&#x2F;10&#x2F;93da429…</li><li>树：.git&#x2F;objects&#x2F;9f&#x2F;83ee7550…</li><li>blobs：.git&#x2F;objects&#x2F;5a&#x2F;475762c…</li><li>reflog：.git&#x2F;logs&#x2F;refs&#x2F;heads&#x2F;main</li><li>远程跟踪分支：.git&#x2F;refs&#x2F;remotes&#x2F;origin&#x2F;main</li><li>标签：.git&#x2F;refs&#x2F;tags&#x2F;v1.0</li><li>存储：.git&#x2F;refs&#x2F;stash</li><li>.git&#x2F;config</li><li>钩子：.git&#x2F;hooks&#x2F;pre-commit</li><li>暂存区：.git&#x2F;index</li><li>这不是详尽无遗的</li><li>这并不是要完全解释 git</li></ol><p>前5个部分（HEAD、分支、提交、树、bols）是git的核心。</p><h3 id="HEAD-git-head"><a href="#HEAD-git-head" class="headerlink" title="HEAD: .git/head"></a>HEAD: <code>.git/head</code></h3><p><strong><code>HEAD</code><strong>是一个小文件，仅包含当前</strong>分支</strong>的名称。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/HEAD</span><br><span class="line">ref: refs/heads/main</span><br></pre></td></tr></table></figure><p>“HEAD”也可以是提交ID，称为“分离HEAD状态”。</p><h3 id="branch-git-refs-heads-main"><a href="#branch-git-refs-heads-main" class="headerlink" title="branch: .git/refs/heads/main"></a>branch: <code>.git/refs/heads/main</code></h3><p>A <strong>branch</strong> is stored as a tiny file that just contains 1 <strong>commit ID</strong>. It’s stored in a folder called <code>refs/heads</code>.</p><p><strong>分支</strong>存储为一个小文件，仅包含1<strong>提交ID</strong>。它存储在名为“refs&#x2F;heads”的文件夹中。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/main</span><br><span class="line">1093da429f08e0e54cdc2b31526159e745d98ce0</span><br></pre></td></tr></table></figure><h3 id="commit-git-objects-10-93da429"><a href="#commit-git-objects-10-93da429" class="headerlink" title="commit: .git/objects/10/93da429..."></a>commit: <code>.git/objects/10/93da429...</code></h3><p><strong>提交</strong>是一个小文件，包含其父文件、消息、<strong>树</strong>和作者。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 1093da429f08e0e54cdc2b31526159e745d98ce0</span><br><span class="line">tree 9f83ee7550919867e9219a75c23624c92ab5bd83</span><br><span class="line">parent 33a0481b440426f0268c613d036b820bc064cdea</span><br><span class="line">author Julia Evans &lt;julia@example.com&gt; 1706120622 -0500</span><br><span class="line">committer Julia Evans &lt;julia@example.com&gt; 1706120622 -0500</span><br><span class="line"></span><br><span class="line">add hello.py</span><br></pre></td></tr></table></figure><p>这些文件是压缩的，查看对象的最佳方法是使用 <code>git cat-file -p HASH</code>.</p><h3 id="tree-git-objects-9f-83ee7550"><a href="#tree-git-objects-9f-83ee7550" class="headerlink" title="tree: .git/objects/9f/83ee7550..."></a>tree: <code>.git/objects/9f/83ee7550...</code></h3><p><strong>树</strong>是包含目录列表的小文件。其中的文件称为 <strong>blobs</strong>。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$  git cat-file -p 9f83ee7550919867e9219a75c23624c92ab5bd83</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391.gitignore</span><br><span class="line">100644 blob 665c637a360874ce43bf74018768a96d2d4d219ahello.py</span><br><span class="line">040000 tree 24420a1530b1f4ec20ddb14c76df8c78c48f76a6lib</span><br></pre></td></tr></table></figure><p>这里的权限看起来像unix权限，但实际上它们是超级限制的，只允许644和755。</p><h3 id="blobs-git-objects-5a-475762c"><a href="#blobs-git-objects-5a-475762c" class="headerlink" title="blobs: .git/objects/5a/475762c..."></a>blobs: <code>.git/objects/5a/475762c...</code></h3><p><strong>blobs</strong> 是包含实际代码的文件</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 665c637a360874ce43bf74018768a96d2d4d219a</span><br><span class="line">print(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure><p>存储一个包含每一个更改的新blob可能会变得很大, 因此<code>git gc</code> 定期 <a href="https://codewords.recurse.com/issues/three/unpacking-git-packfiles">打包它们</a> 以提高 <code>.git/objects/pack</code>中的效率。</p><h3 id="reflog-git-logs-refs-heads-main"><a href="#reflog-git-logs-refs-heads-main" class="headerlink" title="reflog: .git/logs/refs/heads/main"></a>reflog: <code>.git/logs/refs/heads/main</code></h3><p>reflog存储每个分支、标签和HEAD的历史。 对于（大多数） <code>.git/refs</code>中的每个文件，.git&#x2F;logs&#x2F;refs&#96;中都有相应的日志。</p><p><code>main</code> 分支的示例内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n 1 .git/logs/refs/heads/main</span><br><span class="line">33a0481b440426f0268c613d036b820bc064cdea</span><br><span class="line">1093da429f08e0e54cdc2b31526159e745d98ce0</span><br><span class="line">Julia Evans &lt;julia@example.com&gt;</span><br><span class="line">1706119866 -0500</span><br><span class="line">commit: add hello.py</span><br></pre></td></tr></table></figure><p>reflog的每一行都有：</p><ul><li>提交之前&#x2F;之后ID</li><li>用户</li><li>时间戳</li><li>日志消息</li></ul><p>通常都是一行，为了可读性，我只是在这里将其包装起来。</p><h3 id="remote-tracking-branches-git-refs-remotes-origin-main"><a href="#remote-tracking-branches-git-refs-remotes-origin-main" class="headerlink" title="remote-tracking branches: .git/refs/remotes/origin/main"></a>remote-tracking branches: <code>.git/refs/remotes/origin/main</code></h3><p><strong>远程跟踪分支</strong>存储远程分支最近看到的 <strong>提交ID</strong>。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/remotes/origin/main</span><br><span class="line">fcdeb177797e8ad8ad4c5381b97fc26bc8ddd5a2</span><br></pre></td></tr></table></figure><p>当git status显示“您与‘origin&#x2F;main’保持最新状态”时，它只是在查看这个。它经常过时，您可以使用<code>git fetch origin main</code>更新它。</p><h3 id="tags-git-refs-tags-v1-0"><a href="#tags-git-refs-tags-v1-0" class="headerlink" title="tags: .git/refs/tags/v1.0"></a>tags: <code>.git/refs/tags/v1.0</code></h3><p>标签是 <code>.git/refs/tags</code>中的一个小文件，包含提交ID。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/tags/v1.0</span><br><span class="line">1093da429f08e0e54cdc2b31526159e745d98ce0</span><br></pre></td></tr></table></figure><p>与分支不同，当您进行新的提交时，它不会更新标签。</p><h3 id="the-stash-git-refs-stash"><a href="#the-stash-git-refs-stash" class="headerlink" title="the stash: .git/refs/stash"></a>the stash: <code>.git/refs/stash</code></h3><p>存储是一个名为 <code>.git/refs/stash</code> 的小文件。它包含运行 <code>git stash</code> 时创建的提交的提交 ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat .git/refs/stash</span><br><span class="line">62caf3d918112d54bcfa24f3c78a94c224283a78</span><br></pre></td></tr></table></figure><p>存储是一个堆栈，以前的值存储在 <code>.git/logs/refs/stash</code> 中（ <code>stash</code>的 reflog）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat .git/logs/refs/stash</span><br><span class="line">62caf3d9 e85c950f Julia Evans &lt;julia@example.com&gt; 1706290652 -0500WIP on main: 1093da4 add hello.py</span><br><span class="line">00000000 62caf3d9 Julia Evans &lt;julia@example.com&gt; 1706290668 -0500WIP on main: 1093da4 add hello.py</span><br></pre></td></tr></table></figure><p>与分支和标签不同，如果您从存储中“git stash pop”提交，它将从引用日志中<strong>删除</strong>，因此几乎不可能再次找到它。存储是 git 中唯一一个在添加后很快就会被删除的引用日志。（分支引用日志中的条目也会过期，但通常仅在 90 天后）</p><p><strong>关于 ref 的说明：</strong></p><p>此时，您可能已经注意到，很多东西（分支、远程跟踪分支、标签和存储）都是 <code>.git/refs</code> 中的提交 ID。它们被称为“引用”或“refs”。每个 ref 都是一个提交 ID，但 git 对不同类型的 ref 的处理方式非常不同，因此，我发现分别考虑它们很有用，即使它们都使用相同的文件格式。例如，git 从存储引用日志中删除内容的方式与分支或标签引用日志不同。</p><h3 id="git-config"><a href="#git-config" class="headerlink" title=".git&#x2F;config"></a>.git&#x2F;config</h3><p><code>.git/config</code> 是存储库的配置文件。您可以在这里配置远程服务器。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;] </span><br><span class="line">url = git@github.com: jvns/int-exposed </span><br><span class="line">fetch = +refs/heads/*: refs/remotes/origin/* </span><br><span class="line">[branch &quot;main&quot;] </span><br><span class="line">remote = origin </span><br><span class="line">merge refs/heads/main</span><br></pre></td></tr></table></figure><p>git 有本地和全局设置，本地设置在这里，全局设置位于 <code>~/.gitconfig</code> 钩子中</p><h3 id="hooks-git-hooks-pre-commit"><a href="#hooks-git-hooks-pre-commit" class="headerlink" title="hooks: .git/hooks/pre-commit"></a>hooks: <code>.git/hooks/pre-commit</code></h3><p>钩子是可选脚本，您可以设置运行（例如在提交之前）来执行任何您想要的操作。</p><p>示例内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line">any-commands-you-want</span><br></pre></td></tr></table></figure><p>（这显然不是一个真正的预提交钩子）</p><h3 id="the-staging-area-git-index"><a href="#the-staging-area-git-index" class="headerlink" title="the staging area: .git/index"></a>the staging area: <code>.git/index</code></h3><p>暂存区用于存储您准备提交的文件。这是一个二进制文件，与 git 中的许多本质上是纯文本文件的东西不同。</p><p>据我所知，查看索引内容的最佳方式是使用“git ls-files –stage”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git ls-files --stage</span><br><span class="line">100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0.gitignore</span><br><span class="line">100644 665c637a360874ce43bf74018768a96d2d4d219a 0hello.py</span><br><span class="line">100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0lib/empty.py</span><br></pre></td></tr></table></figure><h3 id="这并不详尽"><a href="#这并不详尽" class="headerlink" title="这并不详尽"></a>这并不详尽</h3><p><code>.git</code> 中还有一些其他内容，例如 <code>FETCH_HEAD</code>、<code>worktrees</code> 和 <code>info</code>。我只包括了我认为有助于理解的内容。</p><h3 id="这并不是要完全解释-git"><a href="#这并不是要完全解释-git" class="headerlink" title="这并不是要完全解释 git"></a>这并不是要完全解释 git</h3><p>我听到的关于 git 最常见的建议之一是“只要了解 <code>.git</code> 目录的结构，你就会明白一切！”。</p><p>我比任何人都更喜欢了解事物的内部结构，但“.git 目录的结构”并没有解释很多东西，比如：</p><ul><li>merge和rebases如何工作以及它们可能出错的原因（例如，<a href="https://jvns.ca/blog/2023/11/06/rebasing-what-can-go-wrong-/">rebases可能出错的原因</a> 的列表）</li><li>您的同事究竟是如何使用 git 的，以及您应该遵循哪些准则才能成功地与他们合作</li><li>如何从其他存储库推送&#x2F;拉取代码</li><li>如何处理合并冲突</li></ul><p>但愿这对某些人有用。</p><h3 id="其他一些参考资料："><a href="#其他一些参考资料：" class="headerlink" title="其他一些参考资料："></a>其他一些参考资料：</h3><ul><li>James Coglan 的《<a href="https://shop.jcoglan.com/building-git/">building git</a>》一书（附注：看起来 <a href="https://mastodon.social/@jcoglan/111807463940323655">1 月剩余时间</a> 有 50% 的折扣）</li><li>mary rose cook 的《<a href="https://maryrosecook.com/blog/post/git-from-the-inside-out">git 从内而外</a>》</li><li>官方 <a href="https://git-scm.com/docs/gitrepository-layout#Documentation/gitrepository-layout.txt-index">git 存储库布局文档</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">本文为个人知识学习，非原创！非作者！如本博客有侵权行为，请与我联系。</span><br><span class="line">摘录以下文章，内容根据个人需求有所删减，尊重知识产出，尊重作者知识劳动成果。</span><br><span class="line"></span><br><span class="line">作者：Julia Evans.</span><br><span class="line">链接：https://jvns.ca/blog/2024/01/26/inside-git/</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%BC%80%E5%8F%91%E7%BA%AA%E5%AE%9E/">开发纪实</category>
      
      
      <comments>https://log.660066.xyz/2024/09/01/inside-git/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用Ollama在Windows的CPU上运行大模型</title>
      <link>https://log.660066.xyz/2024/08/21/RunLLM-onCpuEnv-withOllama/</link>
      <guid>https://log.660066.xyz/2024/08/21/RunLLM-onCpuEnv-withOllama/</guid>
      <pubDate>Wed, 21 Aug 2024 02:41:55 GMT</pubDate>
      
      <description>使用Ollama在Windows的CPU上运行大模型</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、下载并按照Ollama"><a href="#一、下载并按照Ollama" class="headerlink" title="一、下载并按照Ollama"></a>一、下载并按照Ollama</h1><p><a href="https://ollama.com/">Ollama官网</a></p><p>本文以Windows平台为例，想必在Linux或者Mac上使用的同学不是很需要看这篇文章，基本都是有运维或编程基础的同学。</p><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>Ollama的官网比较简洁，打开就能看到“Download”按钮，点击选择适合自己电脑的Ollama安装即可。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821141849416.png" alt="image-20240821141849416" style="zoom:50%;"><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><ol><li><p>安装前，先配置一下Ollama的系统变量（在高级），变量名称为“OLLAMA_MODELS”，变量值自己找一个位置即可。</p><p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821142122499.png" alt="Ollama环境变量"></p><p>当然，如果你只有一个C盘，或者不需要考虑C盘剩余空间的话，就无需配置了。</p><p>这个路径，就是后面Ollama下载模型的路径，基本都是几百M起步，大的可能数十G。</p></li><li><p>安装Ollama，这一步没啥可讲的，无脑下一步即可。</p></li></ol><h2 id="1-3-检查是否安装成功"><a href="#1-3-检查是否安装成功" class="headerlink" title="1.3 检查是否安装成功"></a>1.3 检查是否安装成功</h2><p>首先运行命令窗口，输入ollama，如果命令无效，检查Ollama是否启动了，或者尝试重启系统，检查环境变量是否存在Ollama的安装路径等操作。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821142835564.png" alt="ollama" style="zoom: 67%;"><h1 id="二、下载模型-并-运行模型"><a href="#二、下载模型-并-运行模型" class="headerlink" title="二、下载模型 并 运行模型"></a>二、下载模型 并 运行模型</h1><h2 id="2-1-ollama官方模型库"><a href="#2-1-ollama官方模型库" class="headerlink" title="2.1 ollama官方模型库"></a>2.1 ollama官方模型库</h2><p><a href="https://ollama.com/library">https://ollama.com/library</a></p><p>需要啥模型，自己来找吧，根据自己电脑配置，尝试不同参数量的模型。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821143115786.png" alt="image-20240821143115786" style="zoom: 50%;"><h2 id="2-3-下载Qwen2-0-5b"><a href="#2-3-下载Qwen2-0-5b" class="headerlink" title="2.3 下载Qwen2:0.5b"></a>2.3 下载Qwen2:0.5b</h2><p>这里演示一下下载Qwen2的0.5b参数，这个模型小下的快，在一个我的ThinkPad太拉了，实在是不配跑更大的模型。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821143453681.png" alt="image-20240821143453681" style="zoom:50%;"><p>模型库找到Qwen2，选择0.5b，右侧会自动生成运行命令，直接在命令窗口运行即可。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821143612433.png" alt="image-20240821143612433" style="zoom: 67%;"><p>正在下载模型，下载完后会自动启动模型，这时候下载的数据，就会放到第一配好的环境变量路径上。</p><img src="/2024/08/21/RunLLM-onCpuEnv-withOllama/image-20240821143739085.png" alt="image-20240821143739085" style="zoom: 67%;"><p>这个回答属实是我没想到的，哈哈哈哈哈哈哈哈哈哈哈哈哈。但是我大约得体验了一下0.5b这个模型，感觉已经很不错了，毕竟才0.5b的参数量，剩下的就需要自己进行微调了。</p><h1 id="三、后文"><a href="#三、后文" class="headerlink" title="三、后文"></a>三、后文</h1><h2 id="3-1-ollama模型库不存在的模型"><a href="#3-1-ollama模型库不存在的模型" class="headerlink" title="3.1 ollama模型库不存在的模型"></a>3.1 ollama模型库不存在的模型</h2><p>其实本来我是想使用ollama来跑一下OpenBMB的miniCPM2.6，毕竟号称端侧比较厉害的大模型，没想到，下载以后，没有跑起来，因为现在Ollama官方还不支持miniCPM。</p><p>好消息是，Ollama官方近期应该会合并OpenBMB的分支，以支持miniCPM。如果你迫不及待的想尝试一下，可以自己去编译OpenBMB分支的Ollama。</p><p>这里附上地址:</p><ol><li><p>项目地址：<a href="https://github.com/OpenBMB/ollama/">https://github.com/OpenBMB/ollama/</a></p></li><li><p>部署教程：<a href="https://github.com/OpenBMB/ollama/blob/minicpm-v2.6/examples/minicpm-v2.6/README.md">https://github.com/OpenBMB/ollama/blob/minicpm-v2.6/examples/minicpm-v2.6/README.md</a></p></li></ol><h2 id="3-2-温馨提示"><a href="#3-2-温馨提示" class="headerlink" title="3.2 温馨提示"></a>3.2 温馨提示</h2><p>目前qwen2:0.5b模型在一些“特意”提示词的引导下，可能会生成不符合法律法规的内容，<strong>开发者在使用时，应特别注意！</strong></p><p>不分境外的大模型，可能会生成严重的政治错误内容，<strong>开发者在使用时，应特别注意！</strong></p><p>目前大陆境内，上线大模型公共服务，需要备案，也请<strong>开发者注意！</strong></p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      
      <comments>https://log.660066.xyz/2024/08/21/RunLLM-onCpuEnv-withOllama/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不解压zip修改zip压缩包内容</title>
      <link>https://log.660066.xyz/2024/08/06/noUnzipModifyContent/</link>
      <guid>https://log.660066.xyz/2024/08/06/noUnzipModifyContent/</guid>
      <pubDate>Tue, 06 Aug 2024 10:19:37 GMT</pubDate>
      
      <description>不解压zip修改zip压缩包内容</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h1><p>最近再开发过程中碰到一个问题，zip文件包中的一个文件内容存在不兼容的第三方依赖的数据，导致后续系统处理文件时，无法获取到准确的数据。</p><p>需求：在java代码中使用ZipInputStream，在不解压1.zip的情况下，将1.zip压缩包中的1.txt中的“我是谁”，替换为“我是大橙子”。</p><h1 id="二、实现步骤"><a href="#二、实现步骤" class="headerlink" title="二、实现步骤"></a>二、实现步骤</h1><ol><li>使用<code>ZipInputStream</code>读取ZIP文件。</li><li>遍历ZIP条目直到找到你想要修改的文件。</li><li>读取该文件的内容并进行替换。</li><li>使用<code>ZipOutputStream</code>创建一个新的ZIP文件。</li><li>将所有原始文件（除了被修改的那个）和修改后的文件写入新的ZIP文件。</li></ol><h1 id="三、实现代码"><a href="#三、实现代码" class="headerlink" title="三、实现代码"></a>三、实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 原始ZIP文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">zipFilePath</span> <span class="operator">=</span> <span class="string">&quot;1.zip&quot;</span>;</span><br><span class="line">        <span class="comment">// 目标文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFileName</span> <span class="operator">=</span> <span class="string">&quot;1.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 替换前和后的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldString</span> <span class="operator">=</span> <span class="string">&quot;我是谁&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newString</span> <span class="operator">=</span> <span class="string">&quot;我是大橙子&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新的ZIP文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newZipFilePath</span> <span class="operator">=</span> <span class="string">&quot;2.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipFile</span> <span class="variable">zipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipFile</span>(zipFilePath);</span><br><span class="line">             <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(newZipFilePath);</span><br><span class="line">             <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(fos)) &#123;</span><br><span class="line"></span><br><span class="line">            Enumeration&lt;? <span class="keyword">extends</span> <span class="title class_">ZipEntry</span>&gt; entries = zipFile.entries();</span><br><span class="line">            <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> entries.nextElement();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> zipFile.getInputStream(entry);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.getName().equals(targetFileName)) &#123;</span><br><span class="line">                    <span class="comment">// 如果是目标文件，则读取内容并替换</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(readAllBytes(is), StandardCharsets.UTF_8);</span><br><span class="line">                    content = content.replace(oldString, newString);</span><br><span class="line">                    <span class="type">byte</span>[] updatedContent = content.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 创建新的ZipEntry</span></span><br><span class="line">                    <span class="type">ZipEntry</span> <span class="variable">newEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(entry.getName());</span><br><span class="line">                    zos.putNextEntry(newEntry);</span><br><span class="line">                    zos.write(updatedContent);</span><br><span class="line">                    zos.closeEntry();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果不是目标文件，则直接复制到新ZIP文件</span></span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(entry.getName()));</span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> length;</span><br><span class="line">                    <span class="keyword">while</span> ((length = is.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        zos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                    zos.closeEntry();</span><br><span class="line">                &#125;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] readAllBytes(InputStream is) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码首先打开原始的ZIP文件，并创建一个新的ZIP文件。然后，它遍历ZIP文件中的每个条目，如果条目名称与要修改的文件名匹配，它会读取文件内容，执行字符串替换，并将更新后的内容写入新ZIP文件。对于其他文件，它们会被原封不动地复制到新ZIP文件中。</p><p>文件编码为UTF-8，如果文件使用了不同的编码，请相应地更改<code>StandardCharsets.UTF_8</code>。</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%BC%80%E5%8F%91%E7%BA%AA%E5%AE%9E/">开发纪实</category>
      
      
      <comments>https://log.660066.xyz/2024/08/06/noUnzipModifyContent/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Datawhale AI 夏令营】Task4-上分加油站</title>
      <link>https://log.660066.xyz/2024/08/02/datawhale-task4-appendix/</link>
      <guid>https://log.660066.xyz/2024/08/02/datawhale-task4-appendix/</guid>
      <pubDate>Fri, 02 Aug 2024 15:35:08 GMT</pubDate>
      
      <description>【Datawhale AI 夏令营】Task4-上分加油站</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、优化思路"><a href="#一、优化思路" class="headerlink" title="一、优化思路"></a>一、优化思路</h1><ol><li><p>训练＆微调模型提升解决逻辑推理问题的能力。</p></li><li><p>使用各种prompt工程、agent系统方案，达到模型解决逻辑推理问题的能力边界。</p></li></ol><h1 id="二、prompt（提示词工程）"><a href="#二、prompt（提示词工程）" class="headerlink" title="二、prompt（提示词工程）"></a>二、prompt（提示词工程）</h1><h2 id="2-1-什么是prompt"><a href="#2-1-什么是prompt" class="headerlink" title="2.1 什么是prompt"></a>2.1 什么是prompt</h2><p>在交互式任务中给定的初始文本或输入，用来引导模型生成特定类型的输出。</p><p>例如，在一个对话系统中，用户提出的问题就是prompt，模型根据这个prompt生成回答。prompt可以是一个句子、一个段落或任何文本序列，模型基于这个prompt继续生成后续的文本。优化prompt通常意味着调整或设计更有效的输入，以引导模型产生更准确、更相关或更高质量的输出。</p><h2 id="2-2-优化prompt"><a href="#2-2-优化prompt" class="headerlink" title="2.2 优化prompt"></a>2.2 优化prompt</h2><blockquote><p>[!NOTE]</p><ul><li><strong>增加上下文信息</strong>：提供更多的背景信息可以帮助模型理解prompt的意图。</li><li><strong>明确性</strong>：确保prompt清晰无歧义，减少模型理解错误的可能性。</li><li><strong>引导性</strong>：使用特定的关键词或短语来引导模型朝向预期的方向生成文本。</li></ul></blockquote><ol><li><p>明确和具体化</p><ul><li><p><strong>清晰表述</strong>：确保prompt清晰、直接，避免模糊不清的表述，这样可以减少模型误解的可能性。</p></li><li><p><strong>具体实例</strong>：提供具体的示例或上下文，帮助模型更好地理解任务要求。例如，在生成文章摘要时，可以先给出一两句话的摘要示例，然后让模型继续生成。</p></li></ul></li><li><p>提供指导性的指令</p><ul><li><p><strong>指令明确</strong>：在prompt中明确指出你希望模型执行的操作。例如，“请总结下面的文章”，而不是“做点什么”。</p></li><li><p><strong>格式指引</strong>：指定输出格式，比如“以项目符号列表的形式列出”或“使用正式的语言回答”。</p></li></ul></li><li><p>使用示例</p><ul><li><p><strong>包含样本</strong>：在prompt中加入一些样例输入和对应的期望输出，帮助模型理解模式或格式。</p></li><li><p><strong>逐步引导</strong>：通过一系列由简到繁的示例，逐步引导模型学习更复杂的任务。</p></li></ul></li><li><p>调整长度和复杂度</p><ul><li><p><strong>适当长度</strong>：根据任务需求调整prompt的长度，太长可能导致模型无法抓住重点，太短可能缺乏必要的信息。</p></li><li><p><strong>控制复杂度</strong>：避免过于复杂或冗余的信息，这可能会混淆模型。</p></li></ul></li><li><p>引导模型的思维方式</p><ul><li><p><strong>逻辑推理</strong>：如果需要模型进行逻辑推理，可以在prompt中引入假设情景或逻辑问题。</p></li><li><p><strong>情感色彩</strong>：对于需要特定情感色彩的文本生成，如写作或评论，可以在prompt中设定情感基调。</p></li></ul></li><li><p>测试和迭代</p><ul><li><p><strong>A&#x2F;B测试</strong>：对不同版本的prompt进行对比测试，看哪个版本的输出质量更高。</p></li><li><p><strong>持续优化</strong>：根据模型的反馈和输出，不断调整prompt，直到达到满意的输出为止。</p></li></ul></li><li><p>避免偏见和敏感话题</p><ul><li><p><strong>检查偏见</strong>：确保prompt没有隐含的偏见，避免引导模型生成有偏见的回答。</p></li><li><p><strong>敏感话题</strong>：避免提及可能引起争议或不适的话题，确保输出的安全性和适宜性。</p></li></ul></li></ol><h1 id="三、agent（智能体）"><a href="#三、agent（智能体）" class="headerlink" title="三、agent（智能体）"></a>三、agent（智能体）</h1><h2 id="3-1-什么是agent"><a href="#3-1-什么是agent" class="headerlink" title="3.1 什么是agent"></a>3.1 什么是agent</h2><p>能够感知环境并采取行动以影响该环境的实体。</p><p>在大模型技术中，一个agent可能是一个自动化的程序，如聊天机器人，它可以根据用户的输入（即prompt）生成响应。</p><p>在强化学习的背景下，agent的目标是找到一个最优策略，使得在长期的交互中，累积的奖励最大。这就像是你玩游戏时，想要通过不断练习和学习，找到最有效的打法，以便在游戏中获得尽可能高的总分。</p><h2 id="3-2-优化agent"><a href="#3-2-优化agent" class="headerlink" title="3.2 优化agent"></a>3.2 优化agent</h2><blockquote><p>[!NOTE]</p><ul><li><strong>模型架构的改进</strong>：使用更复杂的神经网络结构，比如Transformer，以提高模型的表达能力。</li><li><strong>数据增强</strong>：增加训练数据的多样性和数量，使模型更加鲁棒。</li><li><strong>算法优化</strong>：改进训练算法，如采用不同的损失函数、优化器或正则化技术，以提升模型的泛化能力。</li><li><strong>超参数调优</strong>：调整学习率、批次大小等超参数，找到最佳配置。</li></ul></blockquote><ol><li><p>模型架构调整</p><ul><li><p><strong>神经网络深度与宽度</strong>：增加或减少神经网络层数（深度）和每层神经元数量（宽度），寻找最佳的网络架构。</p></li><li><p><strong>正则化技术</strong>：使用如Dropout、L1&#x2F;L2正则化等技术防止过拟合。</p></li></ul></li><li><p>算法选择与参数调优</p><ul><li><p><strong>强化学习算法</strong>：选择合适的RL算法，如Q-Learning、Deep Q-Networks (DQN)、Policy Gradients、Proximal Policy Optimization (PPO)等，并调整其超参数。</p></li><li><p><strong>探索与利用平衡</strong>：调整探索率（exploration rate），如ε-greedy策略中的ε值，以找到探索未知状态与利用已知最优行为之间的平衡。</p></li></ul></li><li><p>经验回放与数据增强</p><ul><li><p><strong>经验回放（Experience Replay）</strong>：使用历史交互数据训练代理，打破数据的相关性，提高学习效率。</p></li><li><p><strong>数据增强</strong>：通过数据增强技术增加训练集的多样性，帮助代理泛化到未见过的情况。</p></li></ul></li><li><p>多任务学习与迁移学习</p><ul><li><p><strong>多任务学习</strong>：同时解决多个相关任务，共享学习到的知识，提高学习效率和泛化能力。</p></li><li><p><strong>迁移学习</strong>：从一个已经解决的任务中学习到的知识迁移到新的相关任务上，加速新任务的学习。</p></li></ul></li><li><p>分布式与并行计算</p><ul><li><p><strong>分布式训练</strong>：使用多个处理器或机器并行训练代理，加快训练速度。</p></li><li><p><strong>异步更新</strong>：在多个环境中并行收集经验，异步更新代理的参数，如A3C算法。</p></li></ul></li><li><p>模型解释与可解释性</p><ul><li><p><strong>解释性增强</strong>：开发技术使代理的决策过程更加透明，便于理解和调试。</p></li><li><p><strong>基于规则的约束</strong>：结合领域知识，为代理添加硬编码规则或限制，以避免不合理的行为。</p></li></ul></li><li><p>持续学习与在线学习</p><ul><li><p><strong>持续学习</strong>：使代理能够随着时间和新数据的出现持续学习和适应，避免灾难性遗忘。</p></li><li><p><strong>在线学习</strong>：代理在实际环境中实时学习，无需重新训练整个模型。</p></li></ul></li><li><p>评估与监控</p><ul><li><p><strong>性能指标</strong>：定义合适的性能指标来评估代理的表现，如累积奖励、成功完成任务的频率等。</p></li><li><p><strong>实时监控</strong>：实施监控机制，及时发现和纠正代理的异常行为。</p></li></ul></li><li><p>模拟与预训练</p><ul><li><p><strong>模拟环境</strong>：在高保真的模拟环境中预训练代理，降低现实世界中的试错成本。</p></li><li><p><strong>预训练与微调</strong>：使用预训练模型作为起点，针对特定任务进行微调，加速学习过程。</p></li></ul></li></ol><h1 id="四、相关资料"><a href="#四、相关资料" class="headerlink" title="四、相关资料"></a>四、相关资料</h1><p>lora相关微调的方案一览：</p><p><a href="https://blog.csdn.net/deephub/article/details/136735670">https://blog.csdn.net/deephub/article/details/136735670</a></p><p>pfet库，也介绍了很多微调的方法：</p><p><a href="https://huggingface.co/docs/peft/conceptual_guides/adapter">https://huggingface.co/docs/peft/conceptual_guides/adapter</a></p><p>agent学习链接：</p><p><a href="https://github.com/datawhalechina/hugging-multi-agent">https://github.com/datawhalechina/hugging-multi-agent</a></p><p>面向开发者的大模型手册：</p><p><a href="https://github.com/datawhalechina/llm-cookbook/tree/main">https://github.com/datawhalechina/llm-cookbook/tree/main</a></p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      <category domain="https://log.660066.xyz/tags/Datawhale/">Datawhale</category>
      
      
      <comments>https://log.660066.xyz/2024/08/02/datawhale-task4-appendix/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Datawhale AI 夏令营】Task3-模型微调</title>
      <link>https://log.660066.xyz/2024/07/31/datawhale-task3-fine-tuning/</link>
      <guid>https://log.660066.xyz/2024/07/31/datawhale-task3-fine-tuning/</guid>
      <pubDate>Wed, 31 Jul 2024 06:03:28 GMT</pubDate>
      
      <description>【Datawhale AI 夏令营】Task3-模型微调</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、微调"><a href="#一、微调" class="headerlink" title="一、微调"></a>一、微调</h1><h2 id="1-1-什么是微调"><a href="#1-1-什么是微调" class="headerlink" title="1.1 什么是微调"></a>1.1 什么是微调</h2><p>在预训练模型的基础上，针对特定任务或数据集进行进一步的训练，以适应更具体的应用场景。</p><h2 id="1-2-微调的意义"><a href="#1-2-微调的意义" class="headerlink" title="1.2 微调的意义"></a>1.2 微调的意义</h2><ol><li><strong>上下文理解提升</strong>：使用的特定数据集可以帮助模型更好地理解特定任务的上下文，从而在推理时能够考虑到更多的相关信息和细节。</li><li><strong>性能优化</strong>：使其在处理该任务时达到更高的准确率和更低的错误率。这对于需要高可靠性和准确性的推理任务尤为重要。</li><li><strong>减少数据需求</strong>：对于一些数据稀缺的领域或任务，微调可以在相对较少的数据量下实现较好的性能提升，因为模型已经具备了大量的通用语言知识。</li><li><strong>适应性增强</strong>：微调使模型能够更好地适应特定用户或场景的需求，提供更加个性化和定制化的推理服务。</li></ol><h1 id="二、LoRa"><a href="#二、LoRa" class="headerlink" title="二、LoRa"></a>二、LoRa</h1><h2 id="2-1-什么是LoRa"><a href="#2-1-什么是LoRa" class="headerlink" title="2.1 什么是LoRa"></a>2.1 什么是LoRa</h2><p>LoRA（Low-Rank Adaptation）微调是一种高效的模型微调技术，特别适用于大型预训练语言模型的适应性调整。LoRA的核心思想是通过引入低秩矩阵来调整模型的权重，从而在不显著增加模型参数数量的情况下，实现对模型的微调。</p><p>通俗点说就是，在原有的权重矩阵之外，增加一组更小的矩阵，这些矩阵可以视为对原有权重的小幅调整。这些调整矩阵（低秩矩阵）可以以较小的成本学习到新任务的特定模式，而无需改变预训练模型的大部分权重。</p><h2 id="2-2-LoRa的优势"><a href="#2-2-LoRa的优势" class="headerlink" title="2.2 LoRa的优势"></a>2.2 LoRa的优势</h2><ul><li><p>可以针对不同的下游任务构建小型 LoRA 模块，从而在共享预训练模型参数基础上有效地切换下游任务。</p></li><li><p>LoRA 使用自适应优化器（Adaptive Optimizer），不需要计算梯度或维护大多数参数的优化器状态，训练更有效、硬件门槛更低。</p></li><li><p>LoRA 使用简单的线性设计，在部署时将可训练矩阵与冻结权重合并，不存在推理延迟。</p></li><li><p>LoRA 与其他方法正交，可以组合。</p></li></ul><h2 id="2-3-LoRa原理"><a href="#2-3-LoRa原理" class="headerlink" title="2.3 LoRa原理"></a>2.3 LoRa原理</h2><p><img src="/2024/07/31/datawhale-task3-fine-tuning/image-20240801230819863.png" alt="image-20240801230819863"></p><h2 id="2-4-通俗易懂"><a href="#2-4-通俗易懂" class="headerlink" title="2.4 通俗易懂"></a>2.4 通俗易懂</h2><p>想象一下，有一个非常复杂的拼图，拼图代表了一个预训练好的大型语言模型。拼图已经完成，而且做得非常好，它能够识别和理解各种语言模式和语义。但是，当你需要这个拼图适应一个新的场景或任务时，比如说要它理解一种特殊的行业术语或者特定的文化背景，你不想打乱整个拼图，因为那会破坏它原有的功能和性能。</p><p>LoRA就像是为这个拼图添加了几块额外的、可移动的小拼图。这些小拼图被设计成可以插在原拼图的某些部分上，改变那些部分的功能，但不会影响整个拼图的完整性和稳定性。这些小拼图是专门定制的，它们只需要学习如何适应新任务，而不是整个模型的所有部分。</p><h2 id="2-5-后话"><a href="#2-5-后话" class="headerlink" title="2.5 后话"></a>2.5 后话</h2><p>跟着相关的参考资料，目前我个人的理解是LoRa就是使用模型和部分数据，来生成一个小模型，然后将小模型整合进大模型中。使大模型对特定数据的更好的理解和处理。</p><p>感觉通过LoRa进行微调，是可以满足开源模型服务实际业务需求的。所以后面打算继续学习一下LoRa的使用，也会将相关的学习记录在本博客下。</p><h1 id="三、vllm加速"><a href="#三、vllm加速" class="headerlink" title="三、vllm加速"></a>三、vllm加速</h1><h2 id="3-1-vllm"><a href="#3-1-vllm" class="headerlink" title="3.1 vllm"></a>3.1 vllm</h2><p>[vLLM（Virtual Large Language Model）是一个由伯克利大学LMSYS组织开源的大规模语言模型高速推理框架。它的设计目标是在实时应用场景中大幅提升语言模型服务的吞吐量和内存使用效率。vLLM的特点包括易于使用、与Hugging Face等流行工具无缝集成以及高效的性能。</p><h2 id="3-2-vllm的用途"><a href="#3-2-vllm的用途" class="headerlink" title="3.2 vllm的用途"></a>3.2 vllm的用途</h2><p>主要用来加速大模型的文本生成过程。当涉及到长文本生成或需要处理大量输入时，大模型的计算成本较高（好像主要是电费，跟挖矿的了）。</p><p>vllm通过优化模型的推理流程，来解决大模型的实时部署和高性能生成。</p><h2 id="3-3-vllm使用步骤"><a href="#3-3-vllm使用步骤" class="headerlink" title="3.3 vllm使用步骤"></a>3.3 vllm使用步骤</h2><ol><li>安装vllm库。</li><li>加载预训练的模型和配置。</li><li>配置vllm参数，如批量大小、最大序列长度等。</li><li>调用vllm的API进行文本生成。</li></ol><h2 id="3-4-通俗易懂"><a href="#3-4-通俗易懂" class="headerlink" title="3.4 通俗易懂"></a>3.4 通俗易懂</h2><p>想象一下，你正在玩一个数独，比较复杂，每次你填下一个数后，可能会影响后续所有可能的选择。如果你每次都要重新思考所有可能的后续选项，非常耗时。vllm就像一个聪明的游戏助手，它会记住你已经填过的数，并且只给你接下来合理的几个选项，这样你就不用考虑那些明显不合适的数，从而大大加快了游戏的速度。</p><p>vllm根据已经生成的文本动态调整生成的词汇范围，从而加速了文本生成的过程。</p><h1 id="四、多路LLM投票"><a href="#四、多路LLM投票" class="headerlink" title="四、多路LLM投票"></a>四、多路LLM投票</h1><h2 id="4-1-什么是多路LLM投票"><a href="#4-1-什么是多路LLM投票" class="headerlink" title="4.1 什么是多路LLM投票"></a>4.1 什么是多路LLM投票</h2><p>即多模型融合或模型集成，是一种在多个大模型之间采用决策融合策略的方法，用于提高预测的准确性和稳定性。</p><p>这种方法在机器学习和深度学习领域中很常见，尤其在面对复杂或高风险的应用场景时，比如自动驾驶、医疗诊断或金融预测等。</p><h2 id="4-2-Baseline中的实现"><a href="#4-2-Baseline中的实现" class="headerlink" title="4.2 Baseline中的实现"></a>4.2 Baseline中的实现</h2><p>其实看到讲义中写的实现逻辑（通过三次结果推理，将选择答案最多的结果作为最终结果），我突然就想起了一个区块链的共识机制——拜占庭算法。与之类似，大概得意思就是，少数服从多数。</p><h1 id="五、后续"><a href="#五、后续" class="headerlink" title="五、后续"></a>五、后续</h1><p>到目前为止，感觉有开源模型及其开源生态的加持，大模型的开发和应用，对于一般企业来说不是什么太难的事，重点就是在微调和量化上。微调能解决模型服务于业务需求。而量化可以解决，在较低性能的机器上运行大模型。</p><p>个人感觉，大模型在AI领域近几年很流行，也比较趋于成熟化了。但是训练数据，运行环境要求还是不太完美。感觉后面肯定会有更好的解决方案，也会从大模型这一块衍生出更多新的AI技术。</p><p>本Task所需文件：</p><p><a href="https://www.modelscope.cn/datasets/Datawhale/DW2024_Complex_reasoning_ability_assessment_qwen2-7b-lora">https://www.modelscope.cn/datasets/Datawhale/DW2024_Complex_reasoning_ability_assessment_qwen2-7b-lora</a></p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      <category domain="https://log.660066.xyz/tags/Datawhale/">Datawhale</category>
      
      
      <comments>https://log.660066.xyz/2024/07/31/datawhale-task3-fine-tuning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Datawhale AI 夏令营】Task2-精读baseline</title>
      <link>https://log.660066.xyz/2024/07/30/datawhale-task2-read-baseline/</link>
      <guid>https://log.660066.xyz/2024/07/30/datawhale-task2-read-baseline/</guid>
      <pubDate>Tue, 30 Jul 2024 14:19:27 GMT</pubDate>
      
      <description>【Datawhale AI 夏令营】Task1-精读baseline</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、提示工程-Prompt-Engineering"><a href="#一、提示工程-Prompt-Engineering" class="headerlink" title="一、提示工程(Prompt Engineering)"></a>一、提示工程(Prompt Engineering)</h1><h2 id="1-1-关键概念"><a href="#1-1-关键概念" class="headerlink" title="1.1 关键概念"></a>1.1 关键概念</h2><ol><li>Prompt（提示）：给定的一段文本或指令，用于启动或引导AI模型响应。</li><li>Prompt Design（提示设计）：设计良好的提示，目的是帮助模型更好理解输入的内容。</li><li>Few-shot Learning（少样本学习）：提供给模型几个示例，让模型学习并应用于新的任务或数据点上。</li><li>Zero-shot Learning（零样本学习）：不提供任何示例，仅通过明确的指令或描述来引导模型完成任务。</li><li>In-context Learning（基于上下文的学习）：利用直接在提示中提供的上下文信息来进行学习和推理。</li><li>Chain-of-thought Prompting（思维链提示）：通过在提示中加入中间步骤或思考过程来引导模型产生更复杂的推理和回答。</li></ol><h2 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h2><h3 id="1-2-1-输入问题"><a href="#1-2-1-输入问题" class="headerlink" title="1.2.1 输入问题"></a>1.2.1 输入问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;problem&#x27;</span>: </span><br><span class="line">        <span class="string">&#x27;有一群人和一些食物类型。下列是关于这些个体和食物的已知信息：\n\n1. 鸡肉是一种食物。\n2. 苹果是一种食物。\n3. 如果X吃了Y，且X活着，则Y是一种食物。\n4. Bill存活。\n5. Bill吃了花生。\n6. John吃所有食物。\n7. Sue吃所有Bill吃的食物。\n8. John喜欢所有食物。\n\n根据以上信息，回答以下选择题：&#x27;</span>, </span><br><span class="line">   <span class="string">&#x27;questions&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;选择题 1：\n谁喜欢吃花生？&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;options&#x27;</span>: [<span class="string">&#x27;Bill&#x27;</span>, <span class="string">&#x27;Sue&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;None of the above&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ], <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;round1_test_data_000&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-转化"><a href="#1-2-2-转化" class="headerlink" title="1.2.2 转化"></a>1.2.2 转化</h3><p>上面的问题字典转化为MD格式的prompt</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">你是一个逻辑推理专家，擅长解决逻辑推理问题。以下是一个逻辑推理的题目，形式为单项选择题。所有的问题都是（close-world assumption）闭世界假设，即未观测事实都为假。请逐步分析问题并在最后一行输出答案，最后一行的格式为&quot;答案是：A&quot;。题目如下：</span><br><span class="line"></span><br><span class="line"><span class="section">###题目:</span></span><br><span class="line">有一群人和一些食物类型。下列是关于这些个体和食物的已知信息：</span><br><span class="line"></span><br><span class="line">鸡肉是一种食物。</span><br><span class="line">苹果是一种食物。</span><br><span class="line">如果X吃了Y，且X活着，则Y是一种食物。</span><br><span class="line">Bill存活。</span><br><span class="line">Bill吃了花生。</span><br><span class="line">John吃所有食物。</span><br><span class="line">Sue吃所有Bill吃的食物。</span><br><span class="line">John喜欢所有食物。</span><br><span class="line"></span><br><span class="line">根据以上信息，回答以下选择题：</span><br><span class="line"></span><br><span class="line"><span class="section">###问题:</span></span><br><span class="line">选择题 1：</span><br><span class="line">谁喜欢吃花生？</span><br><span class="line">A. Bill</span><br><span class="line">B. Sue</span><br><span class="line">C. John</span><br><span class="line">D. None of the above</span><br></pre></td></tr></table></figure><ol><li><p>我们看到上述生成的prompt，首先告诉了模型，你要”作为“什么，然后”干“什么。(贫僧从东土大唐来，前往西天拜佛求经)</p><ul><li><p>作为什么：主要是让模型，把自己认为是那方面的专家。</p></li><li><p>干什么：尽可能详细的告诉模型，你干什么事（分析问题、最后一行输入答案），有什么限制（例如上述题目是单选题、所有题目都是闭世界假设、最后一行的格式）</p></li></ul></li><li><p>“预防针”打完了，就要步入正题了。告诉大模型题目是什么，问题是什么，选项有哪些。</p></li></ol><h3 id="1-2-3-大模型响应"><a href="#1-2-3-大模型响应" class="headerlink" title="1.2.3 大模型响应"></a>1.2.3 大模型响应</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status_code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;request_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18d43478-2aec-92be-8840-cd3bb08009cf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stop&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我们可以通过分析给出的信息来解答这个问题。\n\n首先，我们知道Bill吃了花生（根据第5条信息），并且Bill还活着（根据第4条信息）。根据第3条规则，“如果X吃了Y，且X活着，则Y是一种食物”，我们可以推断出花生是一种食物。\n\n接下来，我们知道John吃所有食物（根据第6条信息），并且John喜欢所有食物（根据第8条信息）。既然花生是一种食物，那么John应该也吃花生，并且喜欢花生。\n\nSue吃所有Bill吃的食物（根据第7条信息），既然Bill吃了花生，那么Sue也应该吃花生。\n\n所以，喜欢吃花生的人有Bill、Sue和John。\n\n答案是：C. John\n\n但是，题目要求选择一个选项，而实际上Bill、Sue和John都喜欢吃花生。然而，在给出的选项中，只有John被明确列出作为喜欢吃花生的人（选项C）。因此，虽然Bill和Sue也喜欢吃花生，但根据题目要求，正确答案应当是包含在选项中的那个，即John。\n\n答案是：C. John&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;input_tokens&quot;</span><span class="punctuation">:</span> <span class="number">210</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;output_tokens&quot;</span><span class="punctuation">:</span> <span class="number">223</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total_tokens&quot;</span><span class="punctuation">:</span> <span class="number">433</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们可以看到，output.choices.message.content中的模型响应，首先分析了上述题目中的信息，在分析过程中，解答出了三个答案。</p><p>根据我们提示中说到的，“题目是单选题”，模型又继续推理出了更准确的一个答案。根据提示要求，将答案输出在了最后一行。</p><h1 id="二、代码阅读"><a href="#二、代码阅读" class="headerlink" title="二、代码阅读"></a>二、代码阅读</h1><h2 id="2-1-前言"><a href="#2-1-前言" class="headerlink" title="2.1 前言"></a>2.1 前言</h2><p>baseline共分为了两部分。</p><p>第一部分：借助Qwen的API，进行问题的推理。</p><p>第二部分：因各种原因，导致Qwen没有推理出来的答案进行纠正和容错。</p><img src="/2024/07/30/datawhale-task2-read-baseline/image-20240730225012884.png" alt="image-20240730225012884" style="zoom: 67%;"><p>偷个懒吧。直接从讲义中拷贝过来。</p><p>我目前是在职的Java开发，略懂点前端开发。python也能看懂，但仅停留在能看懂，上次接触python还是大二那年，过去也有个三四年了。</p><h2 id="2-2-问题推理"><a href="#2-2-问题推理" class="headerlink" title="2.2 问题推理"></a>2.2 问题推理</h2><h3 id="2-2-1-call-qwen-api"><a href="#2-2-1-call-qwen-api" class="headerlink" title="2.2.1 call_qwen_api"></a>2.2.1 call_qwen_api</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">call_qwen_api</span>(<span class="params">MODEL_NAME, query</span>):</span><br><span class="line">    <span class="comment"># 这里采用dashscope的api调用模型推理，通过http传输的json封装返回结果</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: query&#125;]</span><br><span class="line">    response = dashscope.Generation.call(</span><br><span class="line">        MODEL_NAME,</span><br><span class="line">        messages=messages,</span><br><span class="line">        result_format=<span class="string">&#x27;message&#x27;</span>,  <span class="comment"># 将结果设置为消息格式。</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> response.status_code == HTTPStatus.OK:</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Request id: %s, Status code: %s, error code: %s, error message: %s&#x27;</span> % (</span><br><span class="line">            response.request_id, response.status_code,</span><br><span class="line">            response.code, response.message</span><br><span class="line">        ))</span><br><span class="line">        <span class="keyword">raise</span> Exception()</span><br></pre></td></tr></table></figure><p>这段代码主要就是调用Qwen的api。</p><p>dashscope是阿里模型服务灵积的一个包吧。通过这个包，可以边界的调用，阿里云上的模型服务，进行推理等操作。其实说简单点，就是个SDK，阿里云将模型部署好，开发了个SDK，方便我们调用。具体的其他用法，可以参考官网的<a href="https://help.aliyun.com/zh/dashscope/">开发文档</a></p><p>我们继续往下看这段代码，如果调用返回状态为OK。那么将模型的对题目的响应返回出去。</p><p>如果状态不是OK，那么，就打印错误日志，抛出异常。</p><h3 id="2-2-2-api-retry"><a href="#2-2-2-api-retry" class="headerlink" title="2.2.2 api_retry"></a>2.2.2 <strong>api_retry</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">api_retry</span>(<span class="params">MODEL_NAME, query</span>):</span><br><span class="line">    <span class="comment"># 最大尝试次数</span></span><br><span class="line">    max_retries = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 再次尝试等待时间</span></span><br><span class="line">    retry_delay = <span class="number">60</span>  <span class="comment"># in seconds</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; max_retries:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> call_qwen_api(MODEL_NAME, query)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            attempts += <span class="number">1</span>   </span><br><span class="line">            <span class="keyword">if</span> attempts &lt; max_retries:</span><br><span class="line">                logger.warning(<span class="string">f&quot;Attempt <span class="subst">&#123;attempts&#125;</span> failed for text: <span class="subst">&#123;query&#125;</span>. Retrying in <span class="subst">&#123;retry_delay&#125;</span> seconds...&quot;</span>)</span><br><span class="line">                time.sleep(retry_delay)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.error(<span class="string">f&quot;All <span class="subst">&#123;max_retries&#125;</span> attempts failed for text: <span class="subst">&#123;query&#125;</span>. Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>这段代码就是API的重试机制，简单的说，就是当API调用异常了，在5分钟内，每1分钟重新请求一次，共尝试5次。</p><p>再次过程中，捕获call_qwen_api方法中抛出的异常，存储到日志文件中。</p><h3 id="2-2-3-get-prompt"><a href="#2-2-3-get-prompt" class="headerlink" title="2.2.3 get_prompt"></a>2.2.3 <strong>get_prompt</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里定义了prompt推理模版</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prompt</span>(<span class="params">problem, question, options</span>):</span><br><span class="line"></span><br><span class="line">    options = <span class="string">&#x27;\n&#x27;</span>.join(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;ABCDEFG&#x27;</span>[i]&#125;</span>. <span class="subst">&#123;o&#125;</span>&quot;</span> <span class="keyword">for</span> i, o <span class="keyword">in</span> <span class="built_in">enumerate</span>(options))</span><br><span class="line"></span><br><span class="line">    prompt = <span class="string">f&quot;&quot;&quot;你是一个逻辑推理专家，擅长解决逻辑推理问题。以下是一个逻辑推理的题目，形式为单项选择题。所有的问题都是（close-world assumption）闭世界假设，即未观测事实都为假。请逐步分析问题并在最后一行输出答案，最后一行的格式为&quot;答案是：A&quot;。题目如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 题目:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;problem&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 问题:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;question&#125;</span></span></span><br><span class="line"><span class="string"><span class="subst">&#123;options&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(prompt)</span></span><br><span class="line">    <span class="keyword">return</span> prompt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码，就是真家伙了。将需要推理的题目，转换成提示词模板。</p><p>个人感觉，如果想提分，这里是可以进行优化的，具体优化方法，我不知道。因为刚开始接触大模型应用，不管是数据清洗、提示词工程、还是推理都不是很了解。如果各位有幸访问到我的博客，可以在评论区交流，我也会多多吸取大家的经验，十份感谢。</p><h3 id="2-2-4-extract"><a href="#2-2-4-extract" class="headerlink" title="2.2.4 extract"></a>2.2.4 extract</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用extract抽取模获得抽取的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">input_text</span>):</span><br><span class="line">    ans_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;答案是：(.)&quot;</span>, re.S)</span><br><span class="line"></span><br><span class="line">    problems = ans_pattern.findall(input_text)</span><br><span class="line">    <span class="comment"># print(problems)</span></span><br><span class="line">    <span class="keyword">if</span>(problems == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> problems[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这段代码，主要就是从模型返回的响应中，获取答案。如果找不答案，那么就返回一个固定的A答案。算是容错的一种方式。</p><p>其实我觉得也可以随机返回一个答案，不过都是概率问题（猴子算法哈哈哈哈哈哈），对错就不好说了。</p><h3 id="2-2-5-process-datas"><a href="#2-2-5-process-datas" class="headerlink" title="2.2.5 process_datas"></a>2.2.5 process_datas</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_datas</span>(<span class="params">datas,MODEL_NAME</span>):</span><br><span class="line">    results = []</span><br><span class="line">    <span class="comment"># 定义线程池 选择16线程</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">16</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="comment"># 这里我们使用future_data 存储每个线程的数据</span></span><br><span class="line">        future_data = &#123;&#125;</span><br><span class="line">        <span class="comment"># 这里的lens记录了调用api的次数，也就是我们每个问题背景下的所有子问题之和。</span></span><br><span class="line">        lens = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 送入多线程任务</span></span><br><span class="line">        <span class="comment"># 这里每个data下是一个问题背景，其中包含多个子问题。</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> tqdm(datas, desc=<span class="string">&quot;Submitting tasks&quot;</span>, total=<span class="built_in">len</span>(datas)):</span><br><span class="line">            problem = data[<span class="string">&#x27;problem&#x27;</span>]</span><br><span class="line">            <span class="comment"># 这里面我们用enumerate方法每次循环得到问题的序号id和实际的问题。</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">id</span>,question <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="string">&#x27;questions&#x27;</span>]):</span><br><span class="line">                prompt = get_prompt(problem, </span><br><span class="line">                                    question[<span class="string">&#x27;question&#x27;</span>], </span><br><span class="line">                                    question[<span class="string">&#x27;options&#x27;</span>],</span><br><span class="line">                                    )</span><br><span class="line">                <span class="comment"># 这里送入线程池等待处理，使用api_retry，向api_retry传入MODEL_NAME, prompt参数</span></span><br><span class="line">                future = executor.submit(api_retry, MODEL_NAME, prompt)</span><br><span class="line">                <span class="comment"># 每个线程我们存储对应的json问题数据以及问题序号id，这样我们就能定位出执行的是哪个子问题</span></span><br><span class="line">                future_data[future] = (data,<span class="built_in">id</span>)</span><br><span class="line">                time.sleep(<span class="number">0.6</span>)  <span class="comment"># 控制每0.6秒提交一个任务 防止接口超过并发数</span></span><br><span class="line">                lens += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 处理多线程任务</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm(as_completed(future_data), total=lens, desc=<span class="string">&quot;Processing tasks&quot;</span>):</span><br><span class="line">            <span class="comment"># print(&#x27;data&#x27;,data)</span></span><br><span class="line">            <span class="comment"># 取出每个线程中的字典数据及对应的问题id</span></span><br><span class="line">            data = future_data[future][<span class="number">0</span>]</span><br><span class="line">            problem_id = future_data[future][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 获取api运行结果</span></span><br><span class="line">                res  = future.result()</span><br><span class="line">                <span class="comment"># 抽取大语言模型返回结果</span></span><br><span class="line">                extract_response = extract(res)</span><br><span class="line">                <span class="comment"># print(&#x27;res&#x27;,extract_response)</span></span><br><span class="line">                <span class="comment"># 装入answer字段</span></span><br><span class="line">                data[<span class="string">&#x27;questions&#x27;</span>][problem_id][<span class="string">&#x27;answer&#x27;</span>] = extract_response</span><br><span class="line">                <span class="comment"># 在结果列表中新增数据字典</span></span><br><span class="line">                results.append(data)</span><br><span class="line">                <span class="comment"># print(&#x27;data&#x27;,data)</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to process text: <span class="subst">&#123;data&#125;</span>. Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><p>这段代码，注释写的很清晰。就是创建线程池，并发处理。</p><p>我们调用的是Qwen的API，并发处理应该问题不大，毕竟阿里云是在国内云服务厂商也是大牛级别的存在，但是在自己机器上并发处理，不太清楚会不会把服务打死。</p><p>主要是我也没法尝试，在自己机器上会不会打死，因为公司发的这个ThinkPad，实在是让人抓马。攒钱，2026年顺便薅公司更新机器的羊毛，上MacBook Pro。</p><p>不扯淡了，<strong>这里我突然想起了一个问题，如果我们不是并发执行任务，而是想使用ChatGPT一样，先上来使用提示词告诉模型要做什么。然后一个问题一个问题的问，基于上下文的这种情况，会不会提高模型响应答案的准确率？</strong></p><h3 id="2-2-6-main"><a href="#2-2-6-main" class="headerlink" title="2.2.6 main"></a>2.2.6 main</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ifn, ofn</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(ofn):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 按行读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(ifn) <span class="keyword">as</span> reader:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">            sample = json.loads(line)</span><br><span class="line">            data.append(sample)</span><br><span class="line">    datas = data</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 均匀地分成多个数据集</span></span><br><span class="line">    return_list = process_datas(datas,MODEL_NAME)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(return_list))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All tasks finished!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> return_list</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># 这里给了一个抽取范例参考</span></span><br><span class="line">    a = extract(<span class="string">&quot;&quot;&quot;根据欧几里得算法，逐步解析计算两个数6和7的最大公约数（gcd）的步骤如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 判断6和7是否相等：不相等。</span></span><br><span class="line"><span class="string">2. 判断6和7大小关系，7 &gt; 6，所以用更大的数7减去较小的数6得到结果1。</span></span><br><span class="line"><span class="string">3. 现在计算6和1的最大公约数。</span></span><br><span class="line"><span class="string">4. 6 &gt; 1，根据算法用更大的数6减去较小的数1得到结果5。</span></span><br><span class="line"><span class="string">5. 再计算5和1的最大公约数。</span></span><br><span class="line"><span class="string">6. 5 &gt; 1，用5减去1得到结果4。</span></span><br><span class="line"><span class="string">7. 再计算4和1的最大公约数。</span></span><br><span class="line"><span class="string">8. 4 &gt; 1，用4减去1得到结果3。</span></span><br><span class="line"><span class="string">9. 再计算3和1的最大公约数。</span></span><br><span class="line"><span class="string">10. 3 &gt; 1，用3减去1得到结果2。</span></span><br><span class="line"><span class="string">11. 再计算2和1的最大公约数。</span></span><br><span class="line"><span class="string">12. 2 &gt; 1，用2减去1得到结果1。</span></span><br><span class="line"><span class="string">13. 最后计算1和1的最大公约数，两数相等，gcd即为这两个数，也就是1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">因此，6和7的最大公约数是1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">答案是：C.&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="comment"># 调用主函数</span></span><br><span class="line">    return_list = main(<span class="string">&#x27;round1_test_data.jsonl&#x27;</span>, <span class="string">&#x27;upload.jsonl&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主函数，主要就是调用上述方法，让模型对题目进行推理。也没啥好讲的。</p><h2 id="2-3-纠正和容错"><a href="#2-3-纠正和容错" class="headerlink" title="2.3 纠正和容错"></a>2.3 纠正和容错</h2><h3 id="2-3-1-has-complete-answer"><a href="#2-3-1-has-complete-answer" class="headerlink" title="2.3.1 has_complete_answer"></a>2.3.1 has_complete_answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_complete_answer</span>(<span class="params">questions</span>):</span><br><span class="line">    <span class="comment"># 这里假设完整答案的判断逻辑是：每个question都有一个&#x27;answer&#x27;键</span></span><br><span class="line">    <span class="keyword">for</span> question <span class="keyword">in</span> questions:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;answer&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> question:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>检查答案是否完整，如果question有answer返回真，没有就返回假。</p><h3 id="2-3-2-filter-problems"><a href="#2-3-2-filter-problems" class="headerlink" title="2.3.2 filter_problems"></a>2.3.2 filter_problems</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_problems</span>(<span class="params">data</span>):</span><br><span class="line">    result = []</span><br><span class="line">    problem_set = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># print(&#x27;处理的item&#x27; ,item)</span></span><br><span class="line">        problem = item[<span class="string">&#x27;problem&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> problem <span class="keyword">in</span> problem_set:</span><br><span class="line">            <span class="comment"># 找到已存在的字典</span></span><br><span class="line">            <span class="keyword">for</span> existing_item <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">if</span> existing_item[<span class="string">&#x27;problem&#x27;</span>] == problem:</span><br><span class="line">                    <span class="comment"># 如果当前字典有完整答案，替换已存在的字典</span></span><br><span class="line">                    <span class="keyword">if</span> has_complete_answer(item[<span class="string">&#x27;questions&#x27;</span>]):</span><br><span class="line">                        existing_item[<span class="string">&#x27;questions&#x27;</span>] = item[<span class="string">&#x27;questions&#x27;</span>]</span><br><span class="line">                        existing_item[<span class="string">&#x27;id&#x27;</span>] = item[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果当前字典有完整答案，添加到结果列表</span></span><br><span class="line">            <span class="keyword">if</span> has_complete_answer(item[<span class="string">&#x27;questions&#x27;</span>]):</span><br><span class="line">                result.append(item)</span><br><span class="line">                problem_set.add(problem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">return_list = filter_problems(return_list)</span><br><span class="line"><span class="comment"># 排序工作 通过id字段后三位代表序号</span></span><br><span class="line">sorted_data = <span class="built_in">sorted</span>(return_list, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="built_in">str</span>(x[<span class="string">&#x27;id&#x27;</span>])[-<span class="number">3</span>:]))</span><br><span class="line"><span class="built_in">print</span>(sorted_data)</span><br></pre></td></tr></table></figure><p>问题过滤器，将所有的问题，存入一个字典，根据id的后三位，进行排序</p><h3 id="2-3-3-find-missing-ids"><a href="#2-3-3-find-missing-ids" class="headerlink" title="2.3.3 find_missing_ids"></a>2.3.3 find_missing_ids</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_missing_ids</span>(<span class="params">dict_list</span>):</span><br><span class="line">    <span class="comment"># 提取所有序号</span></span><br><span class="line">    extracted_ids = &#123;<span class="built_in">int</span>(d[<span class="string">&#x27;id&#x27;</span>][-<span class="number">3</span>:]) <span class="keyword">for</span> d <span class="keyword">in</span> dict_list&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建0-500的序号集合</span></span><br><span class="line">    all_ids = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">500</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 找出缺失的序号</span></span><br><span class="line">    missing_ids = all_ids - extracted_ids</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(missing_ids)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例字典列表</span></span><br><span class="line">dict_list = sorted_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出缺失的序号</span></span><br><span class="line">missing_ids = find_missing_ids(dict_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;缺失的序号:&quot;</span>, missing_ids)</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(missing_ids)</span><br></pre></td></tr></table></figure><p>这段代码，就是将没有返回响应的题目找出来。返回了一个缺失题目的id集合。</p><h3 id="2-3-4-补错"><a href="#2-3-4-补错" class="headerlink" title="2.3.4  补错"></a>2.3.4  补错</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data  = []</span><br><span class="line">with open(&#x27;round1_test_data.jsonl&#x27;) as reader:</span><br><span class="line">    for id,line in enumerate(reader):</span><br><span class="line">        if(id in missing_ids):</span><br><span class="line">            sample = json.loads(line)</span><br><span class="line">            for question in sample[&#x27;questions&#x27;]:</span><br><span class="line">                question[&#x27;answer&#x27;] = &#x27;A&#x27;</span><br><span class="line">            sorted_data.append(sample)</span><br><span class="line">sorted_data = sorted(sorted_data, key=lambda x: int(str(x[&#x27;id&#x27;])[-3:]))</span><br></pre></td></tr></table></figure><p>这段代码就是将2.3.3中缺失响应的题目的答案，固定填写为A。Datawhale的讲义中讲到，可以再推一遍，然后填写到这里。<strong>不过会加长运行时间</strong>。</p><h3 id="2-3-5-输出结果"><a href="#2-3-5-输出结果" class="headerlink" title="2.3.5 输出结果"></a>2.3.5 输出结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;upload.jsonl&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> sorted_data:</span><br><span class="line">        writer.write(json.dumps(sample, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">        writer.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>没啥可讲的，了解。</p><h1 id="三、理解"><a href="#三、理解" class="headerlink" title="三、理解"></a>三、理解</h1><p>通过代码的阅读，我们可以知道，Baseline到底带着我们干了什么。</p><p>主要就是生成提示词，调用模型，对问题进行推理，对模型返回的答案进行处理（记录、纠错、容错），输出结果。</p><p>周围好多人跟我说，你这不就是跟着Datawhale学了一下怎么调用API嘛。</p><p>非也！其实本Task，我起码了解的Prompt提示工程。在推理过程中，也产生了一些自己的想法和疑问。在专业助教老师没有讲解的情况下，作为一个成年人，一个“优秀”的新时代青年，一个“牛X” 的程序员。我们完全可以将想法和疑问，交给大模型，让大模型来对我们的想法和疑问进行分析和解答。</p><p>学会学习，不能读死书，掌握灵活的学习方法，先进的学习工具，才能让我们更快地进步。</p><p>声明如下：</p><p>本篇文章提示工程章节，参考了Datawhale助教老师讲义以及同义千问的解答。代码阅读部分，参考了Datawhale助教老师的讲义，根据自己的理解进行了梳理。</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      <category domain="https://log.660066.xyz/tags/Datawhale/">Datawhale</category>
      
      
      <comments>https://log.660066.xyz/2024/07/30/datawhale-task2-read-baseline/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Datawhale AI 夏令营】Task1-体验一站式baseline</title>
      <link>https://log.660066.xyz/2024/07/25/datawhale-task1-baseline/</link>
      <guid>https://log.660066.xyz/2024/07/25/datawhale-task1-baseline/</guid>
      <pubDate>Thu, 25 Jul 2024 05:06:29 GMT</pubDate>
      
      <description>【Datawhale AI 夏令营】Task1-体验一站式baseline</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、报名赛事"><a href="#一、报名赛事" class="headerlink" title="一、报名赛事"></a>一、报名赛事</h1><p>赛事链接：<a href="http://competition.sais.com.cn/competitionDetail/532231/format">http://competition.sais.com.cn/competitionDetail/532231/format</a></p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721884413556.png" alt="QQ_1721884413556" style="zoom:50%;"><p>然后创建团队</p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721884514263.png" alt="QQ_1721884514263" style="zoom:50%;"><h1 id="二、申请阿里的大模型SK"><a href="#二、申请阿里的大模型SK" class="headerlink" title="二、申请阿里的大模型SK"></a>二、申请阿里的大模型SK</h1><p>链接：<a href="https://dashscope.console.aliyun.com/apiKey">https://dashscope.console.aliyun.com/apiKey</a></p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721884656865.png" alt="QQ_1721884656865" style="zoom:50%;"><p><strong>不能发给别人！不能发给别人！不能发给别人！</strong></p><h1 id="三、启动魔搭社区的NoteBook"><a href="#三、启动魔搭社区的NoteBook" class="headerlink" title="三、启动魔搭社区的NoteBook"></a>三、启动魔搭社区的NoteBook</h1><p>链接：<a href="https://www.modelscope.cn/my/mynotebook/preset">https://www.modelscope.cn/my/mynotebook/preset</a></p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721884791160.png" alt="QQ_1721884791160" style="zoom:50%;"><h1 id="四、体验一站式Baseline"><a href="#四、体验一站式Baseline" class="headerlink" title="四、体验一站式Baseline"></a>四、体验一站式Baseline</h1><h2 id="4-1-下载代码和测试集"><a href="#4-1-下载代码和测试集" class="headerlink" title="4.1 下载代码和测试集"></a>4.1 下载代码和测试集</h2><p>代码:<a href="https://datawhaler.feishu.cn/wiki/LSaUwltKAiZxuXk12gBcABCmnfd#ZVeUdvzcToplOnxhJlXcyvLtnDb">https://datawhaler.feishu.cn/wiki/LSaUwltKAiZxuXk12gBcABCmnfd#ZVeUdvzcToplOnxhJlXcyvLtnDb</a></p><p>测试集：<a href="https://datawhaler.feishu.cn/wiki/LSaUwltKAiZxuXk12gBcABCmnfd#STZMd1z65o78itxbFXec0n5hnxe">https://datawhaler.feishu.cn/wiki/LSaUwltKAiZxuXk12gBcABCmnfd#STZMd1z65o78itxbFXec0n5hnxe</a></p><h2 id="4-2-在NoteBook中上传代码和测试集文件"><a href="#4-2-在NoteBook中上传代码和测试集文件" class="headerlink" title="4.2 在NoteBook中上传代码和测试集文件"></a>4.2 在NoteBook中上传代码和测试集文件</h2><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885001973.png" alt="QQ_1721885001973"></p><h2 id="4-3-填写API的SK"><a href="#4-3-填写API的SK" class="headerlink" title="4.3 填写API的SK"></a>4.3 填写API的SK</h2><p>在baseline01.ipynb文件，图中位置填写阿里的大模型API的SK</p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885265660.png" alt="QQ_1721885265660" style="zoom:50%;"><h2 id="4-4-运行baselien"><a href="#4-4-运行baselien" class="headerlink" title="4.4 运行baselien"></a>4.4 运行baselien</h2><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885342327.png" alt="QQ_1721885342327"></p><h2 id="4-5-运行完成标记"><a href="#4-5-运行完成标记" class="headerlink" title="4.5 运行完成标记"></a>4.5 运行完成标记</h2><p>当All tasks finished!出现，baseline运行完成。</p><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885405588.png" alt="QQ_1721885405588"></p><h1 id="五、提交结果，吃果子"><a href="#五、提交结果，吃果子" class="headerlink" title="五、提交结果，吃果子"></a>五、提交结果，吃果子</h1><p>右键文件列表，刷新一下文件列表，右键upload.jsonl文件，下载到本地。</p><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885467949.png" alt="QQ_1721885467949"></p><p>返回赛事页面</p><p>赛事链接：<a href="http://competition.sais.com.cn/competitionDetail/532231/format">http://competition.sais.com.cn/competitionDetail/532231/format</a></p><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885547064.png" alt="QQ_1721885547064"></p><p>提交结果，等待系统分析完成，查看我的成绩。</p><p><img src="/2024/07/25/datawhale-task1-baseline/QQ_1721885695879.png" alt="QQ_1721885695879"></p><h1 id="六、打卡"><a href="#六、打卡" class="headerlink" title="六、打卡"></a>六、打卡</h1><p>快去！快去！</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      <category domain="https://log.660066.xyz/tags/Datawhale/">Datawhale</category>
      
      
      <comments>https://log.660066.xyz/2024/07/25/datawhale-task1-baseline/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大模型的必知必会【专业术语】</title>
      <link>https://log.660066.xyz/2024/06/17/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%90%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E3%80%91/</link>
      <guid>https://log.660066.xyz/2024/06/17/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%90%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E3%80%91/</guid>
      <pubDate>Mon, 17 Jun 2024 02:49:12 GMT</pubDate>
      
      <description>大模型的必知必会【专业术语】</description>
      
      
      
      <content:encoded><![CDATA[<table><thead><tr><th>名称</th><th>英文</th><th>解释</th></tr></thead><tbody><tr><td>大型语言模型</td><td>Large Language Model(LLM)</td><td>一类规模庞大、参数数量众多的深度学习模型，特别是在自然语言处理（NLP）领域。</td></tr><tr><td>机器视觉</td><td>CV</td><td>主要研究如何让机器“看”并理解图像和视频中的内容。</td></tr><tr><td>自然语言处理</td><td>NLP</td><td>专注于让机器理解和生成人类的自然语言（如英语、汉语等）。</td></tr><tr><td>预训练</td><td>Pre-training</td><td>一种机器学习方法，先在大量无标签数据上对模型进行训练，让模型学习到通用的语言结构或图像特征。<br>之后，这个预训练好的模型可以被微调（fine-tune）来执行特定任务，比如问答、翻译等。</td></tr><tr><td>参数量</td><td>Parameter Count</td><td>参数量是指模型中所有可学习权重的总数。<br>开源项目名称中往往带有xB的字样，B代表十亿，7B就是70亿参数量的模型。<br>大模型往往拥有数亿乃至上千亿的参数，这使得它们能够捕获更复杂的语言或图像模式。</td></tr><tr><td>Transformer架构</td><td></td><td>一种革命性的神经网络架构，特别适合处理序列数据，如文本。<br>它通过自注意力机制（Self-Attention Mechanism）让模型能并行处理输入序列中的每个部分，大大提高了处理速度和理解能力。</td></tr><tr><td>微调</td><td>FineTuning</td><td>当一个预训练模型被用于特定任务时，通过在预训练的基础上，使用特定任务的数据对其进行进一步训练，这一过程称为微调。<br>这样可以让模型学会解决特定问题，同时保留其从大量数据中学到的一般知识。</td></tr><tr><td>指令微调</td><td>Instruction FineTuning</td><td>针对已经存在的预训练模型，给出额外的指令或者标注数据集来提升模型的性能。</td></tr><tr><td>上下文理解</td><td>Contextual Understanding</td><td>指模型能够根据句子或图像的上下文来理解单个词语或元素的含义。<br>大模型在这方面表现出色，能准确把握“这个”具体指代什么，基于前面的文本或图像内容。</td></tr><tr><td>生成能力</td><td>Generative Capabilities</td><td>大模型不仅能够理解输入，还能生成连贯、有创意的新文本、图像或其他形式的内容。<br>例如，可以要求模型根据开头生成一个完整的故事。</td></tr><tr><td>嵌入</td><td>Embedding</td><td>将高维数据（如词汇、句子或图像）转换为低维向量的过程，使得相似的输入在向量空间中距离较近。<br>这是大模型理解复杂数据的基础。</td></tr><tr><td>注意力机制</td><td>Attention Mechanism</td><td>一种允许模型在处理输入时有选择地关注某些部分而非平均对待所有部分的技术。<br>这对于长序列理解和生成至关重要。</td></tr><tr><td>过拟合</td><td>Overfitting</td><td>学到了数据中的普遍规律，还错误地记忆了训练数据中的噪声和偶然特性。过于依赖训练数据中的特定细节，而没有很好地泛化到新情况。</td></tr><tr><td>欠拟合</td><td>Underfitting</td><td>未能充分学习到数据中的模式和规律，导致模型在训练数据上表现不佳，同时在新数据上的表现也不会好。这意味着模型太简单，无法捕捉到数据中的复杂关系。</td></tr><tr><td>过参数化</td><td>Overparameterization</td><td>大模型通常远超完成任务所需的最少参数数量，这种设计有助于模型更好地拟合数据，减少欠拟合风险，但也可能增加过拟合风险。</td></tr><tr><td>分布式训练</td><td>Distributed Training</td><td>由于计算和内存需求巨大，大模型的训练通常需要在多个GPU或服务器之间分配任务，这称为分布式训练。</td></tr><tr><td>语料库</td><td>Corpus</td><td>训练机器学习模型所需的数据集，特别是对于语言模型而言，语料库包含大量的文本数据。<br>高质量、多样化的语料库对于训练出高性能的生成模型至关重要</td></tr><tr><td>困惑度</td><td>Perplexity</td><td>评估语言模型性能的一个指标，它衡量模型对测试数据的不确定度。一个较低的困惑度表明模型能更好地预测给定文本的概率分布，通常意味着更好的性能。</td></tr><tr><td>幻觉</td><td>Hallucination</td><td>系统产生的错误感知或不真实的输出，这些输出没有直接依据于输入数据或现实世界的事实，而是源于模型内部的偏差、过拟合、或随机性。<br>语言模型生成的文本包含了不准确的信息、逻辑错误、或者与上下文不符的内容</td></tr><tr><td>量化模型技术</td><td>Quantization Techniques</td><td>机器学习和深度学习领域中的一种优化方法，主要用于减少模型的计算资源需求和存储空间占用，同时尽可能地保持模型的性能。<br>在不改变模型架构的前提下，量化技术通过将模型中的权重和激活值（即神经网络中间层的输出）从高精度的浮点数转换为低精度（如8位、4位甚至1位）的整数表示，从而实现这一目标。</td></tr><tr><td>GPTQ</td><td>Gradient-based Post-Training Quantization</td><td>基于梯度的后训练量化技术。GPTQ通过利用模型的梯度信息来指导量化过程，寻找最佳的低精度权重表示，以此最小化量化后的性能损失。<br>这种方法可以在不牺牲太多精度的情况下显著减小模型体积，加速推理速度，对于部署大型语言模型特别有用。</td></tr><tr><td>KV Cache 量化</td><td>Key-Value Cache</td><td>一种用于高效实现自注意力机制（Self-Attention）的关键技术。在自注意力计算过程中，模型需要保存前向传播中的“key”和“value”向量，以便后续计算中重用，这大大减少了计算复杂度。<br>然而，这些缓存数据占用了大量内存，尤其是在处理长序列时。</td></tr><tr><td>令牌</td><td>Token</td><td>文本数据处理中最小的、不可分割的意义单位</td></tr><tr><td>基于人工反馈的强化学习</td><td>RLHF<br>Reinforcement Learning from Human Feedback</td><td>构建人类反馈数据集，训练一个激励模型，模仿人类偏好对结果打分，这是GPT-3后时代大语言模型越来越像人类对话核心技术。</td></tr><tr><td>涌现</td><td>Emergence</td><td>创发、突现、呈展、演生，是一种现象。许多小实体相互作用后产生了大实体，而这个大实体展现了组成它的小实体所不具有的特性。<br>模型规模达到一定阈值以上后，会在多步算术、大学考试、单词释义等场景的准确性显著提升，称为涌现。</td></tr><tr><td>泛化</td><td>Generalization</td><td>模型泛化是指一些模型可以应用（泛化）到其他场景，通常为采用迁移学习、微调等手段实现泛化。</td></tr><tr><td>思维链</td><td>Chain-of-Thought<br>CoT</td><td>通过让大语言模型（LLM）将一个问题拆解为多个步骤，一步一步分析，逐步得出正确答案。需指出，针对复杂问题，LLM直接给出错误答案的概率比较高。思维链可以看成是一种指令微调。</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>未完待续……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">本文参考文献、工具如下：</span><br><span class="line">工具：通义千问</span><br><span class="line">链接：https://tongyi.aliyun.com/qianwen</span><br><span class="line"></span><br><span class="line">作者：GoAi</span><br><span class="line">标题：《深入浅出LLM基础篇》（一）：大模型概念与发展</span><br><span class="line">链接：https://juejin.cn/post/7345404998165135371</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://log.660066.xyz/tags/AI/">AI</category>
      
      
      <comments>https://log.660066.xyz/2024/06/17/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%90%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E3%80%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-9|Docx4j的分页和分节</title>
      <link>https://log.660066.xyz/2024/06/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-9-Docx4j%E7%9A%84%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E8%8A%82/</link>
      <guid>https://log.660066.xyz/2024/06/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-9-Docx4j%E7%9A%84%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E8%8A%82/</guid>
      <pubDate>Mon, 03 Jun 2024 03:40:18 GMT</pubDate>
      
      <description>Docx4j开发手册-9|Docx4j的分页和分节</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、分页"><a href="#一、分页" class="headerlink" title="一、分页"></a>一、分页</h1><h2 id="1-1-分页标记"><a href="#1-1-分页标记" class="headerlink" title="1.1 分页标记"></a>1.1 分页标记</h2><p>分页标记目前共发现了两种：</p><ol><li>第一种是Br对象</li><li>第二种是R.LastRenderedPageBreak对象</li></ol><h2 id="1-2-主要区别"><a href="#1-2-主要区别" class="headerlink" title="1.2 主要区别"></a>1.2 主要区别</h2><table><thead><tr><th>Br</th><th>R.LastRenderedPageBreak</th></tr></thead><tbody><tr><td>可以用于实现文本的换行，但它本身并不是一个分页标记。标准的 <code>Br</code> 是简单的换行，即在同一段落内开始新的一行。不过，docx4j以及Word等文字处理软件中也支持一种特殊的换行类型，如 <code>Br.Type.PAGE</code>，这种类型的换行可以强制分页，即在该换行处开始新的一页。但通常所说的 <code>Br</code> 默认指的是软换行，而非强制分页。</td><td>不是一个常见的手动插入的分页标记，是Word在处理文档时内部使用的一种记录机制，用来标记文档在上次渲染时每一页的结束位置。它更多地是作为一个元数据或者系统使用的标记，帮助Word记住文档的页面布局状态，而不是直接用于文档内容的格式设置。因此，它不是用户直接操控的分页，而是一个反映文档渲染历史状态的元素。</td></tr></tbody></table><h2 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h2><p>在判断是否换页时，应以Br对象为准，R.LastRenderedPageBreak只是word计算出的一个临时变量。</p><h1 id="二、分节"><a href="#二、分节" class="headerlink" title="二、分节"></a>二、分节</h1><h2 id="2-1-分节标记"><a href="#2-1-分节标记" class="headerlink" title="2.1 分节标记"></a>2.1 分节标记</h2><p>分节标记也是两种：</p><ol><li>第一种是在P对象的ppr属性中的sectPr对象</li><li>第二种是在body最后的sectPr对象</li></ol><h2 id="2-2-主要区别"><a href="#2-2-主要区别" class="headerlink" title="2.2 主要区别"></a>2.2 主要区别</h2><table><thead><tr><th>ppr属性中的sectPr对象</th><th>body最后的sectPr对象</th></tr></thead><tbody><tr><td>全文只有一个章节时，不会出现。<br>最后一章节无ppr属性中的sectPr对象</td><td>一定会出现，代表了全文最后一个章节。<br></td></tr></tbody></table><h2 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h2><p>章节不存在单独的对象，以段落配置中的SectPr属性存在</p><p>全文单章节时，以body最后的sectPr对象为准</p><p>全文多个章节时，除了最后一个章节使用body最后的sectPr对象，其他的使用段落样式中的sectPr</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2024/06/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-9-Docx4j%E7%9A%84%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E8%8A%82/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通过策略模式消除冗长的if块</title>
      <link>https://log.660066.xyz/2024/04/24/%E9%80%9A%E8%BF%87%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4%E5%86%97%E9%95%BF%E7%9A%84if%E5%9D%97/</link>
      <guid>https://log.660066.xyz/2024/04/24/%E9%80%9A%E8%BF%87%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4%E5%86%97%E9%95%BF%E7%9A%84if%E5%9D%97/</guid>
      <pubDate>Wed, 24 Apr 2024 02:42:28 GMT</pubDate>
      
      <description>通过策略模式消除冗长的if块（非原创，仅作为个人学习笔记使用）</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、场景："><a href="#一、场景：" class="headerlink" title="一、场景："></a>一、场景：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (很复杂的条件A)&#123;</span><br><span class="line">      <span class="comment">// 此处省略很复杂的逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (很复杂的条件B)&#123;</span><br><span class="line">      <span class="comment">// 此处省略很复杂的逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (很复杂的条件C)&#123;</span><br><span class="line">      <span class="comment">// 此处省略很复杂的逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (很复杂的条件D)&#123;</span><br><span class="line">      <span class="comment">// 此处省略很复杂的逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (很复杂的条件E)&#123;</span><br><span class="line">      <span class="comment">// 此处省略很复杂的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码，工作中经常遇到这种场景，导致代码的可读性较差。对后续代码的扩展维护来说，是巨大的灾难。</p><p>以上代码有以下几点问题：</p><ol><li><p>后续增加任何功能，都需要在原来耦合的代码里添加代码，有可能会影响原有功能。</p></li><li><p>没有做到开闭原则，一段良好的代码需要做到对扩展开发，对修改关闭。</p></li><li><p>校验的逻辑都在一个类中，导致这个类中的代码很多，从而影响了代码的可读性、可维护性。</p></li><li><p>if-else条件判断很难懂，无法判断某个条件中的校验到底是校验哪种校验类型，每次查看这段代码都要研究好久。</p></li></ol><h1 id="二、解决："><a href="#二、解决：" class="headerlink" title="二、解决："></a>二、解决：</h1><p>使用策略工厂模式来解决以上问题，把每种校验的方式封装起来，然后通过策略工厂模式来路由下发，把冗长的代码解耦出来，形成了一套框架，并且保证了代码的扩展性。</p><h2 id="2-1-创建策略工厂类"><a href="#2-1-创建策略工厂类" class="headerlink" title="2.1 创建策略工厂类"></a>2.1 创建策略工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;CheckStrategySelector, InterfaceCheck&gt; strategyRegistry = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheckStrategyFactory</span><span class="params">(ACheck aCheck, BCompare bCompare, CCheck cCheck, DCheck dCheck,</span></span><br><span class="line"><span class="params">                                ASelector aSelector,BSelector bSelector,CSelector cSelector,DSelector dSelector)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在构造函数或初始化块中注册所有策略</span></span><br><span class="line">        strategyRegistry.put(aSelector, aCheck);</span><br><span class="line">        strategyRegistry.put(bSelector, bCompare);</span><br><span class="line">        strategyRegistry.put(cSelector, cCheck);</span><br><span class="line">        strategyRegistry.put(dSelector, dCheck);</span><br><span class="line">        <span class="comment">// ... 注册更多策略 ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InterfaceCheck <span class="title function_">getStrategy</span><span class="params">(MatcheA ma, MatcheB mb)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;CheckStrategySelector, InterfaceCheck&gt; entry : strategyRegistry.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().matches(ma, mb)) &#123;</span><br><span class="line">                <span class="keyword">return</span> entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 兜底检查策略返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-创建策略选择接口和校验接口"><a href="#2-2-创建策略选择接口和校验接口" class="headerlink" title="2.2 创建策略选择接口和校验接口"></a>2.2 创建策略选择接口和校验接口</h2><p>创建2个接口，一个策略选择接口CheckStrategySelector，一个校验接口InterfaceCheck。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckStrategySelector</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(MatcheA ma, MatcheB mb)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceCheck</span> &#123;</span><br><span class="line">    CheckOutputModel <span class="title function_">check</span><span class="params">(CheckA ca, CheckB cb)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-实现策略选择接口和校验接口"><a href="#2-3-实现策略选择接口和校验接口" class="headerlink" title="2.3 实现策略选择接口和校验接口"></a>2.3 实现策略选择接口和校验接口</h2><p>再创建4个策略类和4个校验类分别实现策略选择接口CheckStrategySelector和校验接口InterfaceCheck。</p><p>下面仅展示一个，其他省略。</p><p>策略选择实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASelector</span> <span class="keyword">implements</span> <span class="title class_">CheckStrategySelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(MatcheA ma, MatcheB mb)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据参数判断是否符合该策略</span></span><br><span class="line">        <span class="keyword">return</span> ma &amp;&amp; mb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;aCheck&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ACheck</span> <span class="keyword">implements</span> <span class="title class_">InterfaceCheck</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CheckOutputModel <span class="title function_">check</span><span class="params">(CheckA ca, CheckB cb)</span> &#123;</span><br><span class="line">        <span class="comment">// 具体实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-改造if判断"><a href="#2-4-改造if判断" class="headerlink" title="2.4 改造if判断"></a>2.4 改造if判断</h2><p>最后“场景”章节中的if判断语句块，改造如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;commonCheckHandler&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCheckHandler</span> <span class="keyword">implements</span> <span class="title class_">CheckHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CheckStrategyFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonCheckHandler</span><span class="params">(CheckStrategyFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CheckOutputModel <span class="title function_">doHandle</span><span class="params">(A paramA, B paramB, C paramC)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CheckOutputModel</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckOutputModel</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">MatcheA</span> <span class="variable">ma</span> <span class="operator">=</span> paramA.getMatcheA(); </span><br><span class="line">        <span class="type">MatcheB</span> <span class="variable">mb</span> <span class="operator">=</span> paramB.getMatcheB();</span><br><span class="line"></span><br><span class="line">        <span class="type">InterfaceCheck</span> <span class="variable">interfaceCheckStrategy</span> <span class="operator">=</span> factory.getStrategy(ma, mb);</span><br><span class="line">        <span class="keyword">if</span>(interfaceCheckStrategy != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> interfaceCheckStrategy.check(paramC.getCheckA(), paramC.getCheckB());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.setSuccess(<span class="literal">false</span>);</span><br><span class="line">            result.setErrorCode(<span class="string">&quot;未找到对应的校验策略&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上通过策略工厂模式把那段代码拆成了多个文件，通过策略工厂模式把冗长的if-else代码给分解了。</p><p><img src="/2024/04/24/%E9%80%9A%E8%BF%87%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4%E5%86%97%E9%95%BF%E7%9A%84if%E5%9D%97/image-20240424104040010.png" alt="原作者的图片，结构参考"></p><p>重构之后，创建了工厂类，由工厂类中的策略判断逻辑来决定是哪一种策略类型，在运行时动态确定使用哪种策略，最终路由到对应的校验方法里。</p><ol><li><p>重构后的代码符合了开闭原则，添加新策略的时候，最小化、集中化代码改动、减少引入bug的风险。</p></li><li><p>重构后的代码解耦了之前代码的复杂度，解耦了策略的定义、创建和使用，控制代码复杂度，让每个部分的代码不至于太复杂、代码量过多。现在每个类的代码基本上在一显示屏就能展示完成。</p></li><li><p>增加了代码的可读性和可维护性。</p></li></ol><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>不是所有if-else分支都是烂代码，只要if-else分支不复杂，代码不多，这并没有问题，只要遵循KISS原则，怎么简单怎么来，就是最好的设计。</p><p>一旦if-else分支很多，且每个分支都包含很多复杂的逻辑判断，这个时候就可以考虑是不是通过策略模式可以更清晰的梳理代码，使得代码维护性更强。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">本文为个人知识学习，非原创！非作者！如本博客有侵权行为，请与我联系。</span><br><span class="line">摘录以下文章，内容根据个人需求有所删减，尊重知识产出，尊重作者知识劳动成果。</span><br><span class="line"></span><br><span class="line">作者：阿里云开发者 汪峰(蔚风)</span><br><span class="line">链接：https://mp.weixin.qq.com/s/tg4vTL6_TI-tnxaMyVLhsA</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E5%BC%80%E5%8F%91%E7%BA%AA%E5%AE%9E/">开发纪实</category>
      
      
      <comments>https://log.660066.xyz/2024/04/24/%E9%80%9A%E8%BF%87%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4%E5%86%97%E9%95%BF%E7%9A%84if%E5%9D%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>世界这么大我想去看看-1</title>
      <link>https://log.660066.xyz/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/</link>
      <guid>https://log.660066.xyz/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/</guid>
      <pubDate>Sat, 20 Apr 2024 09:34:15 GMT</pubDate>
      
      <description>清明假期旅游记录</description>
      
      
      
      <content:encoded><![CDATA[<p>清明假期属实短，就三天，这三天回家的话，一天的时候浪费在了路上，由于下个月劳动节放五天，所以打算劳动节再回家。</p><p>于是我打算去拜访一下我远在苏州的，大学时期睡在我上铺的兄弟。</p><p>抢票走起！</p><p><strong>注意流水账记录！注意流水账记录！注意流水账记录！</strong></p><h1 id="纪念品"><a href="#纪念品" class="headerlink" title="纪念品"></a>纪念品</h1><p>先瞧瞧这次出门的纪念品</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/微信图片_20240420174336.png" alt="微信图片_20240420174336" style="zoom: 50%;"><p>三天跑了两个地，苏州、上海。高铁的报销凭证必须打出来，留个纪念。还买了两张地铁票，分别是上海和苏州的。不得不说上海的地铁APP起的名字太好玩了，“大都会”，哈哈哈哈。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/mxp1.jpg" alt="mxp1" style="zoom:50%;"><p>苏州博物馆的明信片，不是很贵，好像才2块钱一张，本来想在苏州找个邮局寄给朋友，最后由于时间太紧张，没找到近的邮局邮寄，也就不了了之了。这些明信片后面还盖了印章，这里就不放出来看了。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/mxp2.jpg" alt="mxp2" style="zoom:50%;"><p>这是在上海博物馆买的明信片，后面也盖了上海博物馆的印章</p><h1 id="苏州"><a href="#苏州" class="headerlink" title="苏州"></a>苏州</h1><p>姑苏城外寒山寺，夜半钟声到客船。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175323654.png" alt="image-20240420175323654" style="zoom:50%;"><p>寒山寺的塔？对建筑不是很了解，反正是寒山寺里最高的建筑了。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175353056.png" alt="image-20240420175353056" style="zoom:50%;"><p>这地必须拍照，小红书和抖音上，最多的寒山寺照片。可能是清明节的原因，这里有围挡围着，不能靠近，只能在外面拍个照了。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175403800.png" alt="image-20240420175403800" style="zoom:50%;"><p>来上香的游客络绎不绝，我只是看看，我上不了一点。我个人对宗教一点不感冒，甚至有点反感，坚定地无神论者和唯物主义者。我不反对别人信仰宗教，那是你们的权利，但是请不要向我宣传，我不信仰宗教也是我的权利。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175420151.png" alt="image-20240420175420151" style="zoom:50%;"><p>这是麒麟？还是貔貅？我记得当时下面的石墩上写了是啥，我给忘了。不知道哪位人才，给神兽上供了香烟，哈哈哈哈。</p><p>神兽：抽不了一点，不是华子，抽着咳嗽。</p><p>看看神兽前面的这个小球，都给摸脱色了。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175440280.png" alt="image-20240420175440280" style="zoom:50%;"><p>京杭大运河——苏州段。当年隋炀帝的重要功绩之一，加强了南北的文化交流。在这里看了一会，看到了不少的船，我大学室友跟我说，好像还有济宁的船有时候经过，我到是知道，济宁有京杭运河的港口。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175433805.png" alt="image-20240420175433805" style="zoom:50%;"><p>苏州博物馆！很有艺术气息，很不错，博物馆空间也不小，当时去的时候，陈国公主的面具也在这展出呢。不过感觉这个金面具挺丑的，有点抽象，不知道是不是在墓穴里被压坏了，总之是挺丑的。</p><h1 id="上海"><a href="#上海" class="headerlink" title="上海"></a>上海</h1><p>行，第二天，魔都上海。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175624518.png" alt="image-20240420175624518" style="zoom:50%;"><p>到了上海虹桥高铁站，早上早早起来，直奔高铁站，去上海，路程好像40分钟左右，很快。乘车的时候还有个小插曲，高铁上有乘客突发身体不适，乘务员广播寻找医务人员。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175532267.png" alt="image-20240420175532267" style="zoom:50%;"><p>刚开业的Apple Store（静安店），作为果粉，那得打个卡。里面人山人海，空间十份的大，设计也很不错，而且，这个店直通地铁站。</p><p>去年iPhone15首发，首售当天，在北京西单大悦城提货了iPhone15 Pro 蓝色钛金属 256G版本。没几天又提了个AppleWatch S8，完全是受限于我的经济条件，买了S8，不过也没太大关系，实际体验与S9差距不大。我主要用来当闹钟，绑手上能震醒我。</p><p>（别给我提什么XX品牌哈，用苹果产品跟爱不爱国无关，你愿意用XX就用，我还是那句话，用是你的权利，不用是我的权利。你要非得讲，那我有个XX鼠标，你是不是没有？什么！没有？那你不爱国！）</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175615381.png" alt="image-20240420175615381" style="zoom:50%;"><p>魔都外滩，这里肯定是要来的，毕竟是最著名的地方了。东方明珠直冲云霄。本来我大学室友想带我去做一下轮渡的，结果附近那个2元轮渡关门了，大喇叭喊，要往另一个方向走很远才行，就放弃了。</p><p>后面再东方明珠下面吃了个饭，麦当劳，哈哈哈哈没错，麦当劳，其他的是在是排不上队。</p><p>吃完饭，在东方明珠的过街天桥吗哪算是？看下面环形岛交警查车，看了得一个小时，给交警叔叔算了算，一小会就罚了多人哈哈哈哈，根本停不下来，罚单打印机那个纸都续不叠了哈哈哈。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175540127.png" alt="image-20240420175540127" style="zoom:50%;"><p>上海博物馆的老馆，没啥可说的，里面几乎腾空了，都搬去了新馆。</p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420175546613.png" alt="image-20240420175546613" style="zoom:50%;"><p>这里值得提提了，上海金融交易广场！沪市所在地，上海证券交易所所在的位置。在门口问了一下保安小哥，不能进广场，需要又工作证件才能进，也就在门口这拍了点照片。</p><p>到是听说有个铜牛在这，也没仔细去逛，主要是当时穿的鞋不好，脚上磨起泡来了，当时就想速回苏州修养。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>之前去过北京，这次去过上海。感觉这些超大城市也就这么回事吧。其实我对上海这种超大型城市并没有什么向往，要不也不至于在泉城济南上班。我还是觉得，像济南这种城市，对我来说更友好，可以让我的生活质量更高，活的更舒服自在。</p><p>但是我也接受不了像老家的那种小县城。我不是说不喜欢，我认为我老家的小县城，教育资源是在是差劲，我不想让我的孩子最后也接受那种差劲的教育资源，所以像济南、青岛更适合我，既不用面对那么大的生活压力和快节奏，又能享受到不错的资源。</p><p>下一次出门，很有可能是我大学室友买车了，我蹭车跟着去自驾游，估计地方也不会太远。如果是出远门的话，我更想去香港或者西藏。去香港是想看看资本主义的世界到底什么样，看看哪里的人的生活方式，饮食习惯等等。去西藏的话，还是想看看哪里的景色，但是有个不得不面对的问题就是，我去了以后会不会有高原反应，所以可能后续先去西藏附近，海拔比较适中的地方先看看会不会有身体不适。</p><p>最后附一张背影照片。</p><p><img src="/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/image-20240420183405246.png" alt="image-20240420183405246"></p><p>于2024年4月20日济南整理</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/%E7%94%9F%E6%B4%BB/">生活</category>
      
      
      <comments>https://log.660066.xyz/2024/04/20/%E4%B8%96%E7%95%8C%E8%BF%99%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-8|Docx4j的目录</title>
      <link>https://log.660066.xyz/2024/03/16/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-8-Docx4j%E7%9A%84%E7%9B%AE%E5%BD%95/</link>
      <guid>https://log.660066.xyz/2024/03/16/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-8-Docx4j%E7%9A%84%E7%9B%AE%E5%BD%95/</guid>
      <pubDate>Fri, 15 Mar 2024 16:41:09 GMT</pubDate>
      
      <description>Docx4j开发手册-8|Docx4j的目录</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>本文将介绍，使用Docx4j自带的目录生成器进行目录生成。使用目录生成器生成时，存在以下几个问题，需特别注意</p><ol><li>目录中的样式无法自定义，需要提前在Styles中配置好</li><li>目录生成时，页码需要依赖其他插件或服务(后面将讲解)</li><li>目录时不能自定义插入文字，需要生成StdBlock对象后，再在StdBlock中插入自定义的段落</li></ol><h1 id="二、引入页号相关依赖"><a href="#二、引入页号相关依赖" class="headerlink" title="二、引入页号相关依赖"></a>二、引入页号相关依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- docx4j目录页号生成所需依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.docx4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docx4j-export-fo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;docx4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页号生成共有两种方式，</p><p>第一种是引用docx4j-export-fo将docx文件到为PDF，进行页号的计算</p><p>第二种是引用Documents4j（它利用 Microsoft Office 的本机 API，通过启动 Microsoft Office 进程来执行文档转换。），通过本地服务，来进行页号计算，这个方法</p><p>第二种方式查阅相关文章后发现，可能需要本地拥有Office才可以正常使用。</p><h1 id="三、生成目录对象"><a href="#三、生成目录对象" class="headerlink" title="三、生成目录对象"></a>三、生成目录对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生成目录对象</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> wordmlPackage 文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> docData       文档数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 目录对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> SdtBlock <span class="title function_">getToc</span><span class="params">(WordprocessingMLPackage wordmlPackage, DocData docData)</span> &#123;</span><br><span class="line">       SdtBlock sdtBlock;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">TocGenerator</span> <span class="variable">tocGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TocGenerator</span>(wordmlPackage);</span><br><span class="line">           <span class="comment">// 设置目录标题，此处填null,标题将不生产</span></span><br><span class="line">           Toc.setTocHeadingText(<span class="string">&quot;目录&quot;</span>);</span><br><span class="line">           sdtBlock = tocGenerator.generateToc(<span class="number">0</span>, TocHelper.DEFAULT_TOC_INSTRUCTION, <span class="literal">false</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DocException</span>(<span class="string">&quot;生成目录时发生异常&quot;</span>, e);</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">return</span> sdtBlock;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-generateToc方法解析"><a href="#3-1-generateToc方法解析" class="headerlink" title="3.1 generateToc方法解析"></a>3.1 generateToc方法解析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generateToc(0, TocHelper.DEFAULT_TOC_INSTRUCTION, false);</span><br></pre></td></tr></table></figure><ol><li>参数1为插入的段落索引</li><li>数2为目录生成指令（参考OpenXml标准）</li><li>参数3为是否跳过页号生成，为false时，必须引入章节二中的依赖</li></ol><p>此处注意，文档中已经存在目录后，不能使用generateToc方法需要使用updataToc方法</p>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2024/03/16/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-8-Docx4j%E7%9A%84%E7%9B%AE%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-7|Docx4j的页码</title>
      <link>https://log.660066.xyz/2024/03/15/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-7-Docx4j%E7%9A%84%E9%A1%B5%E7%A0%81/</link>
      <guid>https://log.660066.xyz/2024/03/15/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-7-Docx4j%E7%9A%84%E9%A1%B5%E7%A0%81/</guid>
      <pubDate>Fri, 15 Mar 2024 01:46:26 GMT</pubDate>
      
      <description>Docx4j开发手册-7|Docx4j的页码</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、创建文档或者读取文档"><a href="#一、创建文档或者读取文档" class="headerlink" title="一、创建文档或者读取文档"></a>一、创建文档或者读取文档</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Docx4JException &#123;</span><br><span class="line">    <span class="type">WordprocessingMLPackage</span> <span class="variable">wmp</span> <span class="operator">=</span> WordprocessingMLPackage.createPackage();</span><br><span class="line">    <span class="comment">// 生成页码</span></span><br><span class="line">    setPageNum(wmp);</span><br><span class="line">    <span class="comment">// 保存文档到指定路径</span></span><br><span class="line">    wmp.save(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/xxxx/xx.docx&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、生成页码相关逻辑"><a href="#二、生成页码相关逻辑" class="headerlink" title="二、生成页码相关逻辑"></a>二、生成页码相关逻辑</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setPageNum</span><span class="params">(WordprocessingMLPackage wmp)</span> <span class="keyword">throws</span> InvalidFormatException &#123;</span><br><span class="line">    <span class="comment">// 创建页脚部分</span></span><br><span class="line">    <span class="type">FooterPart</span> <span class="variable">footerPart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FooterPart</span>();</span><br><span class="line">    footerPart.setPackage(wmp);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 生成并设置页码，对齐方式为左对齐</span></span><br><span class="line">    <span class="type">Ftr</span> <span class="variable">ftr</span> <span class="operator">=</span> pageNumGenerator(JcEnumeration.LEFT);</span><br><span class="line">    footerPart.setJaxbElement(ftr);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 添加页脚部分到文档，并创建页脚的引用关系</span></span><br><span class="line">    <span class="type">Relationship</span> <span class="variable">footerRelationship</span> <span class="operator">=</span> wmp.getMainDocumentPart().addTargetPart(footerPart);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建页脚引用</span></span><br><span class="line">    createFooterReference(wmp, footerRelationship);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、生成一个包含页码的脚注"><a href="#三、生成一个包含页码的脚注" class="headerlink" title="三、生成一个包含页码的脚注"></a>三、生成一个包含页码的脚注</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个包含页码的脚注</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> alignMode 页码的对齐方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个设置好页码的脚注对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Ftr <span class="title function_">pageNumGenerator</span><span class="params">(JcEnumeration alignMode)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个脚注对象、创建一个段落对象</span></span><br><span class="line">    <span class="type">Ftr</span> <span class="variable">ftr</span> <span class="operator">=</span> FACTORY.createFtr();</span><br><span class="line">    <span class="type">P</span> <span class="variable">paragraph</span> <span class="operator">=</span> FACTORY.createP();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取段落属性</span></span><br><span class="line">    <span class="type">PPr</span> <span class="variable">pPr</span> <span class="operator">=</span> paragraph.getPPr();</span><br><span class="line">    <span class="comment">// 如果段落属性不存在，则创建并设置段落属性，包括页码对齐方式</span></span><br><span class="line">    <span class="keyword">if</span> (pPr == <span class="literal">null</span>) &#123;</span><br><span class="line">        pPr = FACTORY.createPPr();</span><br><span class="line">        <span class="type">Jc</span> <span class="variable">jc</span> <span class="operator">=</span> FACTORY.createJc();</span><br><span class="line">        <span class="comment">// 设置对齐模式</span></span><br><span class="line">        jc.setVal(alignMode);</span><br><span class="line">        pPr.setJc(jc);</span><br><span class="line">        paragraph.setPPr(pPr);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在段落中添加页码字段的开始、页码字段本身和结束标记</span></span><br><span class="line">    addFieldBegin(paragraph);</span><br><span class="line">    addPageNumberField(paragraph);</span><br><span class="line">    addFieldEnd(paragraph);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将含有页码字段的段落添加到脚注内容中</span></span><br><span class="line">    ftr.getContent().add(paragraph);</span><br><span class="line">    <span class="comment">// 返回包含页码的脚注对象</span></span><br><span class="line">    <span class="keyword">return</span> ftr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、创建页脚引用关系"><a href="#四、创建页脚引用关系" class="headerlink" title="四、创建页脚引用关系"></a>四、创建页脚引用关系</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建页脚引用关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmp          DOCX文档对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> relationship 文档中页脚与主体部分的关系对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createFooterReference</span><span class="params">(WordprocessingMLPackage wmp, Relationship relationship)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取文档中的所有节</span></span><br><span class="line">    List&lt;SectionWrapper&gt; sections = wmp.getDocumentModel().getSections();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取最后一个节的节属性</span></span><br><span class="line">    <span class="type">SectPr</span> <span class="variable">sectionProperties</span> <span class="operator">=</span> sections.get(sections.size() - <span class="number">1</span>).getSectPr();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 如果节属性不存在，则创建一个新的节属性并添加到文档中</span></span><br><span class="line">    <span class="keyword">if</span> (sectionProperties == <span class="literal">null</span>) &#123;</span><br><span class="line">        sectionProperties = FACTORY.createSectPr();</span><br><span class="line">        wmp.getMainDocumentPart().addObject(sectionProperties);</span><br><span class="line">        sections.get(sections.size() - <span class="number">1</span>).setSectPr(sectionProperties);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建页脚引用，并设置其关系ID和类型</span></span><br><span class="line">    <span class="type">FooterReference</span> <span class="variable">footerReference</span> <span class="operator">=</span> FACTORY.createFooterReference();</span><br><span class="line">    footerReference.setId(relationship.getId());</span><br><span class="line">    footerReference.setType(HdrFtrRef.DEFAULT);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将页脚引用添加到节属性中</span></span><br><span class="line">    sectionProperties.getEGHdrFtrReferences().add(footerReference);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、相关辅助方法"><a href="#五、相关辅助方法" class="headerlink" title="五、相关辅助方法"></a>五、相关辅助方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个用于将对象包装在R类型中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> R <span class="title function_">rWrapper</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用工厂模式创建一个R类型的实例</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> FACTORY.createR();</span><br><span class="line">    <span class="comment">// 将传入的对象添加到R实例的内容中</span></span><br><span class="line">    r.getContent().add(o);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为给定的段落添加一个字段开始的分隔符</span></span><br><span class="line"><span class="comment"> * 这个方法主要用于文档编辑中，插入一个表示字段开始的特殊字符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paragraph 段落对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addFieldBegin</span><span class="params">(P paragraph)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个表示字段开始的分隔符对象</span></span><br><span class="line">    <span class="type">FldChar</span> <span class="variable">beginFldChar</span> <span class="operator">=</span> FACTORY.createFldChar();</span><br><span class="line">    beginFldChar.setFldCharType(STFldCharType.BEGIN);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将字段开始分隔符包装成一个 JAXBElement，以便于插入段落内容中</span></span><br><span class="line">    JAXBElement&lt;FldChar&gt; beginR = FACTORY.createRFldChar(beginFldChar);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 调用 rWrapper 方法，将 JAXBElement 包装成 R 对象，方便处理</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> rWrapper(beginR);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将包装好的 R 对象添加到段落的内容中</span></span><br><span class="line">    paragraph.getContent().add(r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向指定段落中添加页码字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paragraph 段落对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addPageNumberField</span><span class="params">(P paragraph)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个文本对象，设置保留空格，并设置其值为&quot;PAGE&quot;。</span></span><br><span class="line">    <span class="type">Text</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">    txt.setSpace(<span class="string">&quot;preserve&quot;</span>);</span><br><span class="line">    txt.setValue(<span class="string">&quot;PAGE&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用创建的文本对象，构建一个RT元素。</span></span><br><span class="line">    JAXBElement&lt;Text&gt; rt = FACTORY.createRT(txt);</span><br><span class="line">    <span class="comment">// 封装RT元素到R元素中。</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> rWrapper(rt);</span><br><span class="line">    <span class="comment">// 将R元素添加到段落内容中，从而实现页码字段的添加。</span></span><br><span class="line">    paragraph.getContent().add(r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为给定的段落添加字段结束符</span></span><br><span class="line"><span class="comment"> * 此方法用于在段落中的实际字段后插入一个字段结束符，以标记字段的结束</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paragraph 段落对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addFieldEnd</span><span class="params">(P paragraph)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个字段结束符对象</span></span><br><span class="line">    <span class="type">FldChar</span> <span class="variable">endFldChar</span> <span class="operator">=</span> FACTORY.createFldChar();</span><br><span class="line">    <span class="comment">// 设置字段结束符的类型</span></span><br><span class="line">    endFldChar.setFldCharType(STFldCharType.END);</span><br><span class="line">    <span class="comment">// 将字段结束符包装成一个 JAXBElement</span></span><br><span class="line">    JAXBElement&lt;FldChar&gt; endR = FACTORY.createRFldChar(endFldChar);</span><br><span class="line">    <span class="comment">// 调用 rWrapper 方法，将 JAXBElement 包装成 R 对象</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> rWrapper(endR);</span><br><span class="line">    <span class="comment">// 将包装后的 R 对象添加到段落的内容中</span></span><br><span class="line">    paragraph.getContent().add(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2024/03/15/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-7-Docx4j%E7%9A%84%E9%A1%B5%E7%A0%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-6|Docx4j的表格</title>
      <link>https://log.660066.xyz/2024/01/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-6-Docx4j%E7%9A%84%E8%A1%A8%E6%A0%BC/</link>
      <guid>https://log.660066.xyz/2024/01/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-6-Docx4j%E7%9A%84%E8%A1%A8%E6%A0%BC/</guid>
      <pubDate>Wed, 03 Jan 2024 07:12:45 GMT</pubDate>
      
      <description>Docx4j开发手册-6|Docx4j的表格</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、创建表格"><a href="#一、创建表格" class="headerlink" title="一、创建表格"></a>一、创建表格</h1><p>创建一个一行三列的表格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.createPackage();</span><br><span class="line">        <span class="type">MainDocumentPart</span> <span class="variable">mainDocumentPart</span> <span class="operator">=</span> wordMLPackage.getMainDocumentPart();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建表格对象</span></span><br><span class="line">        <span class="type">ObjectFactory</span> <span class="variable">objectFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>();</span><br><span class="line">        <span class="type">Tbl</span> <span class="variable">tbl</span> <span class="operator">=</span> objectFactory.createTbl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将表格添加到文档中</span></span><br><span class="line">        mainDocumentPart.getContent().add(tbl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成表格行对象</span></span><br><span class="line">        <span class="type">Tr</span> <span class="variable">tr</span> <span class="operator">=</span> objectFactory.createTr();</span><br><span class="line">        <span class="comment">// 将表格行对象添加到表格对象中</span></span><br><span class="line">        tbl.getContent().add(tr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成单元格对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">Tc</span> <span class="variable">tc</span> <span class="operator">=</span> objectFactory.createTc();</span><br><span class="line">            <span class="type">Text</span> <span class="variable">text</span> <span class="operator">=</span> objectFactory.createText();</span><br><span class="line">            text.setValue(<span class="string">&quot;单元格&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">            <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> objectFactory.createR();</span><br><span class="line">            r.getContent().add(text);</span><br><span class="line">            <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> objectFactory.createP();</span><br><span class="line">            p.getContent().add(r);</span><br><span class="line">            tc.getContent().add(p);</span><br><span class="line">            <span class="comment">// 将单元格对象添加到表格行对象中</span></span><br><span class="line">            tr.getContent().add(tc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置表格属性</span></span><br><span class="line">        setTablePr(tbl);</span><br><span class="line"></span><br><span class="line">        wordMLPackage.save(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/xxx.docx&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二、设置表格属性"><a href="#二、设置表格属性" class="headerlink" title="二、设置表格属性"></a>二、设置表格属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTablePr</span><span class="params">(Tbl tbl)</span> &#123;</span><br><span class="line">        <span class="comment">// 表格属性</span></span><br><span class="line">        <span class="type">TblPr</span> <span class="variable">tblPr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TblPr</span>();</span><br><span class="line">        <span class="type">TblBorders</span> <span class="variable">tblBorders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TblBorders</span>();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 设置边距</span></span><br><span class="line">        <span class="type">CTBorder</span> <span class="variable">ctBorder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CTBorder</span>();</span><br><span class="line">        <span class="comment">// 设置边框样式为单线</span></span><br><span class="line">        ctBorder.setVal(STBorder.SINGLE);</span><br><span class="line">        <span class="comment">// 设置边框颜色</span></span><br><span class="line">        ctBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置边框大小（以半点为单位）</span></span><br><span class="line">        ctBorder.setSz(BigInteger.valueOf(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 设置顶部边框</span></span><br><span class="line">        tblBorders.setTop(ctBorder);</span><br><span class="line">        <span class="comment">// 设置底部边框</span></span><br><span class="line">        tblBorders.setBottom(ctBorder);</span><br><span class="line">        <span class="comment">// 设置左侧边框</span></span><br><span class="line">        tblBorders.setLeft(ctBorder);</span><br><span class="line">        <span class="comment">// 设置右侧边框</span></span><br><span class="line">        tblBorders.setRight(ctBorder);</span><br><span class="line">        <span class="comment">// 设置内部横向</span></span><br><span class="line">        tblBorders.setInsideH(ctBorder);</span><br><span class="line">        <span class="comment">// 设置内部纵向</span></span><br><span class="line">        tblBorders.setInsideV(ctBorder);</span><br><span class="line">        tblPr.setTblBorders(tblBorders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个表格宽度对象</span></span><br><span class="line">        tblPr.setTblW(<span class="keyword">new</span> <span class="title class_">TblWidth</span>());</span><br><span class="line">        <span class="comment">// 设置表格宽度为5000 TWIPs</span></span><br><span class="line">        tblPr.getTblW().setW(BigInteger.valueOf(<span class="number">5000</span>));</span><br><span class="line">        <span class="comment">// 设置宽度单位为DXA（像素）</span></span><br><span class="line">        tblPr.getTblW().setType(<span class="string">&quot;dxa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置表格居中对齐</span></span><br><span class="line">        tblPr.setJc(<span class="keyword">new</span> <span class="title class_">Jc</span>());</span><br><span class="line">        tblPr.getJc().setVal(JcEnumeration.CENTER);</span><br><span class="line"></span><br><span class="line">        tbl.setTblPr(tblPr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、设置单元格属性"><a href="#三、设置单元格属性" class="headerlink" title="三、设置单元格属性"></a>三、设置单元格属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCellPr</span><span class="params">(Tc tc)</span> &#123;</span><br><span class="line">    <span class="type">TcPr</span> <span class="variable">tcPr</span> <span class="operator">=</span> tc.getTcPr();</span><br><span class="line">    <span class="comment">// 文本的垂直对齐方式</span></span><br><span class="line">    tcPr.setVAlign(<span class="keyword">new</span> <span class="title class_">CTVerticalJc</span>());</span><br><span class="line">    tcPr.getVAlign().setVal(STVerticalJc.TOP);</span><br><span class="line">    tcPr.getVAlign().setVal(STVerticalJc.CENTER);</span><br><span class="line">    tcPr.getVAlign().setVal(STVerticalJc.BOTTOM);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单元格的填充背景色</span></span><br><span class="line">    tcPr.setShd(<span class="keyword">new</span> <span class="title class_">CTShd</span>());</span><br><span class="line">    tcPr.getShd().setFill(<span class="string">&quot;FF0000&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文本自动换行（默认自动换行）</span></span><br><span class="line">    <span class="type">ObjectFactory</span> <span class="variable">objectFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>();</span><br><span class="line">    tcPr.setNoWrap(objectFactory.createBooleanDefaultTrue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、合并单元格"><a href="#四、合并单元格" class="headerlink" title="四、合并单元格"></a>四、合并单元格</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableMergeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的Word文档</span></span><br><span class="line">        <span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.createPackage();</span><br><span class="line">        <span class="type">MainDocumentPart</span> <span class="variable">mainDocumentPart</span> <span class="operator">=</span> wordMLPackage.getMainDocumentPart();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个包含两行两列的表格</span></span><br><span class="line">        <span class="type">Tbl</span> <span class="variable">table</span> <span class="operator">=</span> createTable();</span><br><span class="line">        TableTest.setTablePr(table);</span><br><span class="line">        mainDocumentPart.addObject(table);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并第一行的两个单元格</span></span><br><span class="line">        mergeTableCells(table, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存文档</span></span><br><span class="line">        wordMLPackage.save(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/Desktop/TempFile/newReport/表格文档/&quot;</span> + DateUtil.format(<span class="keyword">new</span> <span class="title class_">DateTime</span>(), <span class="string">&quot;yyyyMMdd-HH-mm-ss&quot;</span>) + <span class="string">&quot;.docx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Tbl <span class="title function_">createTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>();</span><br><span class="line">        <span class="type">Tbl</span> <span class="variable">table</span> <span class="operator">=</span> factory.createTbl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第一行</span></span><br><span class="line">        <span class="type">Tr</span> <span class="variable">row1</span> <span class="operator">=</span> factory.createTr();</span><br><span class="line">        addTableCell(row1, <span class="string">&quot;Cell 1&quot;</span>);</span><br><span class="line">        addTableCell(row1, <span class="string">&quot;Cell 2&quot;</span>);</span><br><span class="line">        table.getContent().add(row1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第二行</span></span><br><span class="line">        <span class="type">Tr</span> <span class="variable">row2</span> <span class="operator">=</span> factory.createTr();</span><br><span class="line">        addTableCell(row2, <span class="string">&quot;Cell 3&quot;</span>);</span><br><span class="line">        addTableCell(row2, <span class="string">&quot;Cell 4&quot;</span>);</span><br><span class="line">        table.getContent().add(row2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建单元格添加到表格行对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row     行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 单元格内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addTableCell</span><span class="params">(Tr row, String content)</span> &#123;</span><br><span class="line">        <span class="type">ObjectFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>();</span><br><span class="line">        <span class="type">Tc</span> <span class="variable">cell</span> <span class="operator">=</span> factory.createTc();</span><br><span class="line">        <span class="type">P</span> <span class="variable">paragraph</span> <span class="operator">=</span> factory.createP();</span><br><span class="line">        <span class="type">Text</span> <span class="variable">text</span> <span class="operator">=</span> factory.createText();</span><br><span class="line">        text.setValue(content);</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> factory.createR();</span><br><span class="line">        r.getContent().add(text);</span><br><span class="line">        paragraph.getContent().add(r);</span><br><span class="line">        cell.getContent().add(paragraph);</span><br><span class="line">        row.getContent().add(cell);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并单元格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> table          表格对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowIndex       行索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellStartIndex 单元格开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellEndIndex   单元格结束索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeTableCells</span><span class="params">(Tbl table, <span class="type">int</span> rowIndex, <span class="type">int</span> cellStartIndex, <span class="type">int</span> cellEndIndex)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; rows = table.getContent();</span><br><span class="line">        <span class="keyword">if</span> (rowIndex &lt; rows.size()) &#123;</span><br><span class="line">            <span class="type">Tr</span> <span class="variable">row</span> <span class="operator">=</span> (Tr) rows.get(rowIndex);</span><br><span class="line">            List&lt;Object&gt; cells = row.getContent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并单元格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cellStartIndex + <span class="number">1</span>; i &lt;= cellEndIndex; i++) &#123;</span><br><span class="line">                <span class="type">TcPr</span> <span class="variable">tcPr</span> <span class="operator">=</span> getOrCreateTcPr((Tc) cells.get(cellStartIndex));</span><br><span class="line">                TcPrInner.<span class="type">GridSpan</span> <span class="variable">gridSpan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcPrInner</span>.GridSpan();</span><br><span class="line">                gridSpan.setVal(BigInteger.valueOf(cellEndIndex - cellStartIndex + <span class="number">1</span>));</span><br><span class="line">                tcPr.setGridSpan(gridSpan);</span><br><span class="line">                cells.remove(cellStartIndex + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 移除多余的单元格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在单元格属性对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TcPr <span class="title function_">getOrCreateTcPr</span><span class="params">(Tc cell)</span> &#123;</span><br><span class="line">        <span class="type">TcPr</span> <span class="variable">tcPr</span> <span class="operator">=</span> cell.getTcPr();</span><br><span class="line">        <span class="keyword">if</span> (tcPr == <span class="literal">null</span>) &#123;</span><br><span class="line">            tcPr = <span class="keyword">new</span> <span class="title class_">TcPr</span>();</span><br><span class="line">            cell.setTcPr(tcPr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tcPr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2024/01/03/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-6-Docx4j%E7%9A%84%E8%A1%A8%E6%A0%BC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-5|Docx4j的图片信息</title>
      <link>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-5-Docx4j%E7%9A%84%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/</link>
      <guid>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-5-Docx4j%E7%9A%84%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/</guid>
      <pubDate>Wed, 06 Dec 2023 04:00:00 GMT</pubDate>
      
      <description>Docx4j开发手册-5|Docx4j的图片信息</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一、通过Docx4j向文档添加照片"><a href="#一、通过Docx4j向文档添加照片" class="headerlink" title="一、通过Docx4j向文档添加照片"></a>一、通过Docx4j向文档添加照片</h1><p>本章节代码来自docx4j项目github开源代码，有所改动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddImage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.load(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/XXXX/XXXX.docx&quot;</span>));</span><br><span class="line">        <span class="comment">// 要添加的图像</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/XXXX/1.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> file.length();</span><br><span class="line">        <span class="comment">// 不能创建long型数组。</span></span><br><span class="line">        <span class="comment">// 必须是int类型。</span></span><br><span class="line">        <span class="keyword">if</span> (length &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;File too large!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (offset &lt; bytes.length</span><br><span class="line">                &amp;&amp; (numRead = is.read(bytes, offset, bytes.length - offset)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            offset += numRead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保已读入所有字节</span></span><br><span class="line">        <span class="keyword">if</span> (offset &lt; bytes.length) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无法完全读取文件&quot;</span> + file.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filenameHint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">altText</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 图像1：未指定宽度</span></span><br><span class="line">        <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> newImage(wordMLPackage, bytes, filenameHint, altText, id2);</span><br><span class="line">        wordMLPackage.getMainDocumentPart().addObject(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 图2：宽度3000</span></span><br><span class="line">        <span class="type">P</span> <span class="variable">p2</span> <span class="operator">=</span> newImage(wordMLPackage, bytes, filenameHint, altText, id2, <span class="number">3000</span>);</span><br><span class="line">        wordMLPackage.getMainDocumentPart().addObject(p2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 图3：宽度6000</span></span><br><span class="line">        <span class="type">P</span> <span class="variable">p3</span> <span class="operator">=</span> newImage(wordMLPackage, bytes, filenameHint, altText, id2, <span class="number">6000</span>);</span><br><span class="line">        wordMLPackage.getMainDocumentPart().addObject(p3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now save it</span></span><br><span class="line">        wordMLPackage.save(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/Desktop/image.docx&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建图像，不指定宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> P <span class="title function_">newImage</span><span class="params">(WordprocessingMLPackage wordMLPackage, <span class="type">byte</span>[] bytes, String filenameHint, String altText, <span class="type">int</span> id2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BinaryPartAbstractImage</span> <span class="variable">imagePart</span> <span class="operator">=</span> BinaryPartAbstractImage.createImagePart(wordMLPackage, bytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Inline</span> <span class="variable">inline</span> <span class="operator">=</span> imagePart.createImageInline(filenameHint, altText,</span><br><span class="line">                wordMLPackage.getDrawingPropsIdTracker().generateId(), id2, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now add the inline in w:p/w:r/w:drawing</span></span><br><span class="line">        org.docx4j.wml.<span class="type">ObjectFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Context.getWmlObjectFactory();</span><br><span class="line">        org.docx4j.wml.<span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> factory.createP();</span><br><span class="line">        org.docx4j.wml.<span class="type">R</span> <span class="variable">run</span> <span class="operator">=</span> factory.createR();</span><br><span class="line">        p.getContent().add(run);</span><br><span class="line">        org.docx4j.wml.<span class="type">Drawing</span> <span class="variable">drawing</span> <span class="operator">=</span> factory.createDrawing();</span><br><span class="line">        run.getContent().add(drawing);</span><br><span class="line">        drawing.getAnchorOrInline().add(inline);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建图像，以斜纹为单位指定宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> P <span class="title function_">newImage</span><span class="params">(WordprocessingMLPackage wordMLPackage, <span class="type">byte</span>[] bytes, String filenameHint, String altText, <span class="type">int</span> id2, <span class="type">long</span> cx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BinaryPartAbstractImage</span> <span class="variable">imagePart</span> <span class="operator">=</span> BinaryPartAbstractImage.createImagePart(wordMLPackage, bytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Inline</span> <span class="variable">inline</span> <span class="operator">=</span> imagePart.createImageInline(filenameHint, altText,</span><br><span class="line">                wordMLPackage.getDrawingPropsIdTracker().generateId(), id2, cx, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now add the inline in w:p/w:r/w:drawing</span></span><br><span class="line">        org.docx4j.wml.<span class="type">ObjectFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Context.getWmlObjectFactory();</span><br><span class="line">        org.docx4j.wml.<span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> factory.createP();</span><br><span class="line">        org.docx4j.wml.<span class="type">R</span> <span class="variable">run</span> <span class="operator">=</span> factory.createR();</span><br><span class="line">        p.getContent().add(run);</span><br><span class="line">        org.docx4j.wml.<span class="type">Drawing</span> <span class="variable">drawing</span> <span class="operator">=</span> factory.createDrawing();</span><br><span class="line">        run.getContent().add(drawing);</span><br><span class="line">        drawing.getAnchorOrInline().add(inline);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、通过Docx4j从文档获取照片保存到硬盘"><a href="#二、通过Docx4j从文档获取照片保存到硬盘" class="headerlink" title="二、通过Docx4j从文档获取照片保存到硬盘"></a>二、通过Docx4j从文档获取照片保存到硬盘</h1><p>以下代码仅未测试Demo，未对属性类型做严格检查，使用时请注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 加载 DOCX 文件</span></span><br><span class="line">        <span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.load(<span class="keyword">new</span> <span class="title class_">java</span>.io.File(<span class="string">&quot;D:/XXXX/XXXX.docx&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">MainDocumentPart</span> <span class="variable">mainDocumentPart</span> <span class="operator">=</span> wordMLPackage.getMainDocumentPart();</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; content = mainDocumentPart.getContent();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : content) &#123;</span><br><span class="line">            <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> (P) o;</span><br><span class="line">            List&lt;Object&gt; content1 = p.getContent();</span><br><span class="line">            <span class="keyword">for</span> (Object object : content1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> R) &#123;</span><br><span class="line">                    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> (R) object;</span><br><span class="line">                    List&lt;Object&gt; rContent = r.getContent();</span><br><span class="line">                    <span class="keyword">for</span> (Object o1 : rContent) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> JAXBElement) &#123;</span><br><span class="line">                            <span class="type">JAXBElement</span> <span class="variable">jaxbElement</span> <span class="operator">=</span> (JAXBElement) o1;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> jaxbElement.getValue();</span><br><span class="line">                            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Drawing) &#123;</span><br><span class="line">                                <span class="type">Drawing</span> <span class="variable">drawing</span> <span class="operator">=</span> (Drawing) value;</span><br><span class="line">                                List&lt;Object&gt; anchorOrInline = drawing.getAnchorOrInline();</span><br><span class="line">                                <span class="keyword">for</span> (Object aoi : anchorOrInline) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (aoi <span class="keyword">instanceof</span> Inline) &#123;</span><br><span class="line">                                        <span class="type">Inline</span> <span class="variable">inline</span> <span class="operator">=</span> (Inline) aoi;</span><br><span class="line">                                        <span class="comment">// Pic pic = inline.getGraphic().getGraphicData().getPic();</span></span><br><span class="line">                                        <span class="type">Graphic</span> <span class="variable">graphic</span> <span class="operator">=</span> inline.getGraphic();</span><br><span class="line">                                        <span class="type">byte</span>[] image = BinaryPartAbstractImage.getImage(wordMLPackage, graphic);</span><br><span class="line">                                        saveFile(<span class="string">&quot;D:/&quot;</span> +UUID.fastUUID() + <span class="string">&quot;.png&quot;</span>, image);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节流转换成文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(String filePath, <span class="type">byte</span>[] data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            fos.write(data, <span class="number">0</span>, data.length);</span><br><span class="line">            fos.flush();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-5-Docx4j%E7%9A%84%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-4|Docx4j的文本级别信息</title>
      <link>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/</link>
      <guid>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/</guid>
      <pubDate>Wed, 06 Dec 2023 02:20:08 GMT</pubDate>
      
      <description>Docx4j开发手册-4|Docx4j的文本级别信息</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="4-1、获取文本信息"><a href="#4-1、获取文本信息" class="headerlink" title="4.1、获取文本信息"></a>4.1、获取文本信息</h1><p>文本的样式信息，应该从P对象的Content集合，过滤出R对象，获取R对象的RPr属性。</p><p><img src="/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/image-20231206103005154.png" alt="image-20231206103005154"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 DOCX 文件</span></span><br><span class="line"><span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.load(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/xxx.docx&quot;</span>));</span><br><span class="line">List&lt;Object&gt; content = wordMLPackage.getMainDocumentPart().getContent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文本信息</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (Object o : content) &#123;</span><br><span class="line">    str.append(TextUtils.getText(o));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文本样式</span></span><br><span class="line"><span class="keyword">for</span> (Object o : content) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> P)&#123;</span><br><span class="line">        <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> (P) o;</span><br><span class="line">        List&lt;Object&gt; pContent = p.getContent();</span><br><span class="line">        <span class="keyword">for</span> (Object object : pContent) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> R)&#123;</span><br><span class="line">                <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> (R) object;</span><br><span class="line">                <span class="type">RPr</span> <span class="variable">rPr</span> <span class="operator">=</span> r.getRPr();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-2、文本样式信息"><a href="#4-2、文本样式信息" class="headerlink" title="4.2、文本样式信息"></a>4.2、文本样式信息</h1><p><img src="/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/image-20231206103013955.png" alt="image-20231206103013955"><img src="/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/image-20231206103016609.png" alt="image-20231206103016609"></p><p>Rpr之大，一图放不下。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 粗体</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">b</span> <span class="operator">=</span> rPr.getB();</span><br><span class="line"><span class="comment">// 复杂脚本粗体</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">bCs</span> <span class="operator">=</span> rPr.getBCs();</span><br><span class="line"><span class="comment">// 斜体</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">i</span> <span class="operator">=</span> rPr.getI();</span><br><span class="line"><span class="comment">// 复杂脚本斜体</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">iCs</span> <span class="operator">=</span> rPr.getICs();</span><br><span class="line"><span class="comment">// 将所有字符显示为大写字母</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">caps</span> <span class="operator">=</span> rPr.getCaps();</span><br><span class="line"><span class="comment">// 将所有字符显示为小写字母</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">smallCaps</span> <span class="operator">=</span> rPr.getSmallCaps();</span><br><span class="line"><span class="comment">// 单删除线</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">strike</span> <span class="operator">=</span> rPr.getStrike();</span><br><span class="line"><span class="comment">// 双删除线</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">dstrike</span> <span class="operator">=</span> rPr.getDstrike();</span><br><span class="line"><span class="comment">// 显示字符轮廓</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">outline</span> <span class="operator">=</span> rPr.getOutline();</span><br><span class="line"><span class="comment">// 阴影</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">shadow</span> <span class="operator">=</span> rPr.getShadow();</span><br><span class="line"><span class="comment">// 浮雕</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">emboss</span> <span class="operator">=</span> rPr.getEmboss();</span><br><span class="line"><span class="comment">// 印记</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">imprint</span> <span class="operator">=</span> rPr.getImprint();</span><br><span class="line"><span class="comment">// 不检查拼写或语法</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">noProof</span> <span class="operator">=</span> rPr.getNoProof();</span><br><span class="line"><span class="comment">// 使用文档网格设置实现字符间距</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">snapToGrid</span> <span class="operator">=</span> rPr.getSnapToGrid();</span><br><span class="line"><span class="comment">// 隐藏文本</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">vanish</span> <span class="operator">=</span> rPr.getVanish();</span><br><span class="line"><span class="comment">// Web 隐藏文本</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">webHidden</span> <span class="operator">=</span> rPr.getWebHidden();</span><br><span class="line"><span class="comment">// 从右到左文本</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">rtl</span> <span class="operator">=</span> rPr.getRtl();</span><br><span class="line"><span class="comment">// 运行时使用复杂的脚本格式</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">cs</span> <span class="operator">=</span> rPr.getCs();</span><br><span class="line"><span class="comment">// 段落标记始终处于隐藏状态</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">specVanish</span> <span class="operator">=</span> rPr.getSpecVanish();</span><br><span class="line"><span class="comment">// Office Open XML 数学</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">oMath</span> <span class="operator">=</span> rPr.getOMath();</span><br></pre></td></tr></table></figure><p>引用的字符样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用的字符样式</span></span><br><span class="line"><span class="type">RStyle</span> <span class="variable">rStyle</span> <span class="operator">=</span> rPr.getRStyle();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> rStyle.getVal();</span><br></pre></td></tr></table></figure><p>引用字符样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用字符样式</span></span><br><span class="line"><span class="type">RFonts</span> <span class="variable">rFonts</span> <span class="operator">=</span> rPr.getRFonts();</span><br><span class="line"><span class="comment">// 字体内容类型。表示架构中的以下属性：w：hint</span></span><br><span class="line"><span class="type">STHint</span> <span class="variable">hint</span> <span class="operator">=</span> rFonts.getHint();</span><br><span class="line"><span class="comment">// ASCII字体。表示架构中的以下属性：w：ascii</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ascii</span> <span class="operator">=</span> rFonts.getAscii();</span><br><span class="line"><span class="comment">// 高ANSI字体。表示架构中的以下属性：w：hAnsi</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hAnsi</span> <span class="operator">=</span> rFonts.getHAnsi();</span><br><span class="line"><span class="comment">// 东亚字体。表示架构中的以下属性：w：eastAsia</span></span><br><span class="line"><span class="type">String</span> <span class="variable">eastAsia</span> <span class="operator">=</span> rFonts.getEastAsia();</span><br><span class="line"><span class="comment">// 复杂脚本字体。表示架构中的以下属性：w：cs</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cs</span> <span class="operator">=</span> rFonts.getCs();</span><br><span class="line"><span class="comment">// ASCII 主题字体。表示架构中的以下属性：w：asciiTheme</span></span><br><span class="line"><span class="type">STTheme</span> <span class="variable">asciiTheme</span> <span class="operator">=</span> rFonts.getAsciiTheme();</span><br><span class="line"><span class="comment">// 高 ANSI 主题字体。表示架构中的以下属性：w：hAnsiTheme</span></span><br><span class="line"><span class="type">STTheme</span> <span class="variable">hAnsiTheme</span> <span class="operator">=</span> rFonts.getHAnsiTheme();</span><br><span class="line"><span class="comment">// 东亚主题字体。表示架构中的以下属性：w：eastAsiaTheme</span></span><br><span class="line"><span class="type">STTheme</span> <span class="variable">eastAsiaTheme</span> <span class="operator">=</span> rFonts.getEastAsiaTheme();</span><br><span class="line"><span class="comment">// 复杂脚本主题字体。表示架构中的以下属性：w：cstheme</span></span><br><span class="line"><span class="type">STTheme</span> <span class="variable">cstheme</span> <span class="operator">=</span> rFonts.getCstheme();</span><br></pre></td></tr></table></figure><p>颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 颜色。 表示架构中的以下元素标记：w：color</span></span><br><span class="line"><span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> rPr.getColor();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题 Color.Represents 以下属性： w:themeColor</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeColor</span> <span class="operator">=</span> color.getThemeColor();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题颜色 Shade.Represents 以下属性： w:themeShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeShade</span> <span class="operator">=</span> color.getThemeShade();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题颜色 Tint.Represents 以下属性： w:themeTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeTint</span> <span class="operator">=</span> color.getThemeTint();</span><br><span class="line"><span class="comment">// 运行架构中的内容 Color.Represents 以下属性： w:val</span></span><br><span class="line"><span class="type">String</span> <span class="variable">val1</span> <span class="operator">=</span> color.getVal();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 间距。 表示架构中的以下元素标记：w：spacing</span></span><br><span class="line"><span class="type">CTSignedTwipsMeasure</span> <span class="variable">spacing</span> <span class="operator">=</span> rPr.getSpacing();</span><br><span class="line"><span class="comment">// val (正值或负值（以磅) 的二十分之一为单位）</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> spacing.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展压缩文本。拉伸或压缩运行中的每个字符。 表示架构中的以下元素标记：w：w</span></span><br><span class="line"><span class="type">CTTextScale</span> <span class="variable">w</span> <span class="operator">=</span> rPr.getW();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> w.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体字距。表示架构中的以下元素标记：w：kern</span></span><br><span class="line"><span class="type">HpsMeasure</span> <span class="variable">kern</span> <span class="operator">=</span> rPr.getKern();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> kern.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位置 (垂直凸起或降低的文本)</span></span><br><span class="line"><span class="comment">// 如果 val 属性为正，则父运行应以指定的半点数提升到周围文本的基线之上。 如果 val 属性为负数，则父运行应按指定的半点数降低到周围文本的基线以下。</span></span><br><span class="line"><span class="type">CTSignedHpsMeasure</span> <span class="variable">position</span> <span class="operator">=</span> rPr.getPosition();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> position.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非复杂脚本字体大小</span></span><br><span class="line"><span class="type">HpsMeasure</span> <span class="variable">sz</span> <span class="operator">=</span> rPr.getSz();</span><br><span class="line"><span class="comment">//  val 属性指定的字体大小表示为半点值。</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> sz.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂脚本字号</span></span><br><span class="line"><span class="type">HpsMeasure</span> <span class="variable">szCs</span> <span class="operator">=</span> rPr.getSzCs();</span><br><span class="line"><span class="comment">//  val 属性指定的字体大小表示为半点值。</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> szCs.getVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 突出显示 (文本突出显示、高亮)</span></span><br><span class="line"><span class="type">Highlight</span> <span class="variable">highlight</span> <span class="operator">=</span> rPr.getHighlight();</span><br><span class="line"><span class="comment">// 突出显示的颜色。表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> highlight.getVal();</span><br><span class="line"><span class="comment">// 十六进制颜色代码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hexVal</span> <span class="operator">=</span> highlight.getHexVal();</span><br></pre></td></tr></table></figure><p>下划线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下划线</span></span><br><span class="line"><span class="type">U</span> <span class="variable">u</span> <span class="operator">=</span> rPr.getU();</span><br><span class="line"><span class="comment">// 枚举类UnderlineValues</span></span><br><span class="line"><span class="type">UnderlineEnumeration</span> <span class="variable">val</span> <span class="operator">=</span> u.getVal();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题 u.Represents 以下属性： w:themeColor</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeColor</span> <span class="operator">=</span> u.getThemeColor();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题颜色 Shade.Represents 以下属性： w:themeShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeShade</span> <span class="operator">=</span> u.getThemeShade();</span><br><span class="line"><span class="comment">// 运行架构中的内容的主题颜色 Tint.Represents 以下属性： w:themeTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeTint</span> <span class="operator">=</span> u.getThemeTint();</span><br><span class="line"><span class="comment">// 运行架构中的内容 u.Represents 以下属性： w:val</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> u.getColor();</span><br></pre></td></tr></table></figure><p>文本影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本影响</span></span><br><span class="line"><span class="type">CTTextEffect</span> <span class="variable">effect</span> <span class="operator">=</span> rPr.getEffect();</span><br><span class="line"><span class="comment">// 枚举类</span></span><br><span class="line"><span class="type">STTextEffect</span> <span class="variable">val</span> <span class="operator">=</span> effect.getVal();</span><br></pre></td></tr></table></figure><p>文本边框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本边框</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">bdr</span> <span class="operator">=</span> rPr.getBdr();</span><br><span class="line"><span class="comment">// 边框样式.表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">STBorder</span> <span class="variable">val</span> <span class="operator">=</span> bdr.getVal();</span><br><span class="line"><span class="comment">// 边框颜色。表示架构中的以下属性：w：color</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> bdr.getColor();</span><br><span class="line"><span class="comment">// 边框主题颜色。表示架构中的以下属性：w：themeColor</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeColor</span> <span class="operator">=</span> bdr.getThemeColor();</span><br><span class="line"><span class="comment">// 边框主题颜色 Tint.表示架构中的以下属性：w：themeTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeTint</span> <span class="operator">=</span> bdr.getThemeTint();</span><br><span class="line"><span class="comment">// 边框主题颜色阴影。表示架构中的以下属性：w：themeShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeShade</span> <span class="operator">=</span> bdr.getThemeShade();</span><br><span class="line"><span class="comment">// 边框宽度。表示架构中的以下属性：w：sz</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">sz</span> <span class="operator">=</span> bdr.getSz();</span><br></pre></td></tr></table></figure><p>段落底纹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落底纹</span></span><br><span class="line"><span class="type">CTShd</span> <span class="variable">shd</span> <span class="operator">=</span> rPr.getShd();</span><br><span class="line"><span class="comment">// 着色模式。表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">STShd</span> <span class="variable">val</span> <span class="operator">=</span> shd.getVal();</span><br><span class="line"><span class="comment">// 底纹图案颜色。表示架构中的以下属性：w：color</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> shd.getColor();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色。表示架构中的以下属性：w：themeColor</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeColor</span> <span class="operator">=</span> shd.getThemeColor();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色淡化。表示架构中的以下属性：w：themeTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeTint</span> <span class="operator">=</span> shd.getThemeTint();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色阴影。表示架构中的以下属性：w：themeShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeShade</span> <span class="operator">=</span> shd.getThemeShade();</span><br><span class="line"><span class="comment">// 底纹背景色。表示架构中的以下属性：w：fill</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fill</span> <span class="operator">=</span> shd.getFill();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色。表示架构中的以下属性：w：themeFill</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeFill</span> <span class="operator">=</span> shd.getThemeFill();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色淡色。表示架构中的以下属性：w：themeFillTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeFillTint</span> <span class="operator">=</span> shd.getThemeFillTint();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色阴影。表示架构中的以下属性：w：themeFillShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeFillShade</span> <span class="operator">=</span> shd.getThemeFillShade();</span><br></pre></td></tr></table></figure><p>手动运行宽度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动运行宽度</span></span><br><span class="line"><span class="type">CTFitText</span> <span class="variable">fitText</span> <span class="operator">=</span> rPr.getFitText();</span><br><span class="line"><span class="comment">// Value.表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> fitText.getVal();</span><br><span class="line"><span class="comment">// 拟合文本运行 ID。表示架构中的以下属性：w：id</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">id</span> <span class="operator">=</span> fitText.getId();</span><br></pre></td></tr></table></figure><p>下标&#x2F;上标文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下标/上标文本</span></span><br><span class="line"><span class="type">CTVerticalAlignRun</span> <span class="variable">vertAlign</span> <span class="operator">=</span> rPr.getVertAlign();</span><br><span class="line"><span class="comment">// 枚举[baseline、superscript、subscript]</span></span><br><span class="line"><span class="type">STVerticalAlignRun</span> <span class="variable">val</span> <span class="operator">=</span> vertAlign.getVal();</span><br></pre></td></tr></table></figure><p>强调标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强调标记</span></span><br><span class="line"><span class="type">CTEm</span> <span class="variable">em</span> <span class="operator">=</span> rPr.getEm();</span><br><span class="line"><span class="comment">// 枚举[none、dot、comma、circle、underDot]</span></span><br><span class="line"><span class="type">STEm</span> <span class="variable">val</span> <span class="operator">=</span> em.getVal();</span><br></pre></td></tr></table></figure><p>用于运行内容的语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于运行内容的语言</span></span><br><span class="line"><span class="type">CTLanguage</span> <span class="variable">lang</span> <span class="operator">=</span> rPr.getLang();</span><br><span class="line"><span class="comment">// 拉丁语。表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> lang.getVal();</span><br><span class="line"><span class="comment">// 东亚语言。表示架构中的以下属性：w：eastAsia</span></span><br><span class="line"><span class="type">String</span> <span class="variable">eastAsia</span> <span class="operator">=</span> lang.getEastAsia();</span><br><span class="line"><span class="comment">// 复杂脚本语言。表示架构中的以下属性：w：bidi</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bidi</span> <span class="operator">=</span> lang.getBidi();</span><br></pre></td></tr></table></figure><p>应用于运行内容的任何东亚版式设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用于运行内容的任何东亚版式设置</span></span><br><span class="line"><span class="type">CTEastAsianLayout</span> <span class="variable">eastAsianLayout</span> <span class="operator">=</span> rPr.getEastAsianLayout();</span><br><span class="line"><span class="comment">// 东亚版式运行 ID。表示架构中的以下属性：w：id</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">id</span> <span class="operator">=</span> eastAsianLayout.getId();</span><br><span class="line"><span class="comment">// 枚举 [none、round、square、angle、curly]</span></span><br><span class="line"><span class="type">STCombineBrackets</span> <span class="variable">combineBrackets</span> <span class="operator">=</span> eastAsianLayout.getCombineBrackets();</span><br></pre></td></tr></table></figure><p>辉光</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 辉光</span></span><br><span class="line"><span class="type">CTGlow</span> <span class="variable">glow</span> <span class="operator">=</span> rPr.getGlow();</span><br><span class="line"><span class="comment">// 发光半径</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">rad</span> <span class="operator">=</span> glow.getRad();</span><br><span class="line"><span class="comment">// Rgb颜色模型十六进制</span></span><br><span class="line"><span class="type">CTSRgbColor</span> <span class="variable">srgbClr</span> <span class="operator">=</span> glow.getSrgbClr();</span><br><span class="line"><span class="comment">// 方案颜色</span></span><br><span class="line"><span class="type">CTSchemeColor</span> <span class="variable">schemeClr</span> <span class="operator">=</span> glow.getSchemeClr();</span><br></pre></td></tr></table></figure><p>阴影</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阴影</span></span><br><span class="line"><span class="type">CTShadow</span> <span class="variable">shadow14</span> <span class="operator">=</span> rPr.getShadow14();</span><br><span class="line"><span class="comment">//Rgb颜色模型十六进制</span></span><br><span class="line"><span class="type">CTSRgbColor</span> <span class="variable">srgbClr</span> <span class="operator">=</span> shadow14.getSrgbClr();</span><br><span class="line"><span class="comment">// 方案颜色</span></span><br><span class="line"><span class="type">CTSchemeColor</span> <span class="variable">schemeClr</span> <span class="operator">=</span> shadow14.getSchemeClr();</span><br><span class="line"><span class="comment">// 模糊半径</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">blurRad</span> <span class="operator">=</span> shadow14.getBlurRad();</span><br><span class="line"><span class="comment">// 与文本的距离</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">dist</span> <span class="operator">=</span> shadow14.getDist();</span><br><span class="line"><span class="comment">// 方向角</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">dir</span> <span class="operator">=</span> shadow14.getDir();</span><br><span class="line"><span class="comment">// 水平缩放因子</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sx</span> <span class="operator">=</span> shadow14.getSx();</span><br><span class="line"><span class="comment">// 垂直比例因子</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sy</span> <span class="operator">=</span> shadow14.getSy();</span><br><span class="line"><span class="comment">// 水平倾斜角度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">kx</span> <span class="operator">=</span> shadow14.getKx();</span><br><span class="line"><span class="comment">// 垂直倾斜角度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">ky</span> <span class="operator">=</span> shadow14.getKy();</span><br><span class="line"><span class="comment">// 对齐</span></span><br><span class="line"><span class="type">STRectAlignment</span> <span class="variable">algn</span> <span class="operator">=</span> shadow14.getAlgn();</span><br></pre></td></tr></table></figure><p>反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射</span></span><br><span class="line"><span class="type">CTReflection</span> <span class="variable">reflection</span> <span class="operator">=</span> rPr.getReflection();</span><br><span class="line"><span class="comment">// 模糊半径</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">blurRad</span> <span class="operator">=</span> reflection.getBlurRad();</span><br><span class="line"><span class="comment">// 开始不透明度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">stA</span> <span class="operator">=</span> reflection.getStA();</span><br><span class="line"><span class="comment">// 起始位置</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">stPos</span> <span class="operator">=</span> reflection.getStPos();</span><br><span class="line"><span class="comment">// 结束不透明度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">endA</span> <span class="operator">=</span> reflection.getEndA();</span><br><span class="line"><span class="comment">// 结束位置</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">endPos</span> <span class="operator">=</span> reflection.getEndPos();</span><br><span class="line"><span class="comment">// 与文本的距离</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">dist</span> <span class="operator">=</span> reflection.getDist();</span><br><span class="line"><span class="comment">// 方向角</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">dir</span> <span class="operator">=</span> reflection.getDir();</span><br><span class="line"><span class="comment">// 淡入淡出方向</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">fadeDir</span> <span class="operator">=</span> reflection.getFadeDir();</span><br><span class="line"><span class="comment">// 水平缩放因子</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sx</span> <span class="operator">=</span> reflection.getSx();</span><br><span class="line"><span class="comment">// 垂直比例因子</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sy</span> <span class="operator">=</span> reflection.getSy();</span><br><span class="line"><span class="comment">// 水平倾斜角度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">kx</span> <span class="operator">=</span> reflection.getKx();</span><br><span class="line"><span class="comment">// 垂直倾斜角度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">ky</span> <span class="operator">=</span> reflection.getKy();</span><br><span class="line"><span class="comment">// 对齐</span></span><br><span class="line"><span class="type">STRectAlignment</span> <span class="variable">algn</span> <span class="operator">=</span> reflection.getAlgn();</span><br></pre></td></tr></table></figure><p>应用于文本的大纲样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">应用于文本的大纲样式<span class="comment">// 应用于文本的大纲样式</span></span><br><span class="line"><span class="type">CTTextOutlineEffect</span> <span class="variable">textOutline</span> <span class="operator">=</span> rPr.getTextOutline();</span><br><span class="line"><span class="comment">// 无</span></span><br><span class="line"><span class="type">CTEmpty</span> <span class="variable">noFill</span> <span class="operator">=</span> textOutline.getNoFill();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">CTSolidColorFillProperties</span> <span class="variable">solidFill</span> <span class="operator">=</span> textOutline.getSolidFill();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">CTGradientFillProperties</span> <span class="variable">gradFill</span> <span class="operator">=</span> textOutline.getGradFill();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">CTPresetLineDashProperties</span> <span class="variable">prstDash</span> <span class="operator">=</span> textOutline.getPrstDash();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">CTEmpty</span> <span class="variable">round</span> <span class="operator">=</span> textOutline.getRound();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">CTEmpty</span> <span class="variable">bevel</span> <span class="operator">=</span> textOutline.getBevel();</span><br><span class="line"><span class="comment">// 文本轮廓的宽度</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">w</span> <span class="operator">=</span> textOutline.getW();</span><br><span class="line"><span class="comment">// 文本轮廓的端点样式[FLAT、ROUND、SQUARE]</span></span><br><span class="line"><span class="type">STLineCap</span> <span class="variable">cap</span> <span class="operator">=</span> textOutline.getCap();</span><br><span class="line"><span class="comment">// 文本轮廓的连接方式[BEVEL、MITER、ROUND]</span></span><br><span class="line"><span class="type">STCompoundLine</span> <span class="variable">cmpd</span> <span class="operator">=</span> textOutline.getCmpd();</span><br><span class="line"><span class="comment">// 文本轮廓与文本的对齐方式</span></span><br><span class="line"><span class="type">STPenAlignment</span> <span class="variable">algn</span> <span class="operator">=</span> textOutline.getAlgn();</span><br></pre></td></tr></table></figure><p>文本填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本填充</span></span><br><span class="line"><span class="type">CTFillTextEffect</span> <span class="variable">textFill</span> <span class="operator">=</span> rPr.getTextFill();</span><br><span class="line"><span class="comment">// 渐变填充特性</span></span><br><span class="line"><span class="type">CTGradientFillProperties</span> <span class="variable">gradFill</span> <span class="operator">=</span> textFill.getGradFill();</span><br><span class="line"><span class="comment">// 无填充空</span></span><br><span class="line"><span class="type">CTEmpty</span> <span class="variable">noFill</span> <span class="operator">=</span> textFill.getNoFill();</span><br><span class="line"><span class="comment">// 纯色填充特性</span></span><br><span class="line"><span class="type">CTSolidColorFillProperties</span> <span class="variable">solidFill</span> <span class="operator">=</span> textFill.getSolidFill();</span><br></pre></td></tr></table></figure><p>场景3d</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景3d</span></span><br><span class="line"><span class="type">CTScene3D</span> <span class="variable">scene3D</span> <span class="operator">=</span> rPr.getScene3D();</span><br><span class="line"><span class="comment">// 相机。 表示架构中的以下元素标记：w14：camera</span></span><br><span class="line"><span class="type">CTCamera</span> <span class="variable">camera</span> <span class="operator">=</span> scene3D.getCamera();</span><br><span class="line"><span class="comment">// 灯光装置。 表示架构中的以下元素标记：w14：lightRig</span></span><br><span class="line"><span class="type">CTLightRig</span> <span class="variable">lightRig</span> <span class="operator">=</span> scene3D.getLightRig();</span><br></pre></td></tr></table></figure><p>3D属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3D属性</span></span><br><span class="line"><span class="type">CTProps3D</span> <span class="variable">props3D</span> <span class="operator">=</span> rPr.getProps3D();</span><br><span class="line"><span class="comment">// 斜面底部</span></span><br><span class="line"><span class="type">CTBevel</span> <span class="variable">bevelT</span> <span class="operator">=</span> props3D.getBevelT();</span><br><span class="line"><span class="comment">// 斜面顶部</span></span><br><span class="line"><span class="type">CTBevel</span> <span class="variable">bevelB</span> <span class="operator">=</span> props3D.getBevelB();</span><br><span class="line"><span class="comment">// 延伸颜色。 表示架构中的以下元素标记：w14：extrusionClr</span></span><br><span class="line"><span class="type">CTColor</span> <span class="variable">extrusionClr</span> <span class="operator">=</span> props3D.getExtrusionClr();</span><br><span class="line"><span class="comment">// 轮廓颜色。 表示架构中的以下元素标记：w14：contourClr</span></span><br><span class="line"><span class="type">CTColor</span> <span class="variable">contourClr</span> <span class="operator">=</span> props3D.getContourClr();</span><br><span class="line"><span class="comment">// 挤出高度。表示架构中的以下属性：w14：extrusionH</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">extrusionH</span> <span class="operator">=</span> props3D.getExtrusionH();</span><br><span class="line"><span class="comment">// 轮廓宽度。表示架构中的以下属性：w14：contourW</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">contourW</span> <span class="operator">=</span> props3D.getContourW();</span><br><span class="line"><span class="comment">// 预设材料类型。表示架构中的以下属性：w14：prstMaterial</span></span><br><span class="line"><span class="type">STPresetMaterialType</span> <span class="variable">prstMaterial</span> <span class="operator">=</span> props3D.getPrstMaterial();</span><br></pre></td></tr></table></figure><p>连字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连字</span></span><br><span class="line"><span class="type">CTLigatures</span> <span class="variable">ligatures</span> <span class="operator">=</span> rPr.getLigatures();</span><br><span class="line"><span class="comment">// 枚举值</span></span><br><span class="line"><span class="type">STLigatures</span> <span class="variable">val</span> <span class="operator">=</span> ligatures.getVal();</span><br></pre></td></tr></table></figure><p>编号格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编号格式</span></span><br><span class="line"><span class="type">CTNumForm</span> <span class="variable">numForm</span> <span class="operator">=</span> rPr.getNumForm();</span><br><span class="line"><span class="comment">// 枚举值</span></span><br><span class="line"><span class="type">STNumForm</span> <span class="variable">val</span> <span class="operator">=</span> numForm.getVal();</span><br></pre></td></tr></table></figure><p>编号间距</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编号间距</span></span><br><span class="line"><span class="type">CTNumSpacing</span> <span class="variable">numSpacing</span> <span class="operator">=</span> rPr.getNumSpacing();</span><br><span class="line"><span class="comment">// 枚举值</span></span><br><span class="line"><span class="type">STNumSpacing</span> <span class="variable">val</span> <span class="operator">=</span> numSpacing.getVal();</span><br></pre></td></tr></table></figure><p>样式集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 样式集</span></span><br><span class="line"><span class="type">CTStylisticSets</span> <span class="variable">stylisticSets</span> <span class="operator">=</span> rPr.getStylisticSets();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">List&lt;CTStyleSet&gt; styleSet = stylisticSets.getStyleSet();</span><br></pre></td></tr></table></figure><p>上下文替代方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上下文替代方案</span></span><br><span class="line"><span class="type">CTOnOff</span> <span class="variable">cntxtAlts</span> <span class="operator">=</span> rPr.getCntxtAlts();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> cntxtAlts.getVal();</span><br></pre></td></tr></table></figure><p>(运行属性) 的修订信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (运行属性) 的修订信息</span></span><br><span class="line"><span class="type">CTRPrChange</span> <span class="variable">rPrChange</span> <span class="operator">=</span> rPr.getRPrChange();</span><br><span class="line"><span class="comment">// 注释标识符。表示架构中的以下属性：w：id</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">id</span> <span class="operator">=</span> rPrChange.getId();</span><br><span class="line"><span class="comment">// 作者。表示架构中的以下属性：w：author</span></span><br><span class="line"><span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rPrChange.getAuthor();</span><br><span class="line"><span class="comment">// 日期。表示架构中的以下属性：w：date</span></span><br><span class="line"><span class="type">XMLGregorianCalendar</span> <span class="variable">date</span> <span class="operator">=</span> rPrChange.getDate();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">CTRPrChange.<span class="type">RPr</span> <span class="variable">rPr</span> <span class="operator">=</span> rPrChange.getRPr();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-4-Docx4j%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docx4j开发手册-3|Docx4j的段落级别信息</title>
      <link>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-3-Docx4j%E7%9A%84%E6%AE%B5%E8%90%BD%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/</link>
      <guid>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-3-Docx4j%E7%9A%84%E6%AE%B5%E8%90%BD%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/</guid>
      <pubDate>Wed, 06 Dec 2023 02:19:59 GMT</pubDate>
      
      <description>Docx4j开发手册-3|Docx4j的段落级别信息</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="3-1、获取段落"><a href="#3-1、获取段落" class="headerlink" title="3.1、获取段落"></a>3.1、获取段落</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WordprocessingMLPackage</span> <span class="variable">wordMLPackage</span> <span class="operator">=</span> WordprocessingMLPackage.load(<span class="keyword">new</span> <span class="title class_">java</span>.io.File(<span class="string">&quot;D:/xxx.docx&quot;</span>));</span><br><span class="line">        List&lt;Object&gt; content = wordMLPackage.getMainDocumentPart().getContent();</span><br><span class="line">        <span class="keyword">for</span> (Object o : content) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> P)&#123;</span><br><span class="line">                <span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> (P) o;</span><br><span class="line">                <span class="comment">// 获取段落文本</span></span><br><span class="line">                TextUtils.getText(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="3-2、段落信息"><a href="#3-2、段落信息" class="headerlink" title="3.2、段落信息"></a>3.2、段落信息</h1><p>上述的对象P就是段落对象，对象P包括的属性有pPr、context等</p><p><img src="/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-3-Docx4j%E7%9A%84%E6%AE%B5%E8%90%BD%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/image-20231206102928801.png" alt="image-20231206102928801"></p><ul><li>pPr：包括了段落的样式信息</li><li>context：包括了本段落的文本样式信息</li></ul><h1 id="3-3、段落样式信息"><a href="#3-3、段落样式信息" class="headerlink" title="3.3、段落样式信息"></a>3.3、段落样式信息</h1><p>BooleanDefaultTrue对象由new ObjectFactory().createBooleanDefaultTrue()创建</p><p>创建方式参考了Doxc4j插件的代码生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PPr</span> <span class="variable">pPr</span> <span class="operator">=</span> p.getPPr();</span><br><span class="line"><span class="comment">// 保持与下一段在同一页</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">keepNext</span> <span class="operator">=</span> pPr.getKeepNext();</span><br><span class="line"><span class="comment">// 保持行在一起</span></span><br><span class="line"><span class="comment">// 将整个段落的文本行放在同一页上，以避免将文本行分割到不同的页面上。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">keepLines</span> <span class="operator">=</span> pPr.getKeepLines();</span><br><span class="line"><span class="comment">// 在段落之前插入分页符</span></span><br><span class="line"><span class="comment">// 这个属性用于控制是否在当前段落之前插入一个分页符，将当前段落移到下一页。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">pageBreakBefore</span> <span class="operator">=</span> pPr.getPageBreakBefore();</span><br><span class="line"><span class="comment">// 孤行控制</span></span><br><span class="line"><span class="comment">// 允许第一行/最后一行显示在单独的页面上</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">widowControl</span> <span class="operator">=</span> pPr.getWidowControl();</span><br><span class="line"><span class="comment">// 禁止显示段落的行号</span></span><br><span class="line"><span class="comment">// 免除当前段落的行号，不仅禁止显示编号，而且从行号计算中删除这些行。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">suppressLineNumbers</span> <span class="operator">=</span> pPr.getSuppressLineNumbers();</span><br><span class="line"><span class="comment">// 取消段落的断字</span></span><br><span class="line"><span class="comment">// 是否应从使用者对此文档应用的任何断字中免除当前段落</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">suppressAutoHyphens</span> <span class="operator">=</span> pPr.getSuppressAutoHyphens();</span><br><span class="line"><span class="comment">// 对每行第一个字符和最后一个字符使用东亚版式规则</span></span><br><span class="line"><span class="comment">// 此元素指定东亚版式和换行规则是否应用于此段落中的文本，以确定哪些字符可以每行的开头和结尾。 </span></span><br><span class="line"><span class="comment">// 仅适用于此段落中的简体中文、繁体中文和日语文本</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">kinsoku</span> <span class="operator">=</span> pPr.getKinsoku();</span><br><span class="line"><span class="comment">// 允许在字符级别换行</span></span><br><span class="line"><span class="comment">// 将单词跨两行 (断，或者通过将单词移到以下行 (在单词级别) 中断来中断超过一行的文本范围</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">wordWrap</span> <span class="operator">=</span> pPr.getWordWrap();</span><br><span class="line"><span class="comment">// 允许标点符号扩展过去的文本范围</span></span><br><span class="line"><span class="comment">// 当超过这些范围的字符是标点字符时，应允许此段落中的文本将一个字符扩展到任何缩进/边距所应用的范围之外。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">overflowPunct</span> <span class="operator">=</span> pPr.getOverflowPunct();</span><br><span class="line"><span class="comment">// 在行开头压缩标点符号</span></span><br><span class="line"><span class="comment">// 在标点符号显示为行中的第一个字符时是否应压缩标点符号，从而允许相应地在行中移动后续字符。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">topLinePunct</span> <span class="operator">=</span> pPr.getTopLinePunct();</span><br><span class="line"><span class="comment">// 自动调整拉丁语和东亚文本的间距</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">autoSpaceDE</span> <span class="operator">=</span> pPr.getAutoSpaceDE();</span><br><span class="line"><span class="comment">// 自动调整东亚文本和数字的间距</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">autoSpaceDN</span> <span class="operator">=</span> pPr.getAutoSpaceDN();</span><br><span class="line"><span class="comment">// 从右到左段落布局</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">bidi</span> <span class="operator">=</span> pPr.getBidi();</span><br><span class="line"><span class="comment">// 使用文档网格时自动调整右缩进</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">adjustRightInd</span> <span class="operator">=</span> pPr.getAdjustRightInd();</span><br><span class="line"><span class="comment">// 将文档网格设置用于Inter-Line段落间距</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">snapToGrid</span> <span class="operator">=</span> pPr.getSnapToGrid();</span><br><span class="line"><span class="comment">// 间距忽略上方和下方时使用相同样式</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">contextualSpacing</span> <span class="operator">=</span> pPr.getContextualSpacing();</span><br><span class="line"><span class="comment">// 使用左/右缩进作为内部/外部缩进</span></span><br><span class="line"><span class="comment">// 指定了：则内部页面边缘是奇数编号页的结束页边缘，偶数编号页的起始页边缘。</span></span><br><span class="line"><span class="comment">// 省略了：由先前在样式层次结构 (的任何级别设置确定，即) 上一个设置保持不变。</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">mirrorIndents</span> <span class="operator">=</span> pPr.getMirrorIndents();</span><br><span class="line"><span class="comment">// 防止文本框架重叠</span></span><br><span class="line"><span class="comment">// 是否允许在显示时与另一个文本框架相交的文本框架与其他文本框架的内容重叠。 </span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">suppressOverlap</span> <span class="operator">=</span> pPr.getSuppressOverlap();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">collapsed</span> <span class="operator">=</span> pPr.getCollapsed();</span><br></pre></td></tr></table></figure><p>章节信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 章节信息</span></span><br><span class="line"><span class="type">SectPr</span> <span class="variable">sectPr</span> <span class="operator">=</span> pPr.getSectPr();</span><br><span class="line"><span class="comment">// 从右到左分区布局</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">bidi</span> <span class="operator">=</span> sectPr.getBidi();</span><br><span class="line"><span class="comment">// 列定义</span></span><br><span class="line"><span class="type">CTColumns</span> <span class="variable">cols</span> <span class="operator">=</span> sectPr.getCols();</span><br><span class="line"><span class="comment">// 文档网格</span></span><br><span class="line"><span class="type">CTDocGrid</span> <span class="variable">docGrid</span> <span class="operator">=</span> sectPr.getDocGrid();</span><br><span class="line"><span class="comment">// 节范围的尾注属性</span></span><br><span class="line"><span class="type">CTEdnProps</span> <span class="variable">endnotePr</span> <span class="operator">=</span> sectPr.getEndnotePr();</span><br><span class="line"><span class="comment">// 标头引用、页脚参考</span></span><br><span class="line">List&lt;CTRel&gt; egHdrFtrReferences = sectPr.getEGHdrFtrReferences();</span><br><span class="line"><span class="comment">// 节宽脚注属性</span></span><br><span class="line"><span class="type">CTFtnProps</span> <span class="variable">footnotePr</span> <span class="operator">=</span> sectPr.getFootnotePr();</span><br><span class="line"><span class="comment">// 仅允许编辑窗体字段</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">formProt</span> <span class="operator">=</span> sectPr.getFormProt();</span><br><span class="line"><span class="comment">// 行编号设置</span></span><br><span class="line"><span class="type">CTLineNumber</span> <span class="variable">lnNumType</span> <span class="operator">=</span> sectPr.getLnNumType();</span><br><span class="line"><span class="comment">// (取消文档) 中的尾注</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">noEndnote</span> <span class="operator">=</span> sectPr.getNoEndnote();</span><br><span class="line"><span class="comment">// 纸张源信息</span></span><br><span class="line"><span class="type">CTPaperSource</span> <span class="variable">paperSrc</span> <span class="operator">=</span> sectPr.getPaperSrc();</span><br><span class="line"><span class="comment">// 页面边框</span></span><br><span class="line">SectPr.<span class="type">PgBorders</span> <span class="variable">pgBorders</span> <span class="operator">=</span> sectPr.getPgBorders();</span><br><span class="line"><span class="comment">// 页边距</span></span><br><span class="line">SectPr.<span class="type">PgMar</span> <span class="variable">pgMar</span> <span class="operator">=</span> sectPr.getPgMar();</span><br><span class="line"><span class="comment">// 页码设置</span></span><br><span class="line"><span class="type">CTPageNumber</span> <span class="variable">pgNumType</span> <span class="operator">=</span> sectPr.getPgNumType();</span><br><span class="line"><span class="comment">// 页面大小</span></span><br><span class="line">SectPr.<span class="type">PgSz</span> <span class="variable">pgSz</span> <span class="operator">=</span> sectPr.getPgSz();</span><br><span class="line"><span class="comment">// 打印机设置数据</span></span><br><span class="line"><span class="type">CTRel</span> <span class="variable">printerSettings</span> <span class="operator">=</span> sectPr.getPrinterSettings();</span><br><span class="line"><span class="comment">// Page右侧的 Gutter</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">rtlGutter</span> <span class="operator">=</span> sectPr.getRtlGutter();</span><br><span class="line"><span class="comment">// 节属性的修订信息</span></span><br><span class="line"><span class="type">CTSectPrChange</span> <span class="variable">sectPrChange</span> <span class="operator">=</span> sectPr.getSectPrChange();</span><br><span class="line"><span class="comment">// 文本流方向</span></span><br><span class="line"><span class="type">TextDirection</span> <span class="variable">textDirection</span> <span class="operator">=</span> sectPr.getTextDirection();</span><br><span class="line"><span class="comment">// 不同的首页页眉和页脚</span></span><br><span class="line"><span class="type">BooleanDefaultTrue</span> <span class="variable">titlePg</span> <span class="operator">=</span> sectPr.getTitlePg();</span><br><span class="line"><span class="comment">// Section Type</span></span><br><span class="line">SectPr.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> sectPr.getType();</span><br><span class="line"><span class="comment">// (page) 上的垂直文本对齐方式</span></span><br><span class="line"><span class="type">CTVerticalJc</span> <span class="variable">vAlign</span> <span class="operator">=</span> sectPr.getVAlign();</span><br></pre></td></tr></table></figure><p>节属性的修订信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节属性的修订信息</span></span><br><span class="line"><span class="type">CTPPrChange</span> <span class="variable">pPrChange</span> <span class="operator">=</span> pPr.getPPrChange();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">PPrBase</span> <span class="variable">pPr</span> <span class="operator">=</span> pPrChange.getPPr();</span><br><span class="line"><span class="comment">// 作者。表示架构中的以下属性：w：author</span></span><br><span class="line"><span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> pPrChange.getAuthor();</span><br><span class="line"><span class="comment">// 日期。表示架构中的以下属性：w：date</span></span><br><span class="line"><span class="type">XMLGregorianCalendar</span> <span class="variable">date</span> <span class="operator">=</span> pPrChange.getDate();</span><br><span class="line"><span class="comment">// 注释标识符。表示架构中的以下属性：w：id</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">id</span> <span class="operator">=</span> pPrChange.getId();</span><br></pre></td></tr></table></figure><p>引用的段落样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用段落样式</span></span><br><span class="line">PPrBase.<span class="type">PStyle</span> <span class="variable">pStyle</span> <span class="operator">=</span> pPr.getPStyle();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> pStyle.getVal();</span><br></pre></td></tr></table></figure><p>文本框架属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本框架属性</span></span><br><span class="line"><span class="type">CTFramePr</span> <span class="variable">framePr</span> <span class="operator">=</span> pPr.getFramePr();</span><br><span class="line"><span class="comment">// 首字下沉图文框。表示架构中的以下属性：w：dropCap</span></span><br><span class="line"><span class="type">STDropCap</span> <span class="variable">dropCap</span> <span class="operator">=</span> framePr.getDropCap();</span><br><span class="line"><span class="comment">// 在 Line 中放置 Cap 垂直高度。表示架构中的以下属性：w：line</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">lines</span> <span class="operator">=</span> framePr.getLines();</span><br><span class="line"><span class="comment">// Frame Width。表示架构中的以下属性：w：w</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">w</span> <span class="operator">=</span> framePr.getW();</span><br><span class="line"><span class="comment">// Frame Height。表示架构中的以下属性：w：h</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">h</span> <span class="operator">=</span> framePr.getH();</span><br><span class="line"><span class="comment">// 垂直帧填充。表示架构中的以下属性：w：vSpace</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">vSpace</span> <span class="operator">=</span> framePr.getVSpace();</span><br><span class="line"><span class="comment">// 水平帧填充。表示架构中的以下属性：w：hSpace</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">hSpace</span> <span class="operator">=</span> framePr.getHSpace();</span><br><span class="line"><span class="comment">// 围绕 Frame 的文本环绕。表示架构中的以下属性：w：wrap</span></span><br><span class="line"><span class="type">STWrap</span> <span class="variable">wrap</span> <span class="operator">=</span> framePr.getWrap();</span><br><span class="line"><span class="comment">// 框架水平定位底座.表示架构中的以下属性：w：hAnchor</span></span><br><span class="line"><span class="type">STHAnchor</span> <span class="variable">hAnchor</span> <span class="operator">=</span> framePr.getHAnchor();</span><br><span class="line"><span class="comment">// 框架垂直定位底座.表示架构中的以下属性：w：vAnchor</span></span><br><span class="line"><span class="type">STVAnchor</span> <span class="variable">vAnchor</span> <span class="operator">=</span> framePr.getVAnchor();</span><br><span class="line"><span class="comment">// 绝对水平位置。表示架构中的以下属性：w：x</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">x</span> <span class="operator">=</span> framePr.getX();</span><br><span class="line"><span class="comment">// 相对水平位置。表示架构中的以下属性：w：xAlign</span></span><br><span class="line"><span class="type">STXAlign</span> <span class="variable">xAlign</span> <span class="operator">=</span> framePr.getXAlign();</span><br><span class="line"><span class="comment">// 绝对垂直位置。表示架构中的以下属性：w：y</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">y</span> <span class="operator">=</span> framePr.getY();</span><br><span class="line"><span class="comment">// 相对垂直位置。表示架构中的以下属性：w：yAlign</span></span><br><span class="line"><span class="type">STYAlign</span> <span class="variable">yAlign</span> <span class="operator">=</span> framePr.getYAlign();</span><br><span class="line"><span class="comment">// 帧高度类型。表示架构中的以下属性：w：hRule</span></span><br><span class="line"><span class="type">STHeightRule</span> <span class="variable">hRule</span> <span class="operator">=</span> framePr.getHRule();</span><br></pre></td></tr></table></figure><p>编号属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编号定义实例引用</span></span><br><span class="line">PPrBase.<span class="type">NumPr</span> <span class="variable">numPr</span> <span class="operator">=</span> pPr.getNumPr();</span><br><span class="line"><span class="comment">// 编号级别引用。 表示架构中的以下元素标记：w：ilvl</span></span><br><span class="line">PPrBase.NumPr.<span class="type">Ilvl</span> <span class="variable">ilvl</span> <span class="operator">=</span> numPr.getIlvl();</span><br><span class="line"><span class="comment">// 编号定义实例引用。 表示架构中的以下元素标记：w：numId</span></span><br><span class="line">PPrBase.NumPr.<span class="type">NumId</span> <span class="variable">numId</span> <span class="operator">=</span> numPr.getNumId();</span><br><span class="line"><span class="comment">// 上一个段落编号属性。 表示架构中的以下元素标记：w：numberingChange</span></span><br><span class="line"><span class="type">CTTrackChangeNumbering</span> <span class="variable">numberingChange</span> <span class="operator">=</span> numPr.getNumberingChange();</span><br><span class="line"><span class="comment">// 插入的编号属性。 表示架构中的以下元素标记：w：ins</span></span><br><span class="line"><span class="type">CTTrackChange</span> <span class="variable">ins</span> <span class="operator">=</span> numPr.getIns();</span><br></pre></td></tr></table></figure><p>段落边框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落边框</span></span><br><span class="line">PPrBase.<span class="type">PBdr</span> <span class="variable">pBdr</span> <span class="operator">=</span> pPr.getPBdr();</span><br><span class="line"><span class="comment">// 对页) 之间的条形 (段落边框</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">bar</span> <span class="operator">=</span> pBdr.getBar();</span><br><span class="line"><span class="comment">// 相同段落之间的 (段落边框)</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">between</span> <span class="operator">=</span> pBdr.getBetween();</span><br><span class="line"><span class="comment">// 左 (左段落边框)</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">left</span> <span class="operator">=</span> pBdr.getLeft();</span><br><span class="line"><span class="comment">// 右 (右段落边框)</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">right</span> <span class="operator">=</span> pBdr.getRight();</span><br><span class="line"><span class="comment">// 顶部 (段落边框上方相同段落)</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">top</span> <span class="operator">=</span> pBdr.getTop();</span><br><span class="line"><span class="comment">// 下 (段落边框下方相同段落)</span></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">bottom</span> <span class="operator">=</span> pBdr.getBottom();</span><br></pre></td></tr></table></figure><p>段落底纹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落底纹</span></span><br><span class="line"><span class="type">CTShd</span> <span class="variable">shd</span> <span class="operator">=</span> pPr.getShd();</span><br><span class="line"><span class="comment">// 着色模式。表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">STShd</span> <span class="variable">val</span> <span class="operator">=</span> shd.getVal();</span><br><span class="line"><span class="comment">// 底纹图案颜色。表示架构中的以下属性：w：color</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> shd.getColor();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色。表示架构中的以下属性：w：themeColor</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeColor</span> <span class="operator">=</span> shd.getThemeColor();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色淡化。表示架构中的以下属性：w：themeTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeTint</span> <span class="operator">=</span> shd.getThemeTint();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色阴影。表示架构中的以下属性：w：themeFillShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeShade</span> <span class="operator">=</span> shd.getThemeShade();</span><br><span class="line"><span class="comment">// 底纹背景色。表示架构中的以下属性：w：fill</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fill</span> <span class="operator">=</span> shd.getFill();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色。表示架构中的以下属性：w：themeFill</span></span><br><span class="line"><span class="type">STThemeColor</span> <span class="variable">themeFill</span> <span class="operator">=</span> shd.getThemeFill();</span><br><span class="line"><span class="comment">// 底纹背景主题颜色淡色。表示架构中的以下属性：w：themeFillTint</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeFillTint</span> <span class="operator">=</span> shd.getThemeFillTint();</span><br><span class="line"><span class="comment">// 底纹图案主题颜色阴影。表示架构中的以下属性：w：themeShade</span></span><br><span class="line"><span class="type">String</span> <span class="variable">themeFillShade</span> <span class="operator">=</span> shd.getThemeFillShade();</span><br></pre></td></tr></table></figure><p>自定义制表位集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义制表位集</span></span><br><span class="line"><span class="type">Tabs</span> <span class="variable">tabs</span> <span class="operator">=</span> pPr.getTabs();</span><br><span class="line"><span class="comment">// 选项卡 (自定义制表位)</span></span><br><span class="line">List&lt;CTTabStop&gt; tab = tabs.getTab();</span><br></pre></td></tr></table></figure><p>行距和段落上方&#x2F;下段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行距和段落上方/下段</span></span><br><span class="line">PPrBase.<span class="type">Spacing</span> <span class="variable">spacing</span> <span class="operator">=</span> pPr.getSpacing();</span><br><span class="line"><span class="comment">// 段落中的行间距。表示架构中的以下属性：w：line</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">line</span> <span class="operator">=</span> spacing.getLine();</span><br><span class="line"><span class="comment">// 行之间的间距类型。表示架构中的以下属性：w：lineRule</span></span><br><span class="line"><span class="type">STLineSpacingRule</span> <span class="variable">lineRule</span> <span class="operator">=</span> spacing.getLineRule();</span><br><span class="line"><span class="comment">// 段落下方的间距（以磅单位为单位）。</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">spacingAfter</span> <span class="operator">=</span> spacing.getAfter();</span><br><span class="line"><span class="comment">// 段落上方的间距（以磅单位为单位）。</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">spacingBefore</span> <span class="operator">=</span> spacing.getBefore();</span><br><span class="line"><span class="comment">// 段落下方的间距（以行单位为单位）。表示架构中的以下属性：w：afterLines</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">afterLines</span> <span class="operator">=</span> spacing.getAfterLines();</span><br><span class="line"><span class="comment">// 段落上方的间距（以行单位为单位）。表示架构中的以下属性：w：beforeLines</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">beforeLines</span> <span class="operator">=</span> spacing.getBeforeLines();</span><br></pre></td></tr></table></figure><p>段落缩进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落缩进</span></span><br><span class="line">PPrBase.<span class="type">Ind</span> <span class="variable">ind</span> <span class="operator">=</span> pPr.getInd();</span><br><span class="line"><span class="comment">// 左缩进。表示架构中的以下属性：w：left</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">left</span> <span class="operator">=</span> ind.getLeft();</span><br><span class="line"><span class="comment">// 字符单位中的左缩进。表示架构中的以下属性：w：leftChars</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">leftChars</span> <span class="operator">=</span> ind.getLeftChars();</span><br><span class="line"><span class="comment">// 右缩进。表示架构中的以下属性：w：right</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">right</span> <span class="operator">=</span> ind.getRight();</span><br><span class="line"><span class="comment">// 字符单位中的右缩进。表示架构中的以下属性：w：rightChars</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">rightChars</span> <span class="operator">=</span> ind.getRightChars();</span><br><span class="line"><span class="comment">// 从第一行中删除的缩进。表示架构中的以下属性：w：hanging</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">hanging</span> <span class="operator">=</span> ind.getHanging();</span><br><span class="line"><span class="comment">// 从字符单位的第一行中删除的缩进。表示架构中的以下属性：w：hangingChars</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">hangingChars</span> <span class="operator">=</span> ind.getHangingChars();</span><br><span class="line"><span class="comment">// 其他第一行缩进。表示架构中的以下属性：w：firstLine</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">firstLine</span> <span class="operator">=</span> ind.getFirstLine();</span><br><span class="line"><span class="comment">// 字符单位中的其他首行缩进。表示架构中的以下属性：w：firstLineChars</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">firstLineChars</span> <span class="operator">=</span> ind.getFirstLineChars();</span><br></pre></td></tr></table></figure><p>段落对齐方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落对齐方式</span></span><br><span class="line"><span class="type">Jc</span> <span class="variable">jc</span> <span class="operator">=</span> pPr.getJc();</span><br><span class="line"><span class="comment">// 对齐方式枚举</span></span><br><span class="line"><span class="type">JcEnumeration</span> <span class="variable">val</span> <span class="operator">=</span> jc.getVal();</span><br></pre></td></tr></table></figure><p>段落文本流方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落文本流方向</span></span><br><span class="line"><span class="type">TextDirection</span> <span class="variable">textDirection</span> <span class="operator">=</span> pPr.getTextDirection();</span><br><span class="line"><span class="comment">// 流方向枚举。从下到上，从左到右</span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> textDirection.getVal();</span><br></pre></td></tr></table></figure><p>文本框紧密环绕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本框紧密环绕</span></span><br><span class="line"><span class="type">CTTextboxTightWrap</span> <span class="variable">textboxTightWrap</span> <span class="operator">=</span> pPr.getTextboxTightWrap();</span><br><span class="line"><span class="comment">// 枚举，要紧换到段落范围的线条。表示架构中的以下属性：w：val</span></span><br><span class="line"><span class="type">STTextboxTightWrap</span> <span class="variable">val3</span> <span class="operator">=</span> textboxTightWrap.getVal();</span><br></pre></td></tr></table></figure><p>关联的大纲级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联的大纲级别</span></span><br><span class="line">PPrBase.<span class="type">OutlineLvl</span> <span class="variable">outlineLvl</span> <span class="operator">=</span> pPr.getOutlineLvl();</span><br><span class="line"><span class="comment">// 0 到 9</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> outlineLvl.getVal();</span><br></pre></td></tr></table></figure><p>关联的 HTML div ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联的 HTML div ID</span></span><br><span class="line">PPrBase.<span class="type">DivId</span> <span class="variable">divId</span> <span class="operator">=</span> pPr.getDivId();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">val</span> <span class="operator">=</span> divId.getVal();</span><br></pre></td></tr></table></figure><p>段落条件格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 段落条件格式</span></span><br><span class="line"><span class="type">CTCnf</span> <span class="variable">cnfStyle</span> <span class="operator">=</span> pPr.getCnfStyle();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> cnfStyle.getVal();</span><br></pre></td></tr></table></figure><h1 id="3-4、P对象其他属性"><a href="#3-4、P对象其他属性" class="headerlink" title="3.4、P对象其他属性"></a>3.4、P对象其他属性</h1><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>rsidDel (节删除修订 ID)</td><td>指定从文档中删除此节的节标记时用于跟踪 编辑会话 的唯一标识符。此文档中所有具有相等值的 rsid* 属性（如果存在）应指示这些区域在同一编辑会话期间已修改。创建者可以选择递增修订保存 ID 值，以指示后续编辑会话 (保存操作) 之间的编辑，以指示执行的保存顺序。此属性的可能值由 ST_LongHexNumber 简单类型 (§17.18.50) 定义。</td></tr><tr><td>rsidR (节添加修订 ID)</td><td>指定在将此节的节标记添加到文档时用于跟踪 编辑会话 的唯一标识符。此文档中所有具有相等值的 rsid* 属性（如果存在）应指示这些区域在同一编辑会话期间已修改。创建者可以选择递增修订保存 ID 值，以指示后续编辑会话 (保存操作) 之间的编辑，以指示执行的保存顺序。此属性的可能值由 ST_LongHexNumber 简单类型 (§17.18.50) 定义。</td></tr><tr><td>rsidRPr (物理节标记字符修订 ID)</td><td>指定上次格式化表示此节标记的物理字符时用于跟踪编辑会话的唯一标识符。此文档中所有具有相等值的 rsid* 属性（如果存在）应指示这些区域在同一编辑会话期间已修改。创建者可以选择递增修订保存 ID 值，以指示后续编辑会话 (保存操作) 之间的编辑，以指示执行的保存顺序。此属性的可能值由 ST_LongHexNumber 简单类型 (§17.18.50) 定义。</td></tr><tr><td>rsidSect (节属性 修订 ID)</td><td>指定上次格式化表示此节标记的物理字符时用于跟踪编辑会话的唯一标识符。此文档中所有具有相等值的 rsid* 属性（如果存在）应指示这些区域在同一编辑会话期间已修改。创建者可以选择递增修订保存 ID 值，以指示后续编辑会话 (保存操作) 之间的编辑，以指示执行的保存顺序。此属性的可能值由 ST_LongHexNumber 简单类型 (§17.18.50) 定义。</td></tr></tbody></table>]]></content:encoded>
      
      
      
      <category domain="https://log.660066.xyz/tags/Docx4j/">Docx4j</category>
      
      
      <comments>https://log.660066.xyz/2023/12/06/Docx4j%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-3-Docx4j%E7%9A%84%E6%AE%B5%E8%90%BD%E7%BA%A7%E5%88%AB%E4%BF%A1%E6%81%AF/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
